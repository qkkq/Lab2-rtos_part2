
Lab2-rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006680  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006908  08006908  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006908  08006908  00016908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006910  08006910  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006910  08006910  00016910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004700  20000074  0800698c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004774  0800698c  00024774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019434  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003505  00000000  00000000  000394d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  0003c9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003dd98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024c3f  00000000  00000000  0003f018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b15  00000000  00000000  00063c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e5d3c  00000000  00000000  0007a76c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001604a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056d4  00000000  00000000  001604f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006838 	.word	0x08006838

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08006838 	.word	0x08006838

08000210 <__aeabi_drsub>:
 8000210:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000214:	e002      	b.n	800021c <__adddf3>
 8000216:	bf00      	nop

08000218 <__aeabi_dsub>:
 8000218:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800021c <__adddf3>:
 800021c:	b530      	push	{r4, r5, lr}
 800021e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000222:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000226:	ea94 0f05 	teq	r4, r5
 800022a:	bf08      	it	eq
 800022c:	ea90 0f02 	teqeq	r0, r2
 8000230:	bf1f      	itttt	ne
 8000232:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000236:	ea55 0c02 	orrsne.w	ip, r5, r2
 800023a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800023e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000242:	f000 80e2 	beq.w	800040a <__adddf3+0x1ee>
 8000246:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800024a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800024e:	bfb8      	it	lt
 8000250:	426d      	neglt	r5, r5
 8000252:	dd0c      	ble.n	800026e <__adddf3+0x52>
 8000254:	442c      	add	r4, r5
 8000256:	ea80 0202 	eor.w	r2, r0, r2
 800025a:	ea81 0303 	eor.w	r3, r1, r3
 800025e:	ea82 0000 	eor.w	r0, r2, r0
 8000262:	ea83 0101 	eor.w	r1, r3, r1
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	2d36      	cmp	r5, #54	; 0x36
 8000270:	bf88      	it	hi
 8000272:	bd30      	pophi	{r4, r5, pc}
 8000274:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000278:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800027c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000280:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x70>
 8000286:	4240      	negs	r0, r0
 8000288:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800028c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000290:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000294:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000298:	d002      	beq.n	80002a0 <__adddf3+0x84>
 800029a:	4252      	negs	r2, r2
 800029c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a0:	ea94 0f05 	teq	r4, r5
 80002a4:	f000 80a7 	beq.w	80003f6 <__adddf3+0x1da>
 80002a8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b0:	db0d      	blt.n	80002ce <__adddf3+0xb2>
 80002b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002b6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ba:	1880      	adds	r0, r0, r2
 80002bc:	f141 0100 	adc.w	r1, r1, #0
 80002c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002c4:	1880      	adds	r0, r0, r2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	4159      	adcs	r1, r3
 80002cc:	e00e      	b.n	80002ec <__adddf3+0xd0>
 80002ce:	f1a5 0520 	sub.w	r5, r5, #32
 80002d2:	f10e 0e20 	add.w	lr, lr, #32
 80002d6:	2a01      	cmp	r2, #1
 80002d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002dc:	bf28      	it	cs
 80002de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002e2:	fa43 f305 	asr.w	r3, r3, r5
 80002e6:	18c0      	adds	r0, r0, r3
 80002e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f0:	d507      	bpl.n	8000302 <__adddf3+0xe6>
 80002f2:	f04f 0e00 	mov.w	lr, #0
 80002f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000302:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000306:	d31b      	bcc.n	8000340 <__adddf3+0x124>
 8000308:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800030c:	d30c      	bcc.n	8000328 <__adddf3+0x10c>
 800030e:	0849      	lsrs	r1, r1, #1
 8000310:	ea5f 0030 	movs.w	r0, r0, rrx
 8000314:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000318:	f104 0401 	add.w	r4, r4, #1
 800031c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000320:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000324:	f080 809a 	bcs.w	800045c <__adddf3+0x240>
 8000328:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800032c:	bf08      	it	eq
 800032e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000332:	f150 0000 	adcs.w	r0, r0, #0
 8000336:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800033a:	ea41 0105 	orr.w	r1, r1, r5
 800033e:	bd30      	pop	{r4, r5, pc}
 8000340:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000344:	4140      	adcs	r0, r0
 8000346:	eb41 0101 	adc.w	r1, r1, r1
 800034a:	3c01      	subs	r4, #1
 800034c:	bf28      	it	cs
 800034e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000352:	d2e9      	bcs.n	8000328 <__adddf3+0x10c>
 8000354:	f091 0f00 	teq	r1, #0
 8000358:	bf04      	itt	eq
 800035a:	4601      	moveq	r1, r0
 800035c:	2000      	moveq	r0, #0
 800035e:	fab1 f381 	clz	r3, r1
 8000362:	bf08      	it	eq
 8000364:	3320      	addeq	r3, #32
 8000366:	f1a3 030b 	sub.w	r3, r3, #11
 800036a:	f1b3 0220 	subs.w	r2, r3, #32
 800036e:	da0c      	bge.n	800038a <__adddf3+0x16e>
 8000370:	320c      	adds	r2, #12
 8000372:	dd08      	ble.n	8000386 <__adddf3+0x16a>
 8000374:	f102 0c14 	add.w	ip, r2, #20
 8000378:	f1c2 020c 	rsb	r2, r2, #12
 800037c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000380:	fa21 f102 	lsr.w	r1, r1, r2
 8000384:	e00c      	b.n	80003a0 <__adddf3+0x184>
 8000386:	f102 0214 	add.w	r2, r2, #20
 800038a:	bfd8      	it	le
 800038c:	f1c2 0c20 	rsble	ip, r2, #32
 8000390:	fa01 f102 	lsl.w	r1, r1, r2
 8000394:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000398:	bfdc      	itt	le
 800039a:	ea41 010c 	orrle.w	r1, r1, ip
 800039e:	4090      	lslle	r0, r2
 80003a0:	1ae4      	subs	r4, r4, r3
 80003a2:	bfa2      	ittt	ge
 80003a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a8:	4329      	orrge	r1, r5
 80003aa:	bd30      	popge	{r4, r5, pc}
 80003ac:	ea6f 0404 	mvn.w	r4, r4
 80003b0:	3c1f      	subs	r4, #31
 80003b2:	da1c      	bge.n	80003ee <__adddf3+0x1d2>
 80003b4:	340c      	adds	r4, #12
 80003b6:	dc0e      	bgt.n	80003d6 <__adddf3+0x1ba>
 80003b8:	f104 0414 	add.w	r4, r4, #20
 80003bc:	f1c4 0220 	rsb	r2, r4, #32
 80003c0:	fa20 f004 	lsr.w	r0, r0, r4
 80003c4:	fa01 f302 	lsl.w	r3, r1, r2
 80003c8:	ea40 0003 	orr.w	r0, r0, r3
 80003cc:	fa21 f304 	lsr.w	r3, r1, r4
 80003d0:	ea45 0103 	orr.w	r1, r5, r3
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f1c4 040c 	rsb	r4, r4, #12
 80003da:	f1c4 0220 	rsb	r2, r4, #32
 80003de:	fa20 f002 	lsr.w	r0, r0, r2
 80003e2:	fa01 f304 	lsl.w	r3, r1, r4
 80003e6:	ea40 0003 	orr.w	r0, r0, r3
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	fa21 f004 	lsr.w	r0, r1, r4
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f094 0f00 	teq	r4, #0
 80003fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003fe:	bf06      	itte	eq
 8000400:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000404:	3401      	addeq	r4, #1
 8000406:	3d01      	subne	r5, #1
 8000408:	e74e      	b.n	80002a8 <__adddf3+0x8c>
 800040a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800040e:	bf18      	it	ne
 8000410:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000414:	d029      	beq.n	800046a <__adddf3+0x24e>
 8000416:	ea94 0f05 	teq	r4, r5
 800041a:	bf08      	it	eq
 800041c:	ea90 0f02 	teqeq	r0, r2
 8000420:	d005      	beq.n	800042e <__adddf3+0x212>
 8000422:	ea54 0c00 	orrs.w	ip, r4, r0
 8000426:	bf04      	itt	eq
 8000428:	4619      	moveq	r1, r3
 800042a:	4610      	moveq	r0, r2
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea91 0f03 	teq	r1, r3
 8000432:	bf1e      	ittt	ne
 8000434:	2100      	movne	r1, #0
 8000436:	2000      	movne	r0, #0
 8000438:	bd30      	popne	{r4, r5, pc}
 800043a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800043e:	d105      	bne.n	800044c <__adddf3+0x230>
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	4149      	adcs	r1, r1
 8000444:	bf28      	it	cs
 8000446:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800044a:	bd30      	pop	{r4, r5, pc}
 800044c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000450:	bf3c      	itt	cc
 8000452:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000456:	bd30      	popcc	{r4, r5, pc}
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf1a      	itte	ne
 8000470:	4619      	movne	r1, r3
 8000472:	4610      	movne	r0, r2
 8000474:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000478:	bf1c      	itt	ne
 800047a:	460b      	movne	r3, r1
 800047c:	4602      	movne	r2, r0
 800047e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000482:	bf06      	itte	eq
 8000484:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000488:	ea91 0f03 	teqeq	r1, r3
 800048c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	bf00      	nop

08000494 <__aeabi_ui2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f04f 0500 	mov.w	r5, #0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e750      	b.n	8000354 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_i2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004cc:	bf48      	it	mi
 80004ce:	4240      	negmi	r0, r0
 80004d0:	f04f 0100 	mov.w	r1, #0
 80004d4:	e73e      	b.n	8000354 <__adddf3+0x138>
 80004d6:	bf00      	nop

080004d8 <__aeabi_f2d>:
 80004d8:	0042      	lsls	r2, r0, #1
 80004da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004de:	ea4f 0131 	mov.w	r1, r1, rrx
 80004e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004e6:	bf1f      	itttt	ne
 80004e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004f4:	4770      	bxne	lr
 80004f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004fa:	bf08      	it	eq
 80004fc:	4770      	bxeq	lr
 80004fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000502:	bf04      	itt	eq
 8000504:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000508:	4770      	bxeq	lr
 800050a:	b530      	push	{r4, r5, lr}
 800050c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e71c      	b.n	8000354 <__adddf3+0x138>
 800051a:	bf00      	nop

0800051c <__aeabi_ul2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f04f 0500 	mov.w	r5, #0
 800052a:	e00a      	b.n	8000542 <__aeabi_l2d+0x16>

0800052c <__aeabi_l2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800053a:	d502      	bpl.n	8000542 <__aeabi_l2d+0x16>
 800053c:	4240      	negs	r0, r0
 800053e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000542:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000546:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800054e:	f43f aed8 	beq.w	8000302 <__adddf3+0xe6>
 8000552:	f04f 0203 	mov.w	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 fe03 	lsl.w	lr, r1, r3
 800057a:	ea40 000e 	orr.w	r0, r0, lr
 800057e:	fa21 f102 	lsr.w	r1, r1, r2
 8000582:	4414      	add	r4, r2
 8000584:	e6bd      	b.n	8000302 <__adddf3+0xe6>
 8000586:	bf00      	nop

08000588 <__aeabi_dmul>:
 8000588:	b570      	push	{r4, r5, r6, lr}
 800058a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800058e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000592:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000596:	bf1d      	ittte	ne
 8000598:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800059c:	ea94 0f0c 	teqne	r4, ip
 80005a0:	ea95 0f0c 	teqne	r5, ip
 80005a4:	f000 f8de 	bleq	8000764 <__aeabi_dmul+0x1dc>
 80005a8:	442c      	add	r4, r5
 80005aa:	ea81 0603 	eor.w	r6, r1, r3
 80005ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ba:	bf18      	it	ne
 80005bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c8:	d038      	beq.n	800063c <__aeabi_dmul+0xb4>
 80005ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005de:	f04f 0600 	mov.w	r6, #0
 80005e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005e6:	f09c 0f00 	teq	ip, #0
 80005ea:	bf18      	it	ne
 80005ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005fc:	d204      	bcs.n	8000608 <__aeabi_dmul+0x80>
 80005fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000602:	416d      	adcs	r5, r5
 8000604:	eb46 0606 	adc.w	r6, r6, r6
 8000608:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800060c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000610:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000614:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000618:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800061c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000620:	bf88      	it	hi
 8000622:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000626:	d81e      	bhi.n	8000666 <__aeabi_dmul+0xde>
 8000628:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000640:	ea46 0101 	orr.w	r1, r6, r1
 8000644:	ea40 0002 	orr.w	r0, r0, r2
 8000648:	ea81 0103 	eor.w	r1, r1, r3
 800064c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000650:	bfc2      	ittt	gt
 8000652:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000656:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800065a:	bd70      	popgt	{r4, r5, r6, pc}
 800065c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000660:	f04f 0e00 	mov.w	lr, #0
 8000664:	3c01      	subs	r4, #1
 8000666:	f300 80ab 	bgt.w	80007c0 <__aeabi_dmul+0x238>
 800066a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800066e:	bfde      	ittt	le
 8000670:	2000      	movle	r0, #0
 8000672:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd70      	pople	{r4, r5, r6, pc}
 8000678:	f1c4 0400 	rsb	r4, r4, #0
 800067c:	3c20      	subs	r4, #32
 800067e:	da35      	bge.n	80006ec <__aeabi_dmul+0x164>
 8000680:	340c      	adds	r4, #12
 8000682:	dc1b      	bgt.n	80006bc <__aeabi_dmul+0x134>
 8000684:	f104 0414 	add.w	r4, r4, #20
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f305 	lsl.w	r3, r0, r5
 8000690:	fa20 f004 	lsr.w	r0, r0, r4
 8000694:	fa01 f205 	lsl.w	r2, r1, r5
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ac:	eb42 0106 	adc.w	r1, r2, r6
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 040c 	rsb	r4, r4, #12
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f304 	lsl.w	r3, r0, r4
 80006c8:	fa20 f005 	lsr.w	r0, r0, r5
 80006cc:	fa01 f204 	lsl.w	r2, r1, r4
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006dc:	f141 0100 	adc.w	r1, r1, #0
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 0520 	rsb	r5, r4, #32
 80006f0:	fa00 f205 	lsl.w	r2, r0, r5
 80006f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f8:	fa20 f304 	lsr.w	r3, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea43 0302 	orr.w	r3, r3, r2
 8000704:	fa21 f004 	lsr.w	r0, r1, r4
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	fa21 f204 	lsr.w	r2, r1, r4
 8000710:	ea20 0002 	bic.w	r0, r0, r2
 8000714:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f094 0f00 	teq	r4, #0
 8000728:	d10f      	bne.n	800074a <__aeabi_dmul+0x1c2>
 800072a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800072e:	0040      	lsls	r0, r0, #1
 8000730:	eb41 0101 	adc.w	r1, r1, r1
 8000734:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3c01      	subeq	r4, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1a6>
 800073e:	ea41 0106 	orr.w	r1, r1, r6
 8000742:	f095 0f00 	teq	r5, #0
 8000746:	bf18      	it	ne
 8000748:	4770      	bxne	lr
 800074a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800074e:	0052      	lsls	r2, r2, #1
 8000750:	eb43 0303 	adc.w	r3, r3, r3
 8000754:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3d01      	subeq	r5, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1c6>
 800075e:	ea43 0306 	orr.w	r3, r3, r6
 8000762:	4770      	bx	lr
 8000764:	ea94 0f0c 	teq	r4, ip
 8000768:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800076c:	bf18      	it	ne
 800076e:	ea95 0f0c 	teqne	r5, ip
 8000772:	d00c      	beq.n	800078e <__aeabi_dmul+0x206>
 8000774:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000778:	bf18      	it	ne
 800077a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077e:	d1d1      	bne.n	8000724 <__aeabi_dmul+0x19c>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f04f 0000 	mov.w	r0, #0
 800078c:	bd70      	pop	{r4, r5, r6, pc}
 800078e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000792:	bf06      	itte	eq
 8000794:	4610      	moveq	r0, r2
 8000796:	4619      	moveq	r1, r3
 8000798:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079c:	d019      	beq.n	80007d2 <__aeabi_dmul+0x24a>
 800079e:	ea94 0f0c 	teq	r4, ip
 80007a2:	d102      	bne.n	80007aa <__aeabi_dmul+0x222>
 80007a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a8:	d113      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007aa:	ea95 0f0c 	teq	r5, ip
 80007ae:	d105      	bne.n	80007bc <__aeabi_dmul+0x234>
 80007b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007b4:	bf1c      	itt	ne
 80007b6:	4610      	movne	r0, r2
 80007b8:	4619      	movne	r1, r3
 80007ba:	d10a      	bne.n	80007d2 <__aeabi_dmul+0x24a>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	bd70      	pop	{r4, r5, r6, pc}
 80007d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007da:	bd70      	pop	{r4, r5, r6, pc}

080007dc <__aeabi_ddiv>:
 80007dc:	b570      	push	{r4, r5, r6, lr}
 80007de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ea:	bf1d      	ittte	ne
 80007ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f0:	ea94 0f0c 	teqne	r4, ip
 80007f4:	ea95 0f0c 	teqne	r5, ip
 80007f8:	f000 f8a7 	bleq	800094a <__aeabi_ddiv+0x16e>
 80007fc:	eba4 0405 	sub.w	r4, r4, r5
 8000800:	ea81 0e03 	eor.w	lr, r1, r3
 8000804:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000808:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800080c:	f000 8088 	beq.w	8000920 <__aeabi_ddiv+0x144>
 8000810:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000814:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000818:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800081c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000820:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000824:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000828:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800082c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000830:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000834:	429d      	cmp	r5, r3
 8000836:	bf08      	it	eq
 8000838:	4296      	cmpeq	r6, r2
 800083a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800083e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000842:	d202      	bcs.n	800084a <__aeabi_ddiv+0x6e>
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	1ab6      	subs	r6, r6, r2
 800084c:	eb65 0503 	sbc.w	r5, r5, r3
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800085a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008bc:	d018      	beq.n	80008f0 <__aeabi_ddiv+0x114>
 80008be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008da:	d1c0      	bne.n	800085e <__aeabi_ddiv+0x82>
 80008dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e0:	d10b      	bne.n	80008fa <__aeabi_ddiv+0x11e>
 80008e2:	ea41 0100 	orr.w	r1, r1, r0
 80008e6:	f04f 0000 	mov.w	r0, #0
 80008ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ee:	e7b6      	b.n	800085e <__aeabi_ddiv+0x82>
 80008f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f4:	bf04      	itt	eq
 80008f6:	4301      	orreq	r1, r0
 80008f8:	2000      	moveq	r0, #0
 80008fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008fe:	bf88      	it	hi
 8000900:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000904:	f63f aeaf 	bhi.w	8000666 <__aeabi_dmul+0xde>
 8000908:	ebb5 0c03 	subs.w	ip, r5, r3
 800090c:	bf04      	itt	eq
 800090e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000912:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000916:	f150 0000 	adcs.w	r0, r0, #0
 800091a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800091e:	bd70      	pop	{r4, r5, r6, pc}
 8000920:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000924:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000928:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800092c:	bfc2      	ittt	gt
 800092e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000932:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000936:	bd70      	popgt	{r4, r5, r6, pc}
 8000938:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800093c:	f04f 0e00 	mov.w	lr, #0
 8000940:	3c01      	subs	r4, #1
 8000942:	e690      	b.n	8000666 <__aeabi_dmul+0xde>
 8000944:	ea45 0e06 	orr.w	lr, r5, r6
 8000948:	e68d      	b.n	8000666 <__aeabi_dmul+0xde>
 800094a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800094e:	ea94 0f0c 	teq	r4, ip
 8000952:	bf08      	it	eq
 8000954:	ea95 0f0c 	teqeq	r5, ip
 8000958:	f43f af3b 	beq.w	80007d2 <__aeabi_dmul+0x24a>
 800095c:	ea94 0f0c 	teq	r4, ip
 8000960:	d10a      	bne.n	8000978 <__aeabi_ddiv+0x19c>
 8000962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000966:	f47f af34 	bne.w	80007d2 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	f47f af25 	bne.w	80007bc <__aeabi_dmul+0x234>
 8000972:	4610      	mov	r0, r2
 8000974:	4619      	mov	r1, r3
 8000976:	e72c      	b.n	80007d2 <__aeabi_dmul+0x24a>
 8000978:	ea95 0f0c 	teq	r5, ip
 800097c:	d106      	bne.n	800098c <__aeabi_ddiv+0x1b0>
 800097e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000982:	f43f aefd 	beq.w	8000780 <__aeabi_dmul+0x1f8>
 8000986:	4610      	mov	r0, r2
 8000988:	4619      	mov	r1, r3
 800098a:	e722      	b.n	80007d2 <__aeabi_dmul+0x24a>
 800098c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000996:	f47f aec5 	bne.w	8000724 <__aeabi_dmul+0x19c>
 800099a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800099e:	f47f af0d 	bne.w	80007bc <__aeabi_dmul+0x234>
 80009a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009a6:	f47f aeeb 	bne.w	8000780 <__aeabi_dmul+0x1f8>
 80009aa:	e712      	b.n	80007d2 <__aeabi_dmul+0x24a>

080009ac <__aeabi_d2f>:
 80009ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009b4:	bf24      	itt	cs
 80009b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009be:	d90d      	bls.n	80009dc <__aeabi_d2f+0x30>
 80009c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009d4:	bf08      	it	eq
 80009d6:	f020 0001 	biceq.w	r0, r0, #1
 80009da:	4770      	bx	lr
 80009dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e0:	d121      	bne.n	8000a26 <__aeabi_d2f+0x7a>
 80009e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009e6:	bfbc      	itt	lt
 80009e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ec:	4770      	bxlt	lr
 80009ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009f6:	f1c2 0218 	rsb	r2, r2, #24
 80009fa:	f1c2 0c20 	rsb	ip, r2, #32
 80009fe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a02:	fa20 f002 	lsr.w	r0, r0, r2
 8000a06:	bf18      	it	ne
 8000a08:	f040 0001 	orrne.w	r0, r0, #1
 8000a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a18:	ea40 000c 	orr.w	r0, r0, ip
 8000a1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a24:	e7cc      	b.n	80009c0 <__aeabi_d2f+0x14>
 8000a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a2a:	d107      	bne.n	8000a3c <__aeabi_d2f+0x90>
 8000a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a30:	bf1e      	ittt	ne
 8000a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a3a:	4770      	bxne	lr
 8000a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b974 	b.w	8000d4c <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9d08      	ldr	r5, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	468e      	mov	lr, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14d      	bne.n	8000b26 <__udivmoddi4+0xaa>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4694      	mov	ip, r2
 8000a8e:	d969      	bls.n	8000b64 <__udivmoddi4+0xe8>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b152      	cbz	r2, 8000aac <__udivmoddi4+0x30>
 8000a96:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9a:	f1c2 0120 	rsb	r1, r2, #32
 8000a9e:	fa20 f101 	lsr.w	r1, r0, r1
 8000aa2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aa6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aaa:	4094      	lsls	r4, r2
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	0c21      	lsrs	r1, r4, #16
 8000ab2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ab6:	fa1f f78c 	uxth.w	r7, ip
 8000aba:	fb08 e316 	mls	r3, r8, r6, lr
 8000abe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ac2:	fb06 f107 	mul.w	r1, r6, r7
 8000ac6:	4299      	cmp	r1, r3
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x64>
 8000aca:	eb1c 0303 	adds.w	r3, ip, r3
 8000ace:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ad2:	f080 811f 	bcs.w	8000d14 <__udivmoddi4+0x298>
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	f240 811c 	bls.w	8000d14 <__udivmoddi4+0x298>
 8000adc:	3e02      	subs	r6, #2
 8000ade:	4463      	add	r3, ip
 8000ae0:	1a5b      	subs	r3, r3, r1
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af0:	fb00 f707 	mul.w	r7, r0, r7
 8000af4:	42a7      	cmp	r7, r4
 8000af6:	d90a      	bls.n	8000b0e <__udivmoddi4+0x92>
 8000af8:	eb1c 0404 	adds.w	r4, ip, r4
 8000afc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b00:	f080 810a 	bcs.w	8000d18 <__udivmoddi4+0x29c>
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	f240 8107 	bls.w	8000d18 <__udivmoddi4+0x29c>
 8000b0a:	4464      	add	r4, ip
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	1be4      	subs	r4, r4, r7
 8000b14:	2600      	movs	r6, #0
 8000b16:	b11d      	cbz	r5, 8000b20 <__udivmoddi4+0xa4>
 8000b18:	40d4      	lsrs	r4, r2
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	428b      	cmp	r3, r1
 8000b28:	d909      	bls.n	8000b3e <__udivmoddi4+0xc2>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	f000 80ef 	beq.w	8000d0e <__udivmoddi4+0x292>
 8000b30:	2600      	movs	r6, #0
 8000b32:	e9c5 0100 	strd	r0, r1, [r5]
 8000b36:	4630      	mov	r0, r6
 8000b38:	4631      	mov	r1, r6
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	fab3 f683 	clz	r6, r3
 8000b42:	2e00      	cmp	r6, #0
 8000b44:	d14a      	bne.n	8000bdc <__udivmoddi4+0x160>
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xd4>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80f9 	bhi.w	8000d42 <__udivmoddi4+0x2c6>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb61 0303 	sbc.w	r3, r1, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	469e      	mov	lr, r3
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d0e0      	beq.n	8000b20 <__udivmoddi4+0xa4>
 8000b5e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b62:	e7dd      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000b64:	b902      	cbnz	r2, 8000b68 <__udivmoddi4+0xec>
 8000b66:	deff      	udf	#255	; 0xff
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	2a00      	cmp	r2, #0
 8000b6e:	f040 8092 	bne.w	8000c96 <__udivmoddi4+0x21a>
 8000b72:	eba1 010c 	sub.w	r1, r1, ip
 8000b76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7a:	fa1f fe8c 	uxth.w	lr, ip
 8000b7e:	2601      	movs	r6, #1
 8000b80:	0c20      	lsrs	r0, r4, #16
 8000b82:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b86:	fb07 1113 	mls	r1, r7, r3, r1
 8000b8a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b8e:	fb0e f003 	mul.w	r0, lr, r3
 8000b92:	4288      	cmp	r0, r1
 8000b94:	d908      	bls.n	8000ba8 <__udivmoddi4+0x12c>
 8000b96:	eb1c 0101 	adds.w	r1, ip, r1
 8000b9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x12a>
 8000ba0:	4288      	cmp	r0, r1
 8000ba2:	f200 80cb 	bhi.w	8000d3c <__udivmoddi4+0x2c0>
 8000ba6:	4643      	mov	r3, r8
 8000ba8:	1a09      	subs	r1, r1, r0
 8000baa:	b2a4      	uxth	r4, r4
 8000bac:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bb0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bb4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bbc:	45a6      	cmp	lr, r4
 8000bbe:	d908      	bls.n	8000bd2 <__udivmoddi4+0x156>
 8000bc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bc8:	d202      	bcs.n	8000bd0 <__udivmoddi4+0x154>
 8000bca:	45a6      	cmp	lr, r4
 8000bcc:	f200 80bb 	bhi.w	8000d46 <__udivmoddi4+0x2ca>
 8000bd0:	4608      	mov	r0, r1
 8000bd2:	eba4 040e 	sub.w	r4, r4, lr
 8000bd6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bda:	e79c      	b.n	8000b16 <__udivmoddi4+0x9a>
 8000bdc:	f1c6 0720 	rsb	r7, r6, #32
 8000be0:	40b3      	lsls	r3, r6
 8000be2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000be6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bea:	fa20 f407 	lsr.w	r4, r0, r7
 8000bee:	fa01 f306 	lsl.w	r3, r1, r6
 8000bf2:	431c      	orrs	r4, r3
 8000bf4:	40f9      	lsrs	r1, r7
 8000bf6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bfa:	fa00 f306 	lsl.w	r3, r0, r6
 8000bfe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c02:	0c20      	lsrs	r0, r4, #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fb09 1118 	mls	r1, r9, r8, r1
 8000c0c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c10:	fb08 f00e 	mul.w	r0, r8, lr
 8000c14:	4288      	cmp	r0, r1
 8000c16:	fa02 f206 	lsl.w	r2, r2, r6
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b8>
 8000c1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c24:	f080 8088 	bcs.w	8000d38 <__udivmoddi4+0x2bc>
 8000c28:	4288      	cmp	r0, r1
 8000c2a:	f240 8085 	bls.w	8000d38 <__udivmoddi4+0x2bc>
 8000c2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c32:	4461      	add	r1, ip
 8000c34:	1a09      	subs	r1, r1, r0
 8000c36:	b2a4      	uxth	r4, r4
 8000c38:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c3c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c40:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c48:	458e      	cmp	lr, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1e2>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c54:	d26c      	bcs.n	8000d30 <__udivmoddi4+0x2b4>
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d96a      	bls.n	8000d30 <__udivmoddi4+0x2b4>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c62:	fba0 9402 	umull	r9, r4, r0, r2
 8000c66:	eba1 010e 	sub.w	r1, r1, lr
 8000c6a:	42a1      	cmp	r1, r4
 8000c6c:	46c8      	mov	r8, r9
 8000c6e:	46a6      	mov	lr, r4
 8000c70:	d356      	bcc.n	8000d20 <__udivmoddi4+0x2a4>
 8000c72:	d053      	beq.n	8000d1c <__udivmoddi4+0x2a0>
 8000c74:	b15d      	cbz	r5, 8000c8e <__udivmoddi4+0x212>
 8000c76:	ebb3 0208 	subs.w	r2, r3, r8
 8000c7a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c7e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c82:	fa22 f306 	lsr.w	r3, r2, r6
 8000c86:	40f1      	lsrs	r1, r6
 8000c88:	431f      	orrs	r7, r3
 8000c8a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c8e:	2600      	movs	r6, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	f1c2 0320 	rsb	r3, r2, #32
 8000c9a:	40d8      	lsrs	r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca4:	4091      	lsls	r1, r2
 8000ca6:	4301      	orrs	r1, r0
 8000ca8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cac:	fa1f fe8c 	uxth.w	lr, ip
 8000cb0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cb4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cb8:	0c0b      	lsrs	r3, r1, #16
 8000cba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cbe:	fb00 f60e 	mul.w	r6, r0, lr
 8000cc2:	429e      	cmp	r6, r3
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x260>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cd2:	d22f      	bcs.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd4:	429e      	cmp	r6, r3
 8000cd6:	d92d      	bls.n	8000d34 <__udivmoddi4+0x2b8>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1b9b      	subs	r3, r3, r6
 8000cde:	b289      	uxth	r1, r1
 8000ce0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ce4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ce8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cec:	fb06 f30e 	mul.w	r3, r6, lr
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x28a>
 8000cf4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cfc:	d216      	bcs.n	8000d2c <__udivmoddi4+0x2b0>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d914      	bls.n	8000d2c <__udivmoddi4+0x2b0>
 8000d02:	3e02      	subs	r6, #2
 8000d04:	4461      	add	r1, ip
 8000d06:	1ac9      	subs	r1, r1, r3
 8000d08:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d0c:	e738      	b.n	8000b80 <__udivmoddi4+0x104>
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e705      	b.n	8000b20 <__udivmoddi4+0xa4>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e3      	b.n	8000ae0 <__udivmoddi4+0x64>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6f8      	b.n	8000b0e <__udivmoddi4+0x92>
 8000d1c:	454b      	cmp	r3, r9
 8000d1e:	d2a9      	bcs.n	8000c74 <__udivmoddi4+0x1f8>
 8000d20:	ebb9 0802 	subs.w	r8, r9, r2
 8000d24:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7a3      	b.n	8000c74 <__udivmoddi4+0x1f8>
 8000d2c:	4646      	mov	r6, r8
 8000d2e:	e7ea      	b.n	8000d06 <__udivmoddi4+0x28a>
 8000d30:	4620      	mov	r0, r4
 8000d32:	e794      	b.n	8000c5e <__udivmoddi4+0x1e2>
 8000d34:	4640      	mov	r0, r8
 8000d36:	e7d1      	b.n	8000cdc <__udivmoddi4+0x260>
 8000d38:	46d0      	mov	r8, sl
 8000d3a:	e77b      	b.n	8000c34 <__udivmoddi4+0x1b8>
 8000d3c:	3b02      	subs	r3, #2
 8000d3e:	4461      	add	r1, ip
 8000d40:	e732      	b.n	8000ba8 <__udivmoddi4+0x12c>
 8000d42:	4630      	mov	r0, r6
 8000d44:	e709      	b.n	8000b5a <__udivmoddi4+0xde>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	e742      	b.n	8000bd2 <__udivmoddi4+0x156>

08000d4c <__aeabi_idiv0>:
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop

08000d50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4a07      	ldr	r2, [pc, #28]	; (8000d7c <vApplicationGetIdleTaskMemory+0x2c>)
 8000d60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d62:	68bb      	ldr	r3, [r7, #8]
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <vApplicationGetIdleTaskMemory+0x30>)
 8000d66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000090 	.word	0x20000090
 8000d80:	20000144 	.word	0x20000144

08000d84 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000d94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	4a06      	ldr	r2, [pc, #24]	; (8000db4 <vApplicationGetTimerTaskMemory+0x30>)
 8000d9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000da2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000da4:	bf00      	nop
 8000da6:	3714      	adds	r7, #20
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	20000344 	.word	0x20000344
 8000db4:	200003f8 	.word	0x200003f8

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b5b0      	push	{r4, r5, r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbe:	f000 fbbb 	bl	8001538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc2:	f000 f831 	bl	8000e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc6:	f000 f91b 	bl	8001000 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 f8ef 	bl	8000fac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000dce:	f000 f899 	bl	8000f04 <MX_ADC1_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, PTCallback);
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <main+0x60>)
 8000dd4:	623b      	str	r3, [r7, #32]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 8000dda:	f107 0320 	add.w	r3, r7, #32
 8000dde:	2200      	movs	r2, #0
 8000de0:	2101      	movs	r1, #1
 8000de2:	4618      	mov	r0, r3
 8000de4:	f002 fed8 	bl	8003b98 <osTimerCreate>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <main+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 8000dee:	4b0c      	ldr	r3, [pc, #48]	; (8000e20 <main+0x68>)
 8000df0:	1d3c      	adds	r4, r7, #4
 8000df2:	461d      	mov	r5, r3
 8000df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000df8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000dfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 8000e00:	1d3b      	adds	r3, r7, #4
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fe66 	bl	8003ad6 <osThreadCreate>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <main+0x6c>)
 8000e0e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000e10:	f002 fe5a 	bl	8003ac8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <main+0x5c>
 8000e16:	bf00      	nop
 8000e18:	08001161 	.word	0x08001161
 8000e1c:	2000088c 	.word	0x2000088c
 8000e20:	08006858 	.word	0x08006858
 8000e24:	20000888 	.word	0x20000888

08000e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b094      	sub	sp, #80	; 0x50
 8000e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	4618      	mov	r0, r3
 8000e38:	f005 fc34 	bl	80066a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <SystemClock_Config+0xd4>)
 8000e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e54:	4a29      	ldr	r2, [pc, #164]	; (8000efc <SystemClock_Config+0xd4>)
 8000e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <SystemClock_Config+0xd4>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e68:	2300      	movs	r3, #0
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e74:	4a22      	ldr	r2, [pc, #136]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6013      	str	r3, [r2, #0]
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <SystemClock_Config+0xd8>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e90:	2310      	movs	r3, #16
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e94:	2302      	movs	r3, #2
 8000e96:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ea0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ea4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 fdce 	bl	8002a58 <HAL_RCC_OscConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ec2:	f000 f9c7 	bl	8001254 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ec6:	230f      	movs	r3, #15
 8000ec8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000edc:	f107 0308 	add.w	r3, r7, #8
 8000ee0:	2102      	movs	r1, #2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f001 fa3c 	bl	8002360 <HAL_RCC_ClockConfig>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000eee:	f000 f9b1 	bl	8001254 <Error_Handler>
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3750      	adds	r7, #80	; 0x50
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40007000 	.word	0x40007000

08000f04 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f18:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <MX_ADC1_Init+0x9c>)
 8000f1a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f22:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f24:	4b1d      	ldr	r3, [pc, #116]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f44:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f46:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <MX_ADC1_Init+0xa0>)
 8000f48:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f66:	f000 fb29 	bl	80015bc <HAL_ADC_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f70:	f000 f970 	bl	8001254 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <MX_ADC1_Init+0xa4>)
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f80:	463b      	mov	r3, r7
 8000f82:	4619      	mov	r1, r3
 8000f84:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_ADC1_Init+0x98>)
 8000f86:	f000 fcfb 	bl	8001980 <HAL_ADC_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f90:	f000 f960 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	200007fc 	.word	0x200007fc
 8000fa0:	40012000 	.word	0x40012000
 8000fa4:	0f000001 	.word	0x0f000001
 8000fa8:	10000012 	.word	0x10000012

08000fac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb2:	4a12      	ldr	r2, [pc, #72]	; (8000ffc <MX_USART2_UART_Init+0x50>)
 8000fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fb6:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fbe:	4b0e      	ldr	r3, [pc, #56]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fd0:	4b09      	ldr	r3, [pc, #36]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fd6:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fe2:	4805      	ldr	r0, [pc, #20]	; (8000ff8 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f002 fa84 	bl	80034f0 <HAL_UART_Init>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fee:	f000 f931 	bl	8001254 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000844 	.word	0x20000844
 8000ffc:	40004400 	.word	0x40004400

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08a      	sub	sp, #40	; 0x28
 8001004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
 8001014:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <MX_GPIO_Init+0xf8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a36      	ldr	r2, [pc, #216]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a2f      	ldr	r2, [pc, #188]	; (80010f8 <MX_GPIO_Init+0xf8>)
 800103c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b2d      	ldr	r3, [pc, #180]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a28      	ldr	r2, [pc, #160]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a21      	ldr	r2, [pc, #132]	; (80010f8 <MX_GPIO_Init+0xf8>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <MX_GPIO_Init+0xf8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	2120      	movs	r1, #32
 800108a:	481c      	ldr	r0, [pc, #112]	; (80010fc <MX_GPIO_Init+0xfc>)
 800108c:	f001 f91c 	bl	80022c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001096:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4816      	ldr	r0, [pc, #88]	; (8001100 <MX_GPIO_Init+0x100>)
 80010a8:	f000 ff7a 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010ac:	2320      	movs	r3, #32
 80010ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	480e      	ldr	r0, [pc, #56]	; (80010fc <MX_GPIO_Init+0xfc>)
 80010c4:	f000 ff6c 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010c8:	2340      	movs	r3, #64	; 0x40
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	4619      	mov	r1, r3
 80010da:	4809      	ldr	r0, [pc, #36]	; (8001100 <MX_GPIO_Init+0x100>)
 80010dc:	f000 ff60 	bl	8001fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2105      	movs	r1, #5
 80010e4:	2028      	movs	r0, #40	; 0x28
 80010e6:	f000 ff31 	bl	8001f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ea:	2028      	movs	r0, #40	; 0x28
 80010ec:	f000 ff4a 	bl	8001f84 <HAL_NVIC_EnableIRQ>

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	; 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000
 8001100:	40020800 	.word	0x40020800

08001104 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
	//if callback was called by gpio pin corresponding to button varaible state will change
  if(GPIO_Pin == B1_Pin) {
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001114:	d102      	bne.n	800111c <HAL_GPIO_EXTI_Callback+0x18>
	  button_pressed = 1;
 8001116:	4b04      	ldr	r3, [pc, #16]	; (8001128 <HAL_GPIO_EXTI_Callback+0x24>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]

  }
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	200007f8 	.word	0x200007f8

0800112c <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osTimerStart(periodicTimerHandle, 1000);
 8001134:	4b07      	ldr	r3, [pc, #28]	; (8001154 <StartBlink01+0x28>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800113c:	4618      	mov	r0, r3
 800113e:	f002 fd5f 	bl	8003c00 <osTimerStart>
  {

	  // calculate period in loop to adjust when varaible blink_freq is changed.
	  //period = 1000/(blink_freq*2);
	  //toggle LED
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001142:	2120      	movs	r1, #32
 8001144:	4804      	ldr	r0, [pc, #16]	; (8001158 <StartBlink01+0x2c>)
 8001146:	f001 f8d8 	bl	80022fa <HAL_GPIO_TogglePin>
	  // delay for rtos - when to call function next time. It does not block running of uC.
	  osDelay(1000);
 800114a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800114e:	f002 fd0e 	bl	8003b6e <osDelay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001152:	e7f6      	b.n	8001142 <StartBlink01+0x16>
 8001154:	2000088c 	.word	0x2000088c
 8001158:	40020000 	.word	0x40020000
 800115c:	00000000 	.word	0x00000000

08001160 <PTCallback>:
  /* USER CODE END 5 */
}

/* PTCallback function */
void PTCallback(void const * argument)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PTCallback */
	 HAL_ADC_Start(&hadc1);
 8001168:	482f      	ldr	r0, [pc, #188]	; (8001228 <PTCallback+0xc8>)
 800116a:	f000 fa6b 	bl	8001644 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1);
 800116e:	2101      	movs	r1, #1
 8001170:	482d      	ldr	r0, [pc, #180]	; (8001228 <PTCallback+0xc8>)
 8001172:	f000 fb6c 	bl	800184e <HAL_ADC_PollForConversion>
	  uint16_t raw = HAL_ADC_GetValue(&hadc1);
 8001176:	482c      	ldr	r0, [pc, #176]	; (8001228 <PTCallback+0xc8>)
 8001178:	f000 fbf4 	bl	8001964 <HAL_ADC_GetValue>
 800117c:	4603      	mov	r3, r0
 800117e:	82fb      	strh	r3, [r7, #22]
	  HAL_ADC_Stop(&hadc1);
 8001180:	4829      	ldr	r0, [pc, #164]	; (8001228 <PTCallback+0xc8>)
 8001182:	f000 fb31 	bl	80017e8 <HAL_ADC_Stop>
float vsense = (3.3 * raw )/4095;
 8001186:	8afb      	ldrh	r3, [r7, #22]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f993 	bl	80004b4 <__aeabi_i2d>
 800118e:	a31e      	add	r3, pc, #120	; (adr r3, 8001208 <PTCallback+0xa8>)
 8001190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001194:	f7ff f9f8 	bl	8000588 <__aeabi_dmul>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	a31b      	add	r3, pc, #108	; (adr r3, 8001210 <PTCallback+0xb0>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff fb19 	bl	80007dc <__aeabi_ddiv>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4610      	mov	r0, r2
 80011b0:	4619      	mov	r1, r3
 80011b2:	f7ff fbfb 	bl	80009ac <__aeabi_d2f>
 80011b6:	4603      	mov	r3, r0
 80011b8:	613b      	str	r3, [r7, #16]
	  float temperature = ((vsense) - 0.76)/(0.0025) + 25;
 80011ba:	6938      	ldr	r0, [r7, #16]
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_f2d>
 80011c0:	a315      	add	r3, pc, #84	; (adr r3, 8001218 <PTCallback+0xb8>)
 80011c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c6:	f7ff f827 	bl	8000218 <__aeabi_dsub>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	a313      	add	r3, pc, #76	; (adr r3, 8001220 <PTCallback+0xc0>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fb00 	bl	80007dc <__aeabi_ddiv>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4610      	mov	r0, r2
 80011e2:	4619      	mov	r1, r3
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b10      	ldr	r3, [pc, #64]	; (800122c <PTCallback+0xcc>)
 80011ea:	f7ff f817 	bl	800021c <__adddf3>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	f7ff fbd9 	bl	80009ac <__aeabi_d2f>
 80011fa:	4603      	mov	r3, r0
 80011fc:	60fb      	str	r3, [r7, #12]

  /* USER CODE END PTCallback */
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	66666666 	.word	0x66666666
 800120c:	400a6666 	.word	0x400a6666
 8001210:	00000000 	.word	0x00000000
 8001214:	40affe00 	.word	0x40affe00
 8001218:	851eb852 	.word	0x851eb852
 800121c:	3fe851eb 	.word	0x3fe851eb
 8001220:	47ae147b 	.word	0x47ae147b
 8001224:	3f647ae1 	.word	0x3f647ae1
 8001228:	200007fc 	.word	0x200007fc
 800122c:	40390000 	.word	0x40390000

08001230 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001242:	f000 f99b 	bl	800157c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010000 	.word	0x40010000

08001254 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001258:	b672      	cpsid	i
}
 800125a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125c:	e7fe      	b.n	800125c <Error_Handler+0x8>
	...

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_MspInit+0x54>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a11      	ldr	r2, [pc, #68]	; (80012b4 <HAL_MspInit+0x54>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <HAL_MspInit+0x54>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_MspInit+0x54>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_MspInit+0x54>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <HAL_MspInit+0x54>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	210f      	movs	r1, #15
 80012a2:	f06f 0001 	mvn.w	r0, #1
 80012a6:	f000 fe51 	bl	8001f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800

080012b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b085      	sub	sp, #20
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_ADC_MspInit+0x3c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10d      	bne.n	80012e6 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_ADC_MspInit+0x40>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	4a09      	ldr	r2, [pc, #36]	; (80012f8 <HAL_ADC_MspInit+0x40>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d8:	6453      	str	r3, [r2, #68]	; 0x44
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <HAL_ADC_MspInit+0x40>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012e6:	bf00      	nop
 80012e8:	3714      	adds	r7, #20
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40012000 	.word	0x40012000
 80012f8:	40023800 	.word	0x40023800

080012fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_UART_MspInit+0x84>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d12b      	bne.n	8001376 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a17      	ldr	r2, [pc, #92]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	613b      	str	r3, [r7, #16]
 8001338:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b11      	ldr	r3, [pc, #68]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a10      	ldr	r2, [pc, #64]	; (8001384 <HAL_UART_MspInit+0x88>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <HAL_UART_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001356:	230c      	movs	r3, #12
 8001358:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135a:	2302      	movs	r3, #2
 800135c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001362:	2303      	movs	r3, #3
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001366:	2307      	movs	r3, #7
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	4619      	mov	r1, r3
 8001370:	4805      	ldr	r0, [pc, #20]	; (8001388 <HAL_UART_MspInit+0x8c>)
 8001372:	f000 fe15 	bl	8001fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40004400 	.word	0x40004400
 8001384:	40023800 	.word	0x40023800
 8001388:	40020000 	.word	0x40020000

0800138c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800139c:	2300      	movs	r3, #0
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	4b2e      	ldr	r3, [pc, #184]	; (800145c <HAL_InitTick+0xd0>)
 80013a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a4:	4a2d      	ldr	r2, [pc, #180]	; (800145c <HAL_InitTick+0xd0>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6453      	str	r3, [r2, #68]	; 0x44
 80013ac:	4b2b      	ldr	r3, [pc, #172]	; (800145c <HAL_InitTick+0xd0>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013b8:	f107 020c 	add.w	r2, r7, #12
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4611      	mov	r1, r2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 f8e6 	bl	8002594 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80013c8:	f001 f8d0 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 80013cc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d0:	4a23      	ldr	r2, [pc, #140]	; (8001460 <HAL_InitTick+0xd4>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9b      	lsrs	r3, r3, #18
 80013d8:	3b01      	subs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_InitTick+0xd8>)
 80013de:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_InitTick+0xdc>)
 80013e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_InitTick+0xd8>)
 80013e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <HAL_InitTick+0xd8>)
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_InitTick+0xd8>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_InitTick+0xd8>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_InitTick+0xd8>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001402:	4818      	ldr	r0, [pc, #96]	; (8001464 <HAL_InitTick+0xd8>)
 8001404:	f001 fdc6 	bl	8002f94 <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800140e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001412:	2b00      	cmp	r3, #0
 8001414:	d11b      	bne.n	800144e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001416:	4813      	ldr	r0, [pc, #76]	; (8001464 <HAL_InitTick+0xd8>)
 8001418:	f001 fe16 	bl	8003048 <HAL_TIM_Base_Start_IT>
 800141c:	4603      	mov	r3, r0
 800141e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001422:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001426:	2b00      	cmp	r3, #0
 8001428:	d111      	bne.n	800144e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800142a:	2019      	movs	r0, #25
 800142c:	f000 fdaa 	bl	8001f84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b0f      	cmp	r3, #15
 8001434:	d808      	bhi.n	8001448 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001436:	2200      	movs	r2, #0
 8001438:	6879      	ldr	r1, [r7, #4]
 800143a:	2019      	movs	r0, #25
 800143c:	f000 fd86 	bl	8001f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_InitTick+0xe0>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6013      	str	r3, [r2, #0]
 8001446:	e002      	b.n	800144e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800144e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001452:	4618      	mov	r0, r3
 8001454:	3730      	adds	r7, #48	; 0x30
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	431bde83 	.word	0x431bde83
 8001464:	20000890 	.word	0x20000890
 8001468:	40010000 	.word	0x40010000
 800146c:	20000004 	.word	0x20000004

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014a2:	f001 fe41 	bl	8003128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000890 	.word	0x20000890

080014b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */



  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80014b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014b8:	f000 ff3a 	bl	8002330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}

080014c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <SystemInit+0x20>)
 80014c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <SystemInit+0x20>)
 80014cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00

080014e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800151c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80014ea:	490e      	ldr	r1, [pc, #56]	; (8001524 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80014ec:	4a0e      	ldr	r2, [pc, #56]	; (8001528 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f0:	e002      	b.n	80014f8 <LoopCopyDataInit>

080014f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014f6:	3304      	adds	r3, #4

080014f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014fc:	d3f9      	bcc.n	80014f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014fe:	4a0b      	ldr	r2, [pc, #44]	; (800152c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001500:	4c0b      	ldr	r4, [pc, #44]	; (8001530 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001504:	e001      	b.n	800150a <LoopFillZerobss>

08001506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001508:	3204      	adds	r2, #4

0800150a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800150c:	d3fb      	bcc.n	8001506 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800150e:	f7ff ffd7 	bl	80014c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001512:	f005 f893 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001516:	f7ff fc4f 	bl	8000db8 <main>
  bx  lr    
 800151a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001520:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001524:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001528:	08006918 	.word	0x08006918
  ldr r2, =_sbss
 800152c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001530:	20004774 	.word	0x20004774

08001534 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001534:	e7fe      	b.n	8001534 <ADC_IRQHandler>
	...

08001538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_Init+0x40>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <HAL_Init+0x40>)
 8001542:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001546:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001548:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <HAL_Init+0x40>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0a      	ldr	r2, [pc, #40]	; (8001578 <HAL_Init+0x40>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_Init+0x40>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a07      	ldr	r2, [pc, #28]	; (8001578 <HAL_Init+0x40>)
 800155a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800155e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001560:	2003      	movs	r0, #3
 8001562:	f000 fce8 	bl	8001f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001566:	200f      	movs	r0, #15
 8001568:	f7ff ff10 	bl	800138c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800156c:	f7ff fe78 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023c00 	.word	0x40023c00

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000008 	.word	0x20000008
 80015a0:	200008d8 	.word	0x200008d8

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200008d8 	.word	0x200008d8

080015bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e033      	b.n	800163a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d109      	bne.n	80015ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff fe6c 	bl	80012b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f003 0310 	and.w	r3, r3, #16
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001602:	f023 0302 	bic.w	r3, r3, #2
 8001606:	f043 0202 	orr.w	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fae8 	bl	8001be4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	f023 0303 	bic.w	r3, r3, #3
 8001622:	f043 0201 	orr.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
 800162a:	e001      	b.n	8001630 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001638:	7bfb      	ldrb	r3, [r7, #15]
}
 800163a:	4618      	mov	r0, r3
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001656:	2b01      	cmp	r3, #1
 8001658:	d101      	bne.n	800165e <HAL_ADC_Start+0x1a>
 800165a:	2302      	movs	r3, #2
 800165c:	e0b2      	b.n	80017c4 <HAL_ADC_Start+0x180>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d018      	beq.n	80016a6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0201 	orr.w	r2, r2, #1
 8001682:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001684:	4b52      	ldr	r3, [pc, #328]	; (80017d0 <HAL_ADC_Start+0x18c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a52      	ldr	r2, [pc, #328]	; (80017d4 <HAL_ADC_Start+0x190>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	0c9a      	lsrs	r2, r3, #18
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001698:	e002      	b.n	80016a0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	3b01      	subs	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f9      	bne.n	800169a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d17a      	bne.n	80017aa <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d007      	beq.n	80016e6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f2:	d106      	bne.n	8001702 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f8:	f023 0206 	bic.w	r2, r3, #6
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	645a      	str	r2, [r3, #68]	; 0x44
 8001700:	e002      	b.n	8001708 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001710:	4b31      	ldr	r3, [pc, #196]	; (80017d8 <HAL_ADC_Start+0x194>)
 8001712:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f003 031f 	and.w	r3, r3, #31
 8001726:	2b00      	cmp	r3, #0
 8001728:	d12a      	bne.n	8001780 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4a2b      	ldr	r2, [pc, #172]	; (80017dc <HAL_ADC_Start+0x198>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d015      	beq.n	8001760 <HAL_ADC_Start+0x11c>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a29      	ldr	r2, [pc, #164]	; (80017e0 <HAL_ADC_Start+0x19c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d105      	bne.n	800174a <HAL_ADC_Start+0x106>
 800173e:	4b26      	ldr	r3, [pc, #152]	; (80017d8 <HAL_ADC_Start+0x194>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a25      	ldr	r2, [pc, #148]	; (80017e4 <HAL_ADC_Start+0x1a0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d136      	bne.n	80017c2 <HAL_ADC_Start+0x17e>
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <HAL_ADC_Start+0x194>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d130      	bne.n	80017c2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d129      	bne.n	80017c2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	e020      	b.n	80017c2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a15      	ldr	r2, [pc, #84]	; (80017dc <HAL_ADC_Start+0x198>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d11b      	bne.n	80017c2 <HAL_ADC_Start+0x17e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d114      	bne.n	80017c2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	e00b      	b.n	80017c2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f043 0210 	orr.w	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	f043 0201 	orr.w	r2, r3, #1
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20000000 	.word	0x20000000
 80017d4:	431bde83 	.word	0x431bde83
 80017d8:	40012300 	.word	0x40012300
 80017dc:	40012000 	.word	0x40012000
 80017e0:	40012100 	.word	0x40012100
 80017e4:	40012200 	.word	0x40012200

080017e8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b083      	sub	sp, #12
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d101      	bne.n	80017fe <HAL_ADC_Stop+0x16>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e021      	b.n	8001842 <HAL_ADC_Stop+0x5a>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f022 0201 	bic.w	r2, r2, #1
 8001814:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d109      	bne.n	8001838 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800184e:	b580      	push	{r7, lr}
 8001850:	b084      	sub	sp, #16
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186a:	d113      	bne.n	8001894 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001876:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800187a:	d10b      	bne.n	8001894 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e063      	b.n	800195c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001894:	f7ff fe86 	bl	80015a4 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800189a:	e021      	b.n	80018e0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a2:	d01d      	beq.n	80018e0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d007      	beq.n	80018ba <HAL_ADC_PollForConversion+0x6c>
 80018aa:	f7ff fe7b 	bl	80015a4 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	683a      	ldr	r2, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d212      	bcs.n	80018e0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d00b      	beq.n	80018e0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018cc:	f043 0204 	orr.w	r2, r3, #4
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e03d      	b.n	800195c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d1d6      	bne.n	800189c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f06f 0212 	mvn.w	r2, #18
 80018f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d123      	bne.n	800195a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001916:	2b00      	cmp	r3, #0
 8001918:	d11f      	bne.n	800195a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001932:	2b00      	cmp	r3, #0
 8001934:	d111      	bne.n	800195a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d105      	bne.n	800195a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f043 0201 	orr.w	r2, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}

08001964 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
	...

08001980 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001994:	2b01      	cmp	r3, #1
 8001996:	d101      	bne.n	800199c <HAL_ADC_ConfigChannel+0x1c>
 8001998:	2302      	movs	r3, #2
 800199a:	e113      	b.n	8001bc4 <HAL_ADC_ConfigChannel+0x244>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2201      	movs	r2, #1
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b09      	cmp	r3, #9
 80019aa:	d925      	bls.n	80019f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68d9      	ldr	r1, [r3, #12]
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	461a      	mov	r2, r3
 80019ba:	4613      	mov	r3, r2
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4413      	add	r3, r2
 80019c0:	3b1e      	subs	r3, #30
 80019c2:	2207      	movs	r2, #7
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43da      	mvns	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	400a      	ands	r2, r1
 80019d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68d9      	ldr	r1, [r3, #12]
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	4618      	mov	r0, r3
 80019e4:	4603      	mov	r3, r0
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4403      	add	r3, r0
 80019ea:	3b1e      	subs	r3, #30
 80019ec:	409a      	lsls	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	e022      	b.n	8001a3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	6919      	ldr	r1, [r3, #16]
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	461a      	mov	r2, r3
 8001a06:	4613      	mov	r3, r2
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	4413      	add	r3, r2
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	400a      	ands	r2, r1
 8001a1a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6919      	ldr	r1, [r3, #16]
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	4603      	mov	r3, r0
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	4403      	add	r3, r0
 8001a34:	409a      	lsls	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d824      	bhi.n	8001a90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	3b05      	subs	r3, #5
 8001a58:	221f      	movs	r2, #31
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43da      	mvns	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	400a      	ands	r2, r1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	4618      	mov	r0, r3
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	3b05      	subs	r3, #5
 8001a82:	fa00 f203 	lsl.w	r2, r0, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a8e:	e04c      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	2b0c      	cmp	r3, #12
 8001a96:	d824      	bhi.n	8001ae2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685a      	ldr	r2, [r3, #4]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	3b23      	subs	r3, #35	; 0x23
 8001aaa:	221f      	movs	r2, #31
 8001aac:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab0:	43da      	mvns	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	4613      	mov	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3b23      	subs	r3, #35	; 0x23
 8001ad4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae0:	e023      	b.n	8001b2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4413      	add	r3, r2
 8001af2:	3b41      	subs	r3, #65	; 0x41
 8001af4:	221f      	movs	r2, #31
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43da      	mvns	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	400a      	ands	r2, r1
 8001b02:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	4618      	mov	r0, r3
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3b41      	subs	r3, #65	; 0x41
 8001b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b2a:	4b29      	ldr	r3, [pc, #164]	; (8001bd0 <HAL_ADC_ConfigChannel+0x250>)
 8001b2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a28      	ldr	r2, [pc, #160]	; (8001bd4 <HAL_ADC_ConfigChannel+0x254>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d10f      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1d8>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b12      	cmp	r3, #18
 8001b3e:	d10b      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_ADC_ConfigChannel+0x254>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d12b      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x23a>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a1c      	ldr	r2, [pc, #112]	; (8001bd8 <HAL_ADC_ConfigChannel+0x258>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d003      	beq.n	8001b74 <HAL_ADC_ConfigChannel+0x1f4>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b11      	cmp	r3, #17
 8001b72:	d122      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_ADC_ConfigChannel+0x258>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d111      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <HAL_ADC_ConfigChannel+0x25c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a11      	ldr	r2, [pc, #68]	; (8001be0 <HAL_ADC_ConfigChannel+0x260>)
 8001b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba0:	0c9a      	lsrs	r2, r3, #18
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40012300 	.word	0x40012300
 8001bd4:	40012000 	.word	0x40012000
 8001bd8:	10000012 	.word	0x10000012
 8001bdc:	20000000 	.word	0x20000000
 8001be0:	431bde83 	.word	0x431bde83

08001be4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bec:	4b79      	ldr	r3, [pc, #484]	; (8001dd4 <ADC_Init+0x1f0>)
 8001bee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	685a      	ldr	r2, [r3, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	431a      	orrs	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	6859      	ldr	r1, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	021a      	lsls	r2, r3, #8
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	6859      	ldr	r1, [r3, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689a      	ldr	r2, [r3, #8]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6899      	ldr	r1, [r3, #8]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c76:	4a58      	ldr	r2, [pc, #352]	; (8001dd8 <ADC_Init+0x1f4>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d022      	beq.n	8001cc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001cac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6899      	ldr	r1, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	e00f      	b.n	8001ce2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ce0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0202 	bic.w	r2, r2, #2
 8001cf0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6899      	ldr	r1, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7e1b      	ldrb	r3, [r3, #24]
 8001cfc:	005a      	lsls	r2, r3, #1
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d01b      	beq.n	8001d48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6859      	ldr	r1, [r3, #4]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	035a      	lsls	r2, r3, #13
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	e007      	b.n	8001d58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	051a      	lsls	r2, r3, #20
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	6899      	ldr	r1, [r3, #8]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d9a:	025a      	lsls	r2, r3, #9
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001db2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6899      	ldr	r1, [r3, #8]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	029a      	lsls	r2, r3, #10
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	609a      	str	r2, [r3, #8]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	0f000001 	.word	0x0f000001

08001ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dec:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001df2:	68ba      	ldr	r2, [r7, #8]
 8001df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <__NVIC_SetPriorityGrouping+0x44>)
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	60d3      	str	r3, [r2, #12]
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e28:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <__NVIC_GetPriorityGrouping+0x18>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	0a1b      	lsrs	r3, r3, #8
 8001e2e:	f003 0307 	and.w	r3, r3, #7
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000ed00 	.word	0xe000ed00

08001e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	db0b      	blt.n	8001e6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	f003 021f 	and.w	r2, r3, #31
 8001e58:	4907      	ldr	r1, [pc, #28]	; (8001e78 <__NVIC_EnableIRQ+0x38>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	2001      	movs	r0, #1
 8001e62:	fa00 f202 	lsl.w	r2, r0, r2
 8001e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100

08001e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	4603      	mov	r3, r0
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	db0a      	blt.n	8001ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	490c      	ldr	r1, [pc, #48]	; (8001ec8 <__NVIC_SetPriority+0x4c>)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	0112      	lsls	r2, r2, #4
 8001e9c:	b2d2      	uxtb	r2, r2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ea4:	e00a      	b.n	8001ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	b2da      	uxtb	r2, r3
 8001eaa:	4908      	ldr	r1, [pc, #32]	; (8001ecc <__NVIC_SetPriority+0x50>)
 8001eac:	79fb      	ldrb	r3, [r7, #7]
 8001eae:	f003 030f 	and.w	r3, r3, #15
 8001eb2:	3b04      	subs	r3, #4
 8001eb4:	0112      	lsls	r2, r2, #4
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	440b      	add	r3, r1
 8001eba:	761a      	strb	r2, [r3, #24]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr
 8001ec8:	e000e100 	.word	0xe000e100
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b089      	sub	sp, #36	; 0x24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f1c3 0307 	rsb	r3, r3, #7
 8001eea:	2b04      	cmp	r3, #4
 8001eec:	bf28      	it	cs
 8001eee:	2304      	movcs	r3, #4
 8001ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3304      	adds	r3, #4
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d902      	bls.n	8001f00 <NVIC_EncodePriority+0x30>
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	3b03      	subs	r3, #3
 8001efe:	e000      	b.n	8001f02 <NVIC_EncodePriority+0x32>
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43da      	mvns	r2, r3
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	401a      	ands	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f18:	f04f 31ff 	mov.w	r1, #4294967295
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	4313      	orrs	r3, r2
         );
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3724      	adds	r7, #36	; 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b082      	sub	sp, #8
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff ff4c 	bl	8001ddc <__NVIC_SetPriorityGrouping>
}
 8001f44:	bf00      	nop
 8001f46:	3708      	adds	r7, #8
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f5e:	f7ff ff61 	bl	8001e24 <__NVIC_GetPriorityGrouping>
 8001f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	6978      	ldr	r0, [r7, #20]
 8001f6a:	f7ff ffb1 	bl	8001ed0 <NVIC_EncodePriority>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f74:	4611      	mov	r1, r2
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff80 	bl	8001e7c <__NVIC_SetPriority>
}
 8001f7c:	bf00      	nop
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff54 	bl	8001e40 <__NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	; 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e165      	b.n	8002288 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 8154 	bne.w	8002282 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b03      	cmp	r3, #3
 800205e:	d017      	beq.n	8002090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80ae 	beq.w	8002282 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b5d      	ldr	r3, [pc, #372]	; (80022a0 <HAL_GPIO_Init+0x300>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	4a5c      	ldr	r2, [pc, #368]	; (80022a0 <HAL_GPIO_Init+0x300>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002134:	6453      	str	r3, [r2, #68]	; 0x44
 8002136:	4b5a      	ldr	r3, [pc, #360]	; (80022a0 <HAL_GPIO_Init+0x300>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a58      	ldr	r2, [pc, #352]	; (80022a4 <HAL_GPIO_Init+0x304>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a4f      	ldr	r2, [pc, #316]	; (80022a8 <HAL_GPIO_Init+0x308>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x21a>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a4e      	ldr	r2, [pc, #312]	; (80022ac <HAL_GPIO_Init+0x30c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x216>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4d      	ldr	r2, [pc, #308]	; (80022b0 <HAL_GPIO_Init+0x310>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x212>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a4c      	ldr	r2, [pc, #304]	; (80022b4 <HAL_GPIO_Init+0x314>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x20e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a4b      	ldr	r2, [pc, #300]	; (80022b8 <HAL_GPIO_Init+0x318>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x20a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a4a      	ldr	r2, [pc, #296]	; (80022bc <HAL_GPIO_Init+0x31c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x206>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a49      	ldr	r2, [pc, #292]	; (80022c0 <HAL_GPIO_Init+0x320>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x202>
 800219e:	2306      	movs	r3, #6
 80021a0:	e00c      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021a2:	2307      	movs	r3, #7
 80021a4:	e00a      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021a6:	2305      	movs	r3, #5
 80021a8:	e008      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021aa:	2304      	movs	r3, #4
 80021ac:	e006      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021ae:	2303      	movs	r3, #3
 80021b0:	e004      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021b2:	2302      	movs	r3, #2
 80021b4:	e002      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_GPIO_Init+0x21c>
 80021ba:	2300      	movs	r3, #0
 80021bc:	69fa      	ldr	r2, [r7, #28]
 80021be:	f002 0203 	and.w	r2, r2, #3
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	4093      	lsls	r3, r2
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021cc:	4935      	ldr	r1, [pc, #212]	; (80022a4 <HAL_GPIO_Init+0x304>)
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	089b      	lsrs	r3, r3, #2
 80021d2:	3302      	adds	r3, #2
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021da:	4b3a      	ldr	r3, [pc, #232]	; (80022c4 <HAL_GPIO_Init+0x324>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021fe:	4a31      	ldr	r2, [pc, #196]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800222e:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002252:	4a1c      	ldr	r2, [pc, #112]	; (80022c4 <HAL_GPIO_Init+0x324>)
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002258:	4b1a      	ldr	r3, [pc, #104]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800227c:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_GPIO_Init+0x324>)
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3301      	adds	r3, #1
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	2b0f      	cmp	r3, #15
 800228c:	f67f ae96 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3724      	adds	r7, #36	; 0x24
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40013800 	.word	0x40013800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40021400 	.word	0x40021400
 80022c0:	40021800 	.word	0x40021800
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
 80022d0:	460b      	mov	r3, r1
 80022d2:	807b      	strh	r3, [r7, #2]
 80022d4:	4613      	mov	r3, r2
 80022d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d8:	787b      	ldrb	r3, [r7, #1]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d003      	beq.n	80022e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022de:	887a      	ldrh	r2, [r7, #2]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e4:	e003      	b.n	80022ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022e6:	887b      	ldrh	r3, [r7, #2]
 80022e8:	041a      	lsls	r2, r3, #16
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	619a      	str	r2, [r3, #24]
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
 8002302:	460b      	mov	r3, r1
 8002304:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	695b      	ldr	r3, [r3, #20]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800230c:	887a      	ldrh	r2, [r7, #2]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	041a      	lsls	r2, r3, #16
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	43d9      	mvns	r1, r3
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	400b      	ands	r3, r1
 800231c:	431a      	orrs	r2, r3
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	619a      	str	r2, [r3, #24]
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
	...

08002330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800233a:	4b08      	ldr	r3, [pc, #32]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d006      	beq.n	8002354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002348:	88fb      	ldrh	r3, [r7, #6]
 800234a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800234c:	88fb      	ldrh	r3, [r7, #6]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fed8 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40013c00 	.word	0x40013c00

08002360 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e0cc      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002374:	4b68      	ldr	r3, [pc, #416]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	d90c      	bls.n	800239c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002382:	4b65      	ldr	r3, [pc, #404]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	429a      	cmp	r2, r3
 8002396:	d001      	beq.n	800239c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0b8      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0302 	and.w	r3, r3, #2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d020      	beq.n	80023ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b4:	4b59      	ldr	r3, [pc, #356]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a58      	ldr	r2, [pc, #352]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	4a52      	ldr	r2, [pc, #328]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d8:	4b50      	ldr	r3, [pc, #320]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	494d      	ldr	r1, [pc, #308]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d044      	beq.n	8002480 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d119      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e07f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d003      	beq.n	800241e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241a:	2b03      	cmp	r3, #3
 800241c:	d107      	bne.n	800242e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242e:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e067      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f023 0203 	bic.w	r2, r3, #3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	4934      	ldr	r1, [pc, #208]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002450:	f7ff f8a8 	bl	80015a4 <HAL_GetTick>
 8002454:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002456:	e00a      	b.n	800246e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002458:	f7ff f8a4 	bl	80015a4 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	f241 3288 	movw	r2, #5000	; 0x1388
 8002466:	4293      	cmp	r3, r2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e04f      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 020c 	and.w	r2, r3, #12
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	429a      	cmp	r2, r3
 800247e:	d1eb      	bne.n	8002458 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002480:	4b25      	ldr	r3, [pc, #148]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d20c      	bcs.n	80024a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002496:	4b20      	ldr	r3, [pc, #128]	; (8002518 <HAL_RCC_ClockConfig+0x1b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 030f 	and.w	r3, r3, #15
 800249e:	683a      	ldr	r2, [r7, #0]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d001      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e032      	b.n	800250e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d008      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b4:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4916      	ldr	r1, [pc, #88]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	490e      	ldr	r1, [pc, #56]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e6:	f000 f887 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 030f 	and.w	r3, r3, #15
 80024f6:	490a      	ldr	r1, [pc, #40]	; (8002520 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	5ccb      	ldrb	r3, [r1, r3]
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	4a09      	ldr	r2, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <HAL_RCC_ClockConfig+0x1c8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe ff40 	bl	800138c <HAL_InitTick>

  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3710      	adds	r7, #16
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023c00 	.word	0x40023c00
 800251c:	40023800 	.word	0x40023800
 8002520:	08006890 	.word	0x08006890
 8002524:	20000000 	.word	0x20000000
 8002528:	20000004 	.word	0x20000004

0800252c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002530:	4b03      	ldr	r3, [pc, #12]	; (8002540 <HAL_RCC_GetHCLKFreq+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000000 	.word	0x20000000

08002544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002548:	f7ff fff0 	bl	800252c <HAL_RCC_GetHCLKFreq>
 800254c:	4602      	mov	r2, r0
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	0a9b      	lsrs	r3, r3, #10
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	4903      	ldr	r1, [pc, #12]	; (8002568 <HAL_RCC_GetPCLK1Freq+0x24>)
 800255a:	5ccb      	ldrb	r3, [r1, r3]
 800255c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002560:	4618      	mov	r0, r3
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40023800 	.word	0x40023800
 8002568:	080068a0 	.word	0x080068a0

0800256c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002570:	f7ff ffdc 	bl	800252c <HAL_RCC_GetHCLKFreq>
 8002574:	4602      	mov	r2, r0
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	0b5b      	lsrs	r3, r3, #13
 800257c:	f003 0307 	and.w	r3, r3, #7
 8002580:	4903      	ldr	r1, [pc, #12]	; (8002590 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002582:	5ccb      	ldrb	r3, [r1, r3]
 8002584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002588:	4618      	mov	r0, r3
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40023800 	.word	0x40023800
 8002590:	080068a0 	.word	0x080068a0

08002594 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	220f      	movs	r2, #15
 80025a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80025a4:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80025b0:	4b0f      	ldr	r3, [pc, #60]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80025bc:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80025c8:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_GetClockConfig+0x5c>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80025d6:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <HAL_RCC_GetClockConfig+0x60>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 020f 	and.w	r2, r3, #15
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	601a      	str	r2, [r3, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b0ae      	sub	sp, #184	; 0xb8
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800261e:	4bcb      	ldr	r3, [pc, #812]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f003 030c 	and.w	r3, r3, #12
 8002626:	2b0c      	cmp	r3, #12
 8002628:	f200 8206 	bhi.w	8002a38 <HAL_RCC_GetSysClockFreq+0x440>
 800262c:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_RCC_GetSysClockFreq+0x3c>)
 800262e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002632:	bf00      	nop
 8002634:	08002669 	.word	0x08002669
 8002638:	08002a39 	.word	0x08002a39
 800263c:	08002a39 	.word	0x08002a39
 8002640:	08002a39 	.word	0x08002a39
 8002644:	08002671 	.word	0x08002671
 8002648:	08002a39 	.word	0x08002a39
 800264c:	08002a39 	.word	0x08002a39
 8002650:	08002a39 	.word	0x08002a39
 8002654:	08002679 	.word	0x08002679
 8002658:	08002a39 	.word	0x08002a39
 800265c:	08002a39 	.word	0x08002a39
 8002660:	08002a39 	.word	0x08002a39
 8002664:	08002869 	.word	0x08002869
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002668:	4bb9      	ldr	r3, [pc, #740]	; (8002950 <HAL_RCC_GetSysClockFreq+0x358>)
 800266a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800266e:	e1e7      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4bb8      	ldr	r3, [pc, #736]	; (8002954 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002672:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002676:	e1e3      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002678:	4bb4      	ldr	r3, [pc, #720]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002684:	4bb1      	ldr	r3, [pc, #708]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d071      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002690:	4bae      	ldr	r3, [pc, #696]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	099b      	lsrs	r3, r3, #6
 8002696:	2200      	movs	r2, #0
 8002698:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800269c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80026a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80026b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80026b6:	4622      	mov	r2, r4
 80026b8:	462b      	mov	r3, r5
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	0159      	lsls	r1, r3, #5
 80026c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c8:	0150      	lsls	r0, r2, #5
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4621      	mov	r1, r4
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	6439      	str	r1, [r7, #64]	; 0x40
 80026d4:	4629      	mov	r1, r5
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80026e8:	4649      	mov	r1, r9
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	4641      	mov	r1, r8
 80026ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f2:	4641      	mov	r1, r8
 80026f4:	018a      	lsls	r2, r1, #6
 80026f6:	4641      	mov	r1, r8
 80026f8:	1a51      	subs	r1, r2, r1
 80026fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80026fc:	4649      	mov	r1, r9
 80026fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002710:	4649      	mov	r1, r9
 8002712:	00cb      	lsls	r3, r1, #3
 8002714:	4641      	mov	r1, r8
 8002716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800271a:	4641      	mov	r1, r8
 800271c:	00ca      	lsls	r2, r1, #3
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	4603      	mov	r3, r0
 8002724:	4622      	mov	r2, r4
 8002726:	189b      	adds	r3, r3, r2
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
 800272a:	462b      	mov	r3, r5
 800272c:	460a      	mov	r2, r1
 800272e:	eb42 0303 	adc.w	r3, r2, r3
 8002732:	637b      	str	r3, [r7, #52]	; 0x34
 8002734:	f04f 0200 	mov.w	r2, #0
 8002738:	f04f 0300 	mov.w	r3, #0
 800273c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002740:	4629      	mov	r1, r5
 8002742:	024b      	lsls	r3, r1, #9
 8002744:	4621      	mov	r1, r4
 8002746:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800274a:	4621      	mov	r1, r4
 800274c:	024a      	lsls	r2, r1, #9
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002756:	2200      	movs	r2, #0
 8002758:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800275c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002760:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002764:	f7fe f972 	bl	8000a4c <__aeabi_uldivmod>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4613      	mov	r3, r2
 800276e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002772:	e067      	b.n	8002844 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4b75      	ldr	r3, [pc, #468]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002780:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002784:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	67bb      	str	r3, [r7, #120]	; 0x78
 800278e:	2300      	movs	r3, #0
 8002790:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002792:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	f04f 0000 	mov.w	r0, #0
 800279e:	f04f 0100 	mov.w	r1, #0
 80027a2:	0159      	lsls	r1, r3, #5
 80027a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027a8:	0150      	lsls	r0, r2, #5
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4621      	mov	r1, r4
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80027b4:	4629      	mov	r1, r5
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80027c8:	4649      	mov	r1, r9
 80027ca:	018b      	lsls	r3, r1, #6
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d2:	4641      	mov	r1, r8
 80027d4:	018a      	lsls	r2, r1, #6
 80027d6:	4641      	mov	r1, r8
 80027d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80027dc:	4649      	mov	r1, r9
 80027de:	eb63 0b01 	sbc.w	fp, r3, r1
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80027ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80027f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027f6:	4692      	mov	sl, r2
 80027f8:	469b      	mov	fp, r3
 80027fa:	4623      	mov	r3, r4
 80027fc:	eb1a 0303 	adds.w	r3, sl, r3
 8002800:	623b      	str	r3, [r7, #32]
 8002802:	462b      	mov	r3, r5
 8002804:	eb4b 0303 	adc.w	r3, fp, r3
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	f04f 0300 	mov.w	r3, #0
 8002812:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002816:	4629      	mov	r1, r5
 8002818:	028b      	lsls	r3, r1, #10
 800281a:	4621      	mov	r1, r4
 800281c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002820:	4621      	mov	r1, r4
 8002822:	028a      	lsls	r2, r1, #10
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800282c:	2200      	movs	r2, #0
 800282e:	673b      	str	r3, [r7, #112]	; 0x70
 8002830:	677a      	str	r2, [r7, #116]	; 0x74
 8002832:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002836:	f7fe f909 	bl	8000a4c <__aeabi_uldivmod>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4613      	mov	r3, r2
 8002840:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002844:	4b41      	ldr	r3, [pc, #260]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	3301      	adds	r3, #1
 8002850:	005b      	lsls	r3, r3, #1
 8002852:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800285a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002866:	e0eb      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002868:	4b38      	ldr	r3, [pc, #224]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d06b      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002880:	4b32      	ldr	r3, [pc, #200]	; (800294c <HAL_RCC_GetSysClockFreq+0x354>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	099b      	lsrs	r3, r3, #6
 8002886:	2200      	movs	r2, #0
 8002888:	66bb      	str	r3, [r7, #104]	; 0x68
 800288a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800288c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002892:	663b      	str	r3, [r7, #96]	; 0x60
 8002894:	2300      	movs	r3, #0
 8002896:	667b      	str	r3, [r7, #100]	; 0x64
 8002898:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800289c:	4622      	mov	r2, r4
 800289e:	462b      	mov	r3, r5
 80028a0:	f04f 0000 	mov.w	r0, #0
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	0159      	lsls	r1, r3, #5
 80028aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028ae:	0150      	lsls	r0, r2, #5
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4621      	mov	r1, r4
 80028b6:	1a51      	subs	r1, r2, r1
 80028b8:	61b9      	str	r1, [r7, #24]
 80028ba:	4629      	mov	r1, r5
 80028bc:	eb63 0301 	sbc.w	r3, r3, r1
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80028ce:	4659      	mov	r1, fp
 80028d0:	018b      	lsls	r3, r1, #6
 80028d2:	4651      	mov	r1, sl
 80028d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028d8:	4651      	mov	r1, sl
 80028da:	018a      	lsls	r2, r1, #6
 80028dc:	4651      	mov	r1, sl
 80028de:	ebb2 0801 	subs.w	r8, r2, r1
 80028e2:	4659      	mov	r1, fp
 80028e4:	eb63 0901 	sbc.w	r9, r3, r1
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	f04f 0300 	mov.w	r3, #0
 80028f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fc:	4690      	mov	r8, r2
 80028fe:	4699      	mov	r9, r3
 8002900:	4623      	mov	r3, r4
 8002902:	eb18 0303 	adds.w	r3, r8, r3
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	462b      	mov	r3, r5
 800290a:	eb49 0303 	adc.w	r3, r9, r3
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800291c:	4629      	mov	r1, r5
 800291e:	024b      	lsls	r3, r1, #9
 8002920:	4621      	mov	r1, r4
 8002922:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002926:	4621      	mov	r1, r4
 8002928:	024a      	lsls	r2, r1, #9
 800292a:	4610      	mov	r0, r2
 800292c:	4619      	mov	r1, r3
 800292e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002932:	2200      	movs	r2, #0
 8002934:	65bb      	str	r3, [r7, #88]	; 0x58
 8002936:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002938:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800293c:	f7fe f886 	bl	8000a4c <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800294a:	e065      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0x420>
 800294c:	40023800 	.word	0x40023800
 8002950:	00f42400 	.word	0x00f42400
 8002954:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002958:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x458>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	099b      	lsrs	r3, r3, #6
 800295e:	2200      	movs	r2, #0
 8002960:	4618      	mov	r0, r3
 8002962:	4611      	mov	r1, r2
 8002964:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002968:	653b      	str	r3, [r7, #80]	; 0x50
 800296a:	2300      	movs	r3, #0
 800296c:	657b      	str	r3, [r7, #84]	; 0x54
 800296e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002972:	4642      	mov	r2, r8
 8002974:	464b      	mov	r3, r9
 8002976:	f04f 0000 	mov.w	r0, #0
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	0159      	lsls	r1, r3, #5
 8002980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002984:	0150      	lsls	r0, r2, #5
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4641      	mov	r1, r8
 800298c:	1a51      	subs	r1, r2, r1
 800298e:	60b9      	str	r1, [r7, #8]
 8002990:	4649      	mov	r1, r9
 8002992:	eb63 0301 	sbc.w	r3, r3, r1
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	f04f 0200 	mov.w	r2, #0
 800299c:	f04f 0300 	mov.w	r3, #0
 80029a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80029a4:	4659      	mov	r1, fp
 80029a6:	018b      	lsls	r3, r1, #6
 80029a8:	4651      	mov	r1, sl
 80029aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ae:	4651      	mov	r1, sl
 80029b0:	018a      	lsls	r2, r1, #6
 80029b2:	4651      	mov	r1, sl
 80029b4:	1a54      	subs	r4, r2, r1
 80029b6:	4659      	mov	r1, fp
 80029b8:	eb63 0501 	sbc.w	r5, r3, r1
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	f04f 0300 	mov.w	r3, #0
 80029c4:	00eb      	lsls	r3, r5, #3
 80029c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ca:	00e2      	lsls	r2, r4, #3
 80029cc:	4614      	mov	r4, r2
 80029ce:	461d      	mov	r5, r3
 80029d0:	4643      	mov	r3, r8
 80029d2:	18e3      	adds	r3, r4, r3
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	464b      	mov	r3, r9
 80029d8:	eb45 0303 	adc.w	r3, r5, r3
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	f04f 0300 	mov.w	r3, #0
 80029e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ea:	4629      	mov	r1, r5
 80029ec:	028b      	lsls	r3, r1, #10
 80029ee:	4621      	mov	r1, r4
 80029f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029f4:	4621      	mov	r1, r4
 80029f6:	028a      	lsls	r2, r1, #10
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a00:	2200      	movs	r2, #0
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a04:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002a06:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002a0a:	f7fe f81f 	bl	8000a4c <__aeabi_uldivmod>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4613      	mov	r3, r2
 8002a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002a18:	4b0d      	ldr	r3, [pc, #52]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	0f1b      	lsrs	r3, r3, #28
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002a26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a36:	e003      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002a3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a40:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	37b8      	adds	r7, #184	; 0xb8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	00f42400 	.word	0x00f42400

08002a58 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e28d      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 8083 	beq.w	8002b7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a78:	4b94      	ldr	r3, [pc, #592]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b04      	cmp	r3, #4
 8002a82:	d019      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a84:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d106      	bne.n	8002a9e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002a90:	4b8e      	ldr	r3, [pc, #568]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a9c:	d00c      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	d112      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aaa:	4b88      	ldr	r3, [pc, #544]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ab6:	d10b      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	4b84      	ldr	r3, [pc, #528]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d05b      	beq.n	8002b7c <HAL_RCC_OscConfig+0x124>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d157      	bne.n	8002b7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e25a      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad8:	d106      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x90>
 8002ada:	4b7c      	ldr	r3, [pc, #496]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a7b      	ldr	r2, [pc, #492]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ae0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae4:	6013      	str	r3, [r2, #0]
 8002ae6:	e01d      	b.n	8002b24 <HAL_RCC_OscConfig+0xcc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002af0:	d10c      	bne.n	8002b0c <HAL_RCC_OscConfig+0xb4>
 8002af2:	4b76      	ldr	r3, [pc, #472]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a75      	ldr	r2, [pc, #468]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b73      	ldr	r3, [pc, #460]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a72      	ldr	r2, [pc, #456]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	e00b      	b.n	8002b24 <HAL_RCC_OscConfig+0xcc>
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b16:	6013      	str	r3, [r2, #0]
 8002b18:	4b6c      	ldr	r3, [pc, #432]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a6b      	ldr	r2, [pc, #428]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2c:	f7fe fd3a 	bl	80015a4 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b34:	f7fe fd36 	bl	80015a4 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b64      	cmp	r3, #100	; 0x64
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e21f      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b61      	ldr	r3, [pc, #388]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0xdc>
 8002b52:	e014      	b.n	8002b7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b54:	f7fe fd26 	bl	80015a4 <HAL_GetTick>
 8002b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5a:	e008      	b.n	8002b6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b5c:	f7fe fd22 	bl	80015a4 <HAL_GetTick>
 8002b60:	4602      	mov	r2, r0
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	2b64      	cmp	r3, #100	; 0x64
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e20b      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b6e:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f0      	bne.n	8002b5c <HAL_RCC_OscConfig+0x104>
 8002b7a:	e000      	b.n	8002b7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06f      	beq.n	8002c6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b8a:	4b50      	ldr	r3, [pc, #320]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d017      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002b96:	4b4d      	ldr	r3, [pc, #308]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d105      	bne.n	8002bae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ba2:	4b4a      	ldr	r3, [pc, #296]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00b      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bba:	4b44      	ldr	r3, [pc, #272]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d116      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bc6:	4b41      	ldr	r3, [pc, #260]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d005      	beq.n	8002bde <HAL_RCC_OscConfig+0x186>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d001      	beq.n	8002bde <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e1d3      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bf2:	e03a      	b.n	8002c6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfc:	4b34      	ldr	r3, [pc, #208]	; (8002cd0 <HAL_RCC_OscConfig+0x278>)
 8002bfe:	2201      	movs	r2, #1
 8002c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c02:	f7fe fccf 	bl	80015a4 <HAL_GetTick>
 8002c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	e008      	b.n	8002c1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f7fe fccb 	bl	80015a4 <HAL_GetTick>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d901      	bls.n	8002c1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e1b4      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d0f0      	beq.n	8002c0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b28      	ldr	r3, [pc, #160]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4925      	ldr	r1, [pc, #148]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	600b      	str	r3, [r1, #0]
 8002c3c:	e015      	b.n	8002c6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c3e:	4b24      	ldr	r3, [pc, #144]	; (8002cd0 <HAL_RCC_OscConfig+0x278>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c44:	f7fe fcae 	bl	80015a4 <HAL_GetTick>
 8002c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c4c:	f7fe fcaa 	bl	80015a4 <HAL_GetTick>
 8002c50:	4602      	mov	r2, r0
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e193      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d036      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d016      	beq.n	8002cac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <HAL_RCC_OscConfig+0x27c>)
 8002c80:	2201      	movs	r2, #1
 8002c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe fc8e 	bl	80015a4 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c8c:	f7fe fc8a 	bl	80015a4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e173      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_RCC_OscConfig+0x274>)
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x234>
 8002caa:	e01b      	b.n	8002ce4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cac:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <HAL_RCC_OscConfig+0x27c>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fc77 	bl	80015a4 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb8:	e00e      	b.n	8002cd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe fc73 	bl	80015a4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d907      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e15c      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	42470000 	.word	0x42470000
 8002cd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cd8:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ea      	bne.n	8002cba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 8097 	beq.w	8002e20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cf6:	4b83      	ldr	r3, [pc, #524]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60bb      	str	r3, [r7, #8]
 8002d06:	4b7f      	ldr	r3, [pc, #508]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	4a7e      	ldr	r2, [pc, #504]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d10:	6413      	str	r3, [r2, #64]	; 0x40
 8002d12:	4b7c      	ldr	r3, [pc, #496]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d1a:	60bb      	str	r3, [r7, #8]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d22:	4b79      	ldr	r3, [pc, #484]	; (8002f08 <HAL_RCC_OscConfig+0x4b0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d2e:	4b76      	ldr	r3, [pc, #472]	; (8002f08 <HAL_RCC_OscConfig+0x4b0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a75      	ldr	r2, [pc, #468]	; (8002f08 <HAL_RCC_OscConfig+0x4b0>)
 8002d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d3a:	f7fe fc33 	bl	80015a4 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d42:	f7fe fc2f 	bl	80015a4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e118      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d54:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <HAL_RCC_OscConfig+0x4b0>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d106      	bne.n	8002d76 <HAL_RCC_OscConfig+0x31e>
 8002d68:	4b66      	ldr	r3, [pc, #408]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	4a65      	ldr	r2, [pc, #404]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d6e:	f043 0301 	orr.w	r3, r3, #1
 8002d72:	6713      	str	r3, [r2, #112]	; 0x70
 8002d74:	e01c      	b.n	8002db0 <HAL_RCC_OscConfig+0x358>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	2b05      	cmp	r3, #5
 8002d7c:	d10c      	bne.n	8002d98 <HAL_RCC_OscConfig+0x340>
 8002d7e:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d82:	4a60      	ldr	r2, [pc, #384]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	f043 0304 	orr.w	r3, r3, #4
 8002d88:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8a:	4b5e      	ldr	r3, [pc, #376]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a5d      	ldr	r2, [pc, #372]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
 8002d96:	e00b      	b.n	8002db0 <HAL_RCC_OscConfig+0x358>
 8002d98:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9c:	4a59      	ldr	r2, [pc, #356]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002d9e:	f023 0301 	bic.w	r3, r3, #1
 8002da2:	6713      	str	r3, [r2, #112]	; 0x70
 8002da4:	4b57      	ldr	r3, [pc, #348]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da8:	4a56      	ldr	r2, [pc, #344]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002daa:	f023 0304 	bic.w	r3, r3, #4
 8002dae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db8:	f7fe fbf4 	bl	80015a4 <HAL_GetTick>
 8002dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fe fbf0 	bl	80015a4 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e0d7      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0ee      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x368>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de4:	f7fe fbde 	bl	80015a4 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dea:	e00a      	b.n	8002e02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dec:	f7fe fbda 	bl	80015a4 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e0c1      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e02:	4b40      	ldr	r3, [pc, #256]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1ee      	bne.n	8002dec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e0e:	7dfb      	ldrb	r3, [r7, #23]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	4a3a      	ldr	r2, [pc, #232]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80ad 	beq.w	8002f84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d060      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d145      	bne.n	8002eca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3e:	4b33      	ldr	r3, [pc, #204]	; (8002f0c <HAL_RCC_OscConfig+0x4b4>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fbae 	bl	80015a4 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fe fbaa 	bl	80015a4 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e093      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	69da      	ldr	r2, [r3, #28]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	085b      	lsrs	r3, r3, #1
 8002e82:	3b01      	subs	r3, #1
 8002e84:	041b      	lsls	r3, r3, #16
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e94:	071b      	lsls	r3, r3, #28
 8002e96:	491b      	ldr	r1, [pc, #108]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_RCC_OscConfig+0x4b4>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe fb7f 	bl	80015a4 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe fb7b 	bl	80015a4 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e064      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x452>
 8002ec8:	e05c      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b10      	ldr	r3, [pc, #64]	; (8002f0c <HAL_RCC_OscConfig+0x4b4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fb68 	bl	80015a4 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fb64 	bl	80015a4 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e04d      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b06      	ldr	r3, [pc, #24]	; (8002f04 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x480>
 8002ef6:	e045      	b.n	8002f84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e040      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	40007000 	.word	0x40007000
 8002f0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f10:	4b1f      	ldr	r3, [pc, #124]	; (8002f90 <HAL_RCC_OscConfig+0x538>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d030      	beq.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d129      	bne.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d122      	bne.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f40:	4013      	ands	r3, r2
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d119      	bne.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f56:	085b      	lsrs	r3, r3, #1
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10f      	bne.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d001      	beq.n	8002f84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40023800 	.word	0x40023800

08002f94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f839 	bl	8003032 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 f9d8 	bl	8003388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003056:	b2db      	uxtb	r3, r3
 8003058:	2b01      	cmp	r3, #1
 800305a:	d001      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e04e      	b.n	80030fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a23      	ldr	r2, [pc, #140]	; (800310c <HAL_TIM_Base_Start_IT+0xc4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d022      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800308a:	d01d      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <HAL_TIM_Base_Start_IT+0xc8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d018      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <HAL_TIM_Base_Start_IT+0xcc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d013      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <HAL_TIM_Base_Start_IT+0xd0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d00e      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <HAL_TIM_Base_Start_IT+0xd4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d009      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a19      	ldr	r2, [pc, #100]	; (8003120 <HAL_TIM_Base_Start_IT+0xd8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d004      	beq.n	80030c8 <HAL_TIM_Base_Start_IT+0x80>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a18      	ldr	r2, [pc, #96]	; (8003124 <HAL_TIM_Base_Start_IT+0xdc>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d010      	beq.n	80030fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	e007      	b.n	80030fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40000400 	.word	0x40000400
 8003114:	40000800 	.word	0x40000800
 8003118:	40000c00 	.word	0x40000c00
 800311c:	40010400 	.word	0x40010400
 8003120:	40014000 	.word	0x40014000
 8003124:	40001800 	.word	0x40001800

08003128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b02      	cmp	r3, #2
 800313c:	d122      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b02      	cmp	r3, #2
 800314a:	d11b      	bne.n	8003184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0202 	mvn.w	r2, #2
 8003154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 0303 	and.w	r3, r3, #3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d003      	beq.n	8003172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f8ee 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003170:	e005      	b.n	800317e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f8e0 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8f1 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b04      	cmp	r3, #4
 8003190:	d122      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b04      	cmp	r3, #4
 800319e:	d11b      	bne.n	80031d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f06f 0204 	mvn.w	r2, #4
 80031a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f8c4 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 80031c4:	e005      	b.n	80031d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8b6 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f8c7 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d122      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d11b      	bne.n	800322c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0208 	mvn.w	r2, #8
 80031fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f003 0303 	and.w	r3, r3, #3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f89a 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 8003218:	e005      	b.n	8003226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f88c 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 f89d 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	2b10      	cmp	r3, #16
 8003238:	d122      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f003 0310 	and.w	r3, r3, #16
 8003244:	2b10      	cmp	r3, #16
 8003246:	d11b      	bne.n	8003280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0210 	mvn.w	r2, #16
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2208      	movs	r2, #8
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f870 	bl	800334c <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f862 	bl	8003338 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f873 	bl	8003360 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b01      	cmp	r3, #1
 800328c:	d10e      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f06f 0201 	mvn.w	r2, #1
 80032a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd ffc2 	bl	8001230 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b6:	2b80      	cmp	r3, #128	; 0x80
 80032b8:	d10e      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c4:	2b80      	cmp	r3, #128	; 0x80
 80032c6:	d107      	bne.n	80032d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f902 	bl	80034dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10e      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d107      	bne.n	8003304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f838 	bl	8003374 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	f003 0320 	and.w	r3, r3, #32
 800330e:	2b20      	cmp	r3, #32
 8003310:	d10e      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b20      	cmp	r3, #32
 800331e:	d107      	bne.n	8003330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f06f 0220 	mvn.w	r2, #32
 8003328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f8cc 	bl	80034c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a40      	ldr	r2, [pc, #256]	; (800349c <TIM_Base_SetConfig+0x114>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d013      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033a6:	d00f      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a3d      	ldr	r2, [pc, #244]	; (80034a0 <TIM_Base_SetConfig+0x118>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d00b      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a3c      	ldr	r2, [pc, #240]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d007      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a3b      	ldr	r2, [pc, #236]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d003      	beq.n	80033c8 <TIM_Base_SetConfig+0x40>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a3a      	ldr	r2, [pc, #232]	; (80034ac <TIM_Base_SetConfig+0x124>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d108      	bne.n	80033da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	68fa      	ldr	r2, [r7, #12]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2f      	ldr	r2, [pc, #188]	; (800349c <TIM_Base_SetConfig+0x114>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d02b      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e8:	d027      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <TIM_Base_SetConfig+0x118>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d023      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <TIM_Base_SetConfig+0x11c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d01f      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a2a      	ldr	r2, [pc, #168]	; (80034a8 <TIM_Base_SetConfig+0x120>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d01b      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a29      	ldr	r2, [pc, #164]	; (80034ac <TIM_Base_SetConfig+0x124>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d017      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <TIM_Base_SetConfig+0x128>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d013      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <TIM_Base_SetConfig+0x12c>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d00f      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a26      	ldr	r2, [pc, #152]	; (80034b8 <TIM_Base_SetConfig+0x130>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d00b      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a25      	ldr	r2, [pc, #148]	; (80034bc <TIM_Base_SetConfig+0x134>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d007      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a24      	ldr	r2, [pc, #144]	; (80034c0 <TIM_Base_SetConfig+0x138>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d003      	beq.n	800343a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a23      	ldr	r2, [pc, #140]	; (80034c4 <TIM_Base_SetConfig+0x13c>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d108      	bne.n	800344c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003440:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <TIM_Base_SetConfig+0x114>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0xf8>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a0c      	ldr	r2, [pc, #48]	; (80034ac <TIM_Base_SetConfig+0x124>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	615a      	str	r2, [r3, #20]
}
 800348e:	bf00      	nop
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40010400 	.word	0x40010400
 80034b0:	40014000 	.word	0x40014000
 80034b4:	40014400 	.word	0x40014400
 80034b8:	40014800 	.word	0x40014800
 80034bc:	40001800 	.word	0x40001800
 80034c0:	40001c00 	.word	0x40001c00
 80034c4:	40002000 	.word	0x40002000

080034c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e03f      	b.n	8003582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fd fef0 	bl	80012fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2224      	movs	r2, #36	; 0x24
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 f829 	bl	800358c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	695a      	ldr	r2, [r3, #20]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800358c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003590:	b0c0      	sub	sp, #256	; 0x100
 8003592:	af00      	add	r7, sp, #0
 8003594:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	68d9      	ldr	r1, [r3, #12]
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	ea40 0301 	orr.w	r3, r0, r1
 80035b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c0:	691b      	ldr	r3, [r3, #16]
 80035c2:	431a      	orrs	r2, r3
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	431a      	orrs	r2, r3
 80035cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035e4:	f021 010c 	bic.w	r1, r1, #12
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035f2:	430b      	orrs	r3, r1
 80035f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003606:	6999      	ldr	r1, [r3, #24]
 8003608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	ea40 0301 	orr.w	r3, r0, r1
 8003612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	4b8f      	ldr	r3, [pc, #572]	; (8003858 <UART_SetConfig+0x2cc>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d005      	beq.n	800362c <UART_SetConfig+0xa0>
 8003620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	4b8d      	ldr	r3, [pc, #564]	; (800385c <UART_SetConfig+0x2d0>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d104      	bne.n	8003636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7fe ff9e 	bl	800256c <HAL_RCC_GetPCLK2Freq>
 8003630:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003634:	e003      	b.n	800363e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003636:	f7fe ff85 	bl	8002544 <HAL_RCC_GetPCLK1Freq>
 800363a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003648:	f040 810c 	bne.w	8003864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800364c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003656:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800365a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800365e:	4622      	mov	r2, r4
 8003660:	462b      	mov	r3, r5
 8003662:	1891      	adds	r1, r2, r2
 8003664:	65b9      	str	r1, [r7, #88]	; 0x58
 8003666:	415b      	adcs	r3, r3
 8003668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800366a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800366e:	4621      	mov	r1, r4
 8003670:	eb12 0801 	adds.w	r8, r2, r1
 8003674:	4629      	mov	r1, r5
 8003676:	eb43 0901 	adc.w	r9, r3, r1
 800367a:	f04f 0200 	mov.w	r2, #0
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800368a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800368e:	4690      	mov	r8, r2
 8003690:	4699      	mov	r9, r3
 8003692:	4623      	mov	r3, r4
 8003694:	eb18 0303 	adds.w	r3, r8, r3
 8003698:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800369c:	462b      	mov	r3, r5
 800369e:	eb49 0303 	adc.w	r3, r9, r3
 80036a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80036a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80036b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036ba:	460b      	mov	r3, r1
 80036bc:	18db      	adds	r3, r3, r3
 80036be:	653b      	str	r3, [r7, #80]	; 0x50
 80036c0:	4613      	mov	r3, r2
 80036c2:	eb42 0303 	adc.w	r3, r2, r3
 80036c6:	657b      	str	r3, [r7, #84]	; 0x54
 80036c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80036cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80036d0:	f7fd f9bc 	bl	8000a4c <__aeabi_uldivmod>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4b61      	ldr	r3, [pc, #388]	; (8003860 <UART_SetConfig+0x2d4>)
 80036da:	fba3 2302 	umull	r2, r3, r3, r2
 80036de:	095b      	lsrs	r3, r3, #5
 80036e0:	011c      	lsls	r4, r3, #4
 80036e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036f4:	4642      	mov	r2, r8
 80036f6:	464b      	mov	r3, r9
 80036f8:	1891      	adds	r1, r2, r2
 80036fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80036fc:	415b      	adcs	r3, r3
 80036fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003704:	4641      	mov	r1, r8
 8003706:	eb12 0a01 	adds.w	sl, r2, r1
 800370a:	4649      	mov	r1, r9
 800370c:	eb43 0b01 	adc.w	fp, r3, r1
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	f04f 0300 	mov.w	r3, #0
 8003718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800371c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003724:	4692      	mov	sl, r2
 8003726:	469b      	mov	fp, r3
 8003728:	4643      	mov	r3, r8
 800372a:	eb1a 0303 	adds.w	r3, sl, r3
 800372e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003732:	464b      	mov	r3, r9
 8003734:	eb4b 0303 	adc.w	r3, fp, r3
 8003738:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800373c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003748:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800374c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003750:	460b      	mov	r3, r1
 8003752:	18db      	adds	r3, r3, r3
 8003754:	643b      	str	r3, [r7, #64]	; 0x40
 8003756:	4613      	mov	r3, r2
 8003758:	eb42 0303 	adc.w	r3, r2, r3
 800375c:	647b      	str	r3, [r7, #68]	; 0x44
 800375e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003766:	f7fd f971 	bl	8000a4c <__aeabi_uldivmod>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	4611      	mov	r1, r2
 8003770:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <UART_SetConfig+0x2d4>)
 8003772:	fba3 2301 	umull	r2, r3, r3, r1
 8003776:	095b      	lsrs	r3, r3, #5
 8003778:	2264      	movs	r2, #100	; 0x64
 800377a:	fb02 f303 	mul.w	r3, r2, r3
 800377e:	1acb      	subs	r3, r1, r3
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003786:	4b36      	ldr	r3, [pc, #216]	; (8003860 <UART_SetConfig+0x2d4>)
 8003788:	fba3 2302 	umull	r2, r3, r3, r2
 800378c:	095b      	lsrs	r3, r3, #5
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003794:	441c      	add	r4, r3
 8003796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800379a:	2200      	movs	r2, #0
 800379c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80037a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80037a8:	4642      	mov	r2, r8
 80037aa:	464b      	mov	r3, r9
 80037ac:	1891      	adds	r1, r2, r2
 80037ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80037b0:	415b      	adcs	r3, r3
 80037b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80037b8:	4641      	mov	r1, r8
 80037ba:	1851      	adds	r1, r2, r1
 80037bc:	6339      	str	r1, [r7, #48]	; 0x30
 80037be:	4649      	mov	r1, r9
 80037c0:	414b      	adcs	r3, r1
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80037d0:	4659      	mov	r1, fp
 80037d2:	00cb      	lsls	r3, r1, #3
 80037d4:	4651      	mov	r1, sl
 80037d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037da:	4651      	mov	r1, sl
 80037dc:	00ca      	lsls	r2, r1, #3
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	4603      	mov	r3, r0
 80037e4:	4642      	mov	r2, r8
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037ec:	464b      	mov	r3, r9
 80037ee:	460a      	mov	r2, r1
 80037f0:	eb42 0303 	adc.w	r3, r2, r3
 80037f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003804:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800380c:	460b      	mov	r3, r1
 800380e:	18db      	adds	r3, r3, r3
 8003810:	62bb      	str	r3, [r7, #40]	; 0x28
 8003812:	4613      	mov	r3, r2
 8003814:	eb42 0303 	adc.w	r3, r2, r3
 8003818:	62fb      	str	r3, [r7, #44]	; 0x2c
 800381a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800381e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003822:	f7fd f913 	bl	8000a4c <__aeabi_uldivmod>
 8003826:	4602      	mov	r2, r0
 8003828:	460b      	mov	r3, r1
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <UART_SetConfig+0x2d4>)
 800382c:	fba3 1302 	umull	r1, r3, r3, r2
 8003830:	095b      	lsrs	r3, r3, #5
 8003832:	2164      	movs	r1, #100	; 0x64
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	3332      	adds	r3, #50	; 0x32
 800383e:	4a08      	ldr	r2, [pc, #32]	; (8003860 <UART_SetConfig+0x2d4>)
 8003840:	fba2 2303 	umull	r2, r3, r2, r3
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	f003 0207 	and.w	r2, r3, #7
 800384a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4422      	add	r2, r4
 8003852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003854:	e105      	b.n	8003a62 <UART_SetConfig+0x4d6>
 8003856:	bf00      	nop
 8003858:	40011000 	.word	0x40011000
 800385c:	40011400 	.word	0x40011400
 8003860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800386e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003876:	4642      	mov	r2, r8
 8003878:	464b      	mov	r3, r9
 800387a:	1891      	adds	r1, r2, r2
 800387c:	6239      	str	r1, [r7, #32]
 800387e:	415b      	adcs	r3, r3
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
 8003882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003886:	4641      	mov	r1, r8
 8003888:	1854      	adds	r4, r2, r1
 800388a:	4649      	mov	r1, r9
 800388c:	eb43 0501 	adc.w	r5, r3, r1
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	00eb      	lsls	r3, r5, #3
 800389a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800389e:	00e2      	lsls	r2, r4, #3
 80038a0:	4614      	mov	r4, r2
 80038a2:	461d      	mov	r5, r3
 80038a4:	4643      	mov	r3, r8
 80038a6:	18e3      	adds	r3, r4, r3
 80038a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80038ac:	464b      	mov	r3, r9
 80038ae:	eb45 0303 	adc.w	r3, r5, r3
 80038b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80038b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80038c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038c6:	f04f 0200 	mov.w	r2, #0
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80038d2:	4629      	mov	r1, r5
 80038d4:	008b      	lsls	r3, r1, #2
 80038d6:	4621      	mov	r1, r4
 80038d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038dc:	4621      	mov	r1, r4
 80038de:	008a      	lsls	r2, r1, #2
 80038e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038e4:	f7fd f8b2 	bl	8000a4c <__aeabi_uldivmod>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4b60      	ldr	r3, [pc, #384]	; (8003a70 <UART_SetConfig+0x4e4>)
 80038ee:	fba3 2302 	umull	r2, r3, r3, r2
 80038f2:	095b      	lsrs	r3, r3, #5
 80038f4:	011c      	lsls	r4, r3, #4
 80038f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fa:	2200      	movs	r2, #0
 80038fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003900:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003908:	4642      	mov	r2, r8
 800390a:	464b      	mov	r3, r9
 800390c:	1891      	adds	r1, r2, r2
 800390e:	61b9      	str	r1, [r7, #24]
 8003910:	415b      	adcs	r3, r3
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003918:	4641      	mov	r1, r8
 800391a:	1851      	adds	r1, r2, r1
 800391c:	6139      	str	r1, [r7, #16]
 800391e:	4649      	mov	r1, r9
 8003920:	414b      	adcs	r3, r1
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003930:	4659      	mov	r1, fp
 8003932:	00cb      	lsls	r3, r1, #3
 8003934:	4651      	mov	r1, sl
 8003936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800393a:	4651      	mov	r1, sl
 800393c:	00ca      	lsls	r2, r1, #3
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	4603      	mov	r3, r0
 8003944:	4642      	mov	r2, r8
 8003946:	189b      	adds	r3, r3, r2
 8003948:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800394c:	464b      	mov	r3, r9
 800394e:	460a      	mov	r2, r1
 8003950:	eb42 0303 	adc.w	r3, r2, r3
 8003954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	67bb      	str	r3, [r7, #120]	; 0x78
 8003962:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003970:	4649      	mov	r1, r9
 8003972:	008b      	lsls	r3, r1, #2
 8003974:	4641      	mov	r1, r8
 8003976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800397a:	4641      	mov	r1, r8
 800397c:	008a      	lsls	r2, r1, #2
 800397e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003982:	f7fd f863 	bl	8000a4c <__aeabi_uldivmod>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4b39      	ldr	r3, [pc, #228]	; (8003a70 <UART_SetConfig+0x4e4>)
 800398c:	fba3 1302 	umull	r1, r3, r3, r2
 8003990:	095b      	lsrs	r3, r3, #5
 8003992:	2164      	movs	r1, #100	; 0x64
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	3332      	adds	r3, #50	; 0x32
 800399e:	4a34      	ldr	r2, [pc, #208]	; (8003a70 <UART_SetConfig+0x4e4>)
 80039a0:	fba2 2303 	umull	r2, r3, r2, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039aa:	441c      	add	r4, r3
 80039ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80039b0:	2200      	movs	r2, #0
 80039b2:	673b      	str	r3, [r7, #112]	; 0x70
 80039b4:	677a      	str	r2, [r7, #116]	; 0x74
 80039b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80039ba:	4642      	mov	r2, r8
 80039bc:	464b      	mov	r3, r9
 80039be:	1891      	adds	r1, r2, r2
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	415b      	adcs	r3, r3
 80039c4:	60fb      	str	r3, [r7, #12]
 80039c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039ca:	4641      	mov	r1, r8
 80039cc:	1851      	adds	r1, r2, r1
 80039ce:	6039      	str	r1, [r7, #0]
 80039d0:	4649      	mov	r1, r9
 80039d2:	414b      	adcs	r3, r1
 80039d4:	607b      	str	r3, [r7, #4]
 80039d6:	f04f 0200 	mov.w	r2, #0
 80039da:	f04f 0300 	mov.w	r3, #0
 80039de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039e2:	4659      	mov	r1, fp
 80039e4:	00cb      	lsls	r3, r1, #3
 80039e6:	4651      	mov	r1, sl
 80039e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ec:	4651      	mov	r1, sl
 80039ee:	00ca      	lsls	r2, r1, #3
 80039f0:	4610      	mov	r0, r2
 80039f2:	4619      	mov	r1, r3
 80039f4:	4603      	mov	r3, r0
 80039f6:	4642      	mov	r2, r8
 80039f8:	189b      	adds	r3, r3, r2
 80039fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80039fc:	464b      	mov	r3, r9
 80039fe:	460a      	mov	r2, r1
 8003a00:	eb42 0303 	adc.w	r3, r2, r3
 8003a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	663b      	str	r3, [r7, #96]	; 0x60
 8003a10:	667a      	str	r2, [r7, #100]	; 0x64
 8003a12:	f04f 0200 	mov.w	r2, #0
 8003a16:	f04f 0300 	mov.w	r3, #0
 8003a1a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a1e:	4649      	mov	r1, r9
 8003a20:	008b      	lsls	r3, r1, #2
 8003a22:	4641      	mov	r1, r8
 8003a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a28:	4641      	mov	r1, r8
 8003a2a:	008a      	lsls	r2, r1, #2
 8003a2c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003a30:	f7fd f80c 	bl	8000a4c <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <UART_SetConfig+0x4e4>)
 8003a3a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a3e:	095b      	lsrs	r3, r3, #5
 8003a40:	2164      	movs	r1, #100	; 0x64
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	3332      	adds	r3, #50	; 0x32
 8003a4c:	4a08      	ldr	r2, [pc, #32]	; (8003a70 <UART_SetConfig+0x4e4>)
 8003a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	f003 020f 	and.w	r2, r3, #15
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4422      	add	r2, r4
 8003a60:	609a      	str	r2, [r3, #8]
}
 8003a62:	bf00      	nop
 8003a64:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6e:	bf00      	nop
 8003a70:	51eb851f 	.word	0x51eb851f

08003a74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003a82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a86:	2b84      	cmp	r3, #132	; 0x84
 8003a88:	d005      	beq.n	8003a96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003a8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4413      	add	r3, r2
 8003a92:	3303      	adds	r3, #3
 8003a94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003a96:	68fb      	ldr	r3, [r7, #12]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aaa:	f3ef 8305 	mrs	r3, IPSR
 8003aae:	607b      	str	r3, [r7, #4]
  return(result);
 8003ab0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003acc:	f001 f856 	bl	8004b7c <vTaskStartScheduler>
  
  return osOK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003ad6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ad8:	b089      	sub	sp, #36	; 0x24
 8003ada:	af04      	add	r7, sp, #16
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <osThreadCreate+0x54>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01c      	beq.n	8003b2a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685c      	ldr	r4, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681d      	ldr	r5, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691e      	ldr	r6, [r3, #16]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffb6 	bl	8003a74 <makeFreeRtosPriority>
 8003b08:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b12:	9202      	str	r2, [sp, #8]
 8003b14:	9301      	str	r3, [sp, #4]
 8003b16:	9100      	str	r1, [sp, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4632      	mov	r2, r6
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	4620      	mov	r0, r4
 8003b20:	f000 fe4e 	bl	80047c0 <xTaskCreateStatic>
 8003b24:	4603      	mov	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	e01c      	b.n	8003b64 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685c      	ldr	r4, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003b36:	b29e      	uxth	r6, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff ff98 	bl	8003a74 <makeFreeRtosPriority>
 8003b44:	4602      	mov	r2, r0
 8003b46:	f107 030c 	add.w	r3, r7, #12
 8003b4a:	9301      	str	r3, [sp, #4]
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	4632      	mov	r2, r6
 8003b52:	4629      	mov	r1, r5
 8003b54:	4620      	mov	r0, r4
 8003b56:	f000 fe90 	bl	800487a <xTaskCreate>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d001      	beq.n	8003b64 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e000      	b.n	8003b66 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003b64:	68fb      	ldr	r3, [r7, #12]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b6e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <osDelay+0x16>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	e000      	b.n	8003b86 <osDelay+0x18>
 8003b84:	2301      	movs	r3, #1
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 ffc4 	bl	8004b14 <vTaskDelay>
  
  return osOK;
 8003b8c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d013      	beq.n	8003bd6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <osTimerCreate+0x20>
 8003bb4:	2101      	movs	r1, #1
 8003bb6:	e000      	b.n	8003bba <osTimerCreate+0x22>
 8003bb8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8003bc2:	9201      	str	r2, [sp, #4]
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	460a      	mov	r2, r1
 8003bca:	2101      	movs	r1, #1
 8003bcc:	480b      	ldr	r0, [pc, #44]	; (8003bfc <osTimerCreate+0x64>)
 8003bce:	f001 fd9c 	bl	800570a <xTimerCreateStatic>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	e00e      	b.n	8003bf4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8003bd6:	7afb      	ldrb	r3, [r7, #11]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <osTimerCreate+0x48>
 8003bdc:	2201      	movs	r2, #1
 8003bde:	e000      	b.n	8003be2 <osTimerCreate+0x4a>
 8003be0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2101      	movs	r1, #1
 8003bec:	4803      	ldr	r0, [pc, #12]	; (8003bfc <osTimerCreate+0x64>)
 8003bee:	f001 fd6b 	bl	80056c8 <xTimerCreate>
 8003bf2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	08006874 	.word	0x08006874

08003c00 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <osTimerStart+0x20>
    ticks = 1;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8003c20:	f7ff ff40 	bl	8003aa4 <inHandlerMode>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d01a      	beq.n	8003c60 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8003c2a:	f107 030c 	add.w	r3, r7, #12
 8003c2e:	2200      	movs	r2, #0
 8003c30:	9200      	str	r2, [sp, #0]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	2109      	movs	r1, #9
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f001 fde0 	bl	80057fc <xTimerGenericCommand>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d002      	beq.n	8003c48 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8003c42:	23ff      	movs	r3, #255	; 0xff
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e018      	b.n	8003c7a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d015      	beq.n	8003c7a <osTimerStart+0x7a>
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <osTimerStart+0x84>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	e00c      	b.n	8003c7a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8003c60:	2300      	movs	r3, #0
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	2104      	movs	r1, #4
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f001 fdc6 	bl	80057fc <xTimerGenericCommand>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d001      	beq.n	8003c7a <osTimerStart+0x7a>
      result = osErrorOS;
 8003c76:	23ff      	movs	r3, #255	; 0xff
 8003c78:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	e000ed04 	.word	0xe000ed04

08003c88 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f103 0208 	add.w	r2, r3, #8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f103 0208 	add.w	r2, r3, #8
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f103 0208 	add.w	r2, r3, #8
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	601a      	str	r2, [r3, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3714      	adds	r7, #20
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr

08003d2a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b085      	sub	sp, #20
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
 8003d32:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d103      	bne.n	8003d4a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	60fb      	str	r3, [r7, #12]
 8003d48:	e00c      	b.n	8003d64 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	e002      	b.n	8003d58 <vListInsert+0x2e>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d2f6      	bcs.n	8003d52 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	683a      	ldr	r2, [r7, #0]
 8003d72:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	683a      	ldr	r2, [r7, #0]
 8003d7e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	3714      	adds	r7, #20
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	6892      	ldr	r2, [r2, #8]
 8003db2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6852      	ldr	r2, [r2, #4]
 8003dbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d103      	bne.n	8003dd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689a      	ldr	r2, [r3, #8]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	1e5a      	subs	r2, r3, #1
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b084      	sub	sp, #16
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10a      	bne.n	8003e1a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003e16:	bf00      	nop
 8003e18:	e7fe      	b.n	8003e18 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003e1a:	f002 f903 	bl	8006024 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	68f9      	ldr	r1, [r7, #12]
 8003e28:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e2a:	fb01 f303 	mul.w	r3, r1, r3
 8003e2e:	441a      	add	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	68f9      	ldr	r1, [r7, #12]
 8003e4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e50:	fb01 f303 	mul.w	r3, r1, r3
 8003e54:	441a      	add	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	; 0xff
 8003e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	22ff      	movs	r2, #255	; 0xff
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d114      	bne.n	8003e9a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01a      	beq.n	8003eae <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	3310      	adds	r3, #16
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f001 f911 	bl	80050a4 <xTaskRemoveFromEventList>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d012      	beq.n	8003eae <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e88:	4b0c      	ldr	r3, [pc, #48]	; (8003ebc <xQueueGenericReset+0xcc>)
 8003e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	e009      	b.n	8003eae <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7ff fef2 	bl	8003c88 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	3324      	adds	r3, #36	; 0x24
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7ff feed 	bl	8003c88 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003eae:	f002 f8e9 	bl	8006084 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003eb2:	2301      	movs	r3, #1
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	e000ed04 	.word	0xe000ed04

08003ec0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08e      	sub	sp, #56	; 0x38
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef4:	f383 8811 	msr	BASEPRI, r3
 8003ef8:	f3bf 8f6f 	isb	sy
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f02:	bf00      	nop
 8003f04:	e7fe      	b.n	8003f04 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d002      	beq.n	8003f12 <xQueueGenericCreateStatic+0x52>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <xQueueGenericCreateStatic+0x56>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueGenericCreateStatic+0x58>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	623b      	str	r3, [r7, #32]
}
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d102      	bne.n	8003f3e <xQueueGenericCreateStatic+0x7e>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <xQueueGenericCreateStatic+0x82>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <xQueueGenericCreateStatic+0x84>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	61fb      	str	r3, [r7, #28]
}
 8003f5a:	bf00      	nop
 8003f5c:	e7fe      	b.n	8003f5c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f5e:	2348      	movs	r3, #72	; 0x48
 8003f60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b48      	cmp	r3, #72	; 0x48
 8003f66:	d00a      	beq.n	8003f7e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6c:	f383 8811 	msr	BASEPRI, r3
 8003f70:	f3bf 8f6f 	isb	sy
 8003f74:	f3bf 8f4f 	dsb	sy
 8003f78:	61bb      	str	r3, [r7, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	e7fe      	b.n	8003f7c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f7e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00d      	beq.n	8003fa6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f92:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	68b9      	ldr	r1, [r7, #8]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 f805 	bl	8003fb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3730      	adds	r7, #48	; 0x30
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d103      	bne.n	8003fcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	e002      	b.n	8003fd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	68ba      	ldr	r2, [r7, #8]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fde:	2101      	movs	r1, #1
 8003fe0:	69b8      	ldr	r0, [r7, #24]
 8003fe2:	f7ff ff05 	bl	8003df0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
	...

08003ff0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b08e      	sub	sp, #56	; 0x38
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ffe:	2300      	movs	r3, #0
 8004000:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10a      	bne.n	8004022 <xQueueGenericSend+0x32>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800401e:	bf00      	nop
 8004020:	e7fe      	b.n	8004020 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d103      	bne.n	8004030 <xQueueGenericSend+0x40>
 8004028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <xQueueGenericSend+0x44>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <xQueueGenericSend+0x46>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10a      	bne.n	8004050 <xQueueGenericSend+0x60>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800404c:	bf00      	nop
 800404e:	e7fe      	b.n	800404e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b02      	cmp	r3, #2
 8004054:	d103      	bne.n	800405e <xQueueGenericSend+0x6e>
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <xQueueGenericSend+0x72>
 800405e:	2301      	movs	r3, #1
 8004060:	e000      	b.n	8004064 <xQueueGenericSend+0x74>
 8004062:	2300      	movs	r3, #0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <xQueueGenericSend+0x8e>
	__asm volatile
 8004068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800406c:	f383 8811 	msr	BASEPRI, r3
 8004070:	f3bf 8f6f 	isb	sy
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	623b      	str	r3, [r7, #32]
}
 800407a:	bf00      	nop
 800407c:	e7fe      	b.n	800407c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800407e:	f001 f9d1 	bl	8005424 <xTaskGetSchedulerState>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <xQueueGenericSend+0x9e>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <xQueueGenericSend+0xa2>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <xQueueGenericSend+0xa4>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <xQueueGenericSend+0xbe>
	__asm volatile
 8004098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409c:	f383 8811 	msr	BASEPRI, r3
 80040a0:	f3bf 8f6f 	isb	sy
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	61fb      	str	r3, [r7, #28]
}
 80040aa:	bf00      	nop
 80040ac:	e7fe      	b.n	80040ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040ae:	f001 ffb9 	bl	8006024 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d302      	bcc.n	80040c4 <xQueueGenericSend+0xd4>
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d129      	bne.n	8004118 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	68b9      	ldr	r1, [r7, #8]
 80040c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ca:	f000 fa0b 	bl	80044e4 <prvCopyDataToQueue>
 80040ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d010      	beq.n	80040fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	3324      	adds	r3, #36	; 0x24
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 ffe1 	bl	80050a4 <xTaskRemoveFromEventList>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d013      	beq.n	8004110 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80040e8:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <xQueueGenericSend+0x1f8>)
 80040ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	f3bf 8f6f 	isb	sy
 80040f8:	e00a      	b.n	8004110 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d007      	beq.n	8004110 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004100:	4b39      	ldr	r3, [pc, #228]	; (80041e8 <xQueueGenericSend+0x1f8>)
 8004102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004110:	f001 ffb8 	bl	8006084 <vPortExitCritical>
				return pdPASS;
 8004114:	2301      	movs	r3, #1
 8004116:	e063      	b.n	80041e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800411e:	f001 ffb1 	bl	8006084 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004122:	2300      	movs	r3, #0
 8004124:	e05c      	b.n	80041e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	2b00      	cmp	r3, #0
 800412a:	d106      	bne.n	800413a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	4618      	mov	r0, r3
 8004132:	f001 f819 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004136:	2301      	movs	r3, #1
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800413a:	f001 ffa3 	bl	8006084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800413e:	f000 fd8d 	bl	8004c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004142:	f001 ff6f 	bl	8006024 <vPortEnterCritical>
 8004146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800414c:	b25b      	sxtb	r3, r3
 800414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004152:	d103      	bne.n	800415c <xQueueGenericSend+0x16c>
 8004154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004162:	b25b      	sxtb	r3, r3
 8004164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004168:	d103      	bne.n	8004172 <xQueueGenericSend+0x182>
 800416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800416c:	2200      	movs	r2, #0
 800416e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004172:	f001 ff87 	bl	8006084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004176:	1d3a      	adds	r2, r7, #4
 8004178:	f107 0314 	add.w	r3, r7, #20
 800417c:	4611      	mov	r1, r2
 800417e:	4618      	mov	r0, r3
 8004180:	f001 f808 	bl	8005194 <xTaskCheckForTimeOut>
 8004184:	4603      	mov	r3, r0
 8004186:	2b00      	cmp	r3, #0
 8004188:	d124      	bne.n	80041d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800418a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800418c:	f000 faa2 	bl	80046d4 <prvIsQueueFull>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d018      	beq.n	80041c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	3310      	adds	r3, #16
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	4611      	mov	r1, r2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 ff30 	bl	8005004 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041a6:	f000 fa2d 	bl	8004604 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041aa:	f000 fd65 	bl	8004c78 <xTaskResumeAll>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f af7c 	bne.w	80040ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80041b6:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <xQueueGenericSend+0x1f8>)
 80041b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041bc:	601a      	str	r2, [r3, #0]
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	e772      	b.n	80040ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041ca:	f000 fa1b 	bl	8004604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041ce:	f000 fd53 	bl	8004c78 <xTaskResumeAll>
 80041d2:	e76c      	b.n	80040ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d6:	f000 fa15 	bl	8004604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041da:	f000 fd4d 	bl	8004c78 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3738      	adds	r7, #56	; 0x38
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	e000ed04 	.word	0xe000ed04

080041ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b090      	sub	sp, #64	; 0x40
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80041fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d103      	bne.n	8004228 <xQueueGenericSendFromISR+0x3c>
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <xQueueGenericSendFromISR+0x40>
 8004228:	2301      	movs	r3, #1
 800422a:	e000      	b.n	800422e <xQueueGenericSendFromISR+0x42>
 800422c:	2300      	movs	r3, #0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10a      	bne.n	8004248 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004236:	f383 8811 	msr	BASEPRI, r3
 800423a:	f3bf 8f6f 	isb	sy
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004244:	bf00      	nop
 8004246:	e7fe      	b.n	8004246 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d103      	bne.n	8004256 <xQueueGenericSendFromISR+0x6a>
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <xQueueGenericSendFromISR+0x6e>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericSendFromISR+0x70>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	623b      	str	r3, [r7, #32]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004276:	f001 ffb7 	bl	80061e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800427a:	f3ef 8211 	mrs	r2, BASEPRI
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	61fa      	str	r2, [r7, #28]
 8004290:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004292:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004294:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800429a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	429a      	cmp	r2, r3
 80042a0:	d302      	bcc.n	80042a8 <xQueueGenericSendFromISR+0xbc>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d12f      	bne.n	8004308 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	68b9      	ldr	r1, [r7, #8]
 80042bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80042be:	f000 f911 	bl	80044e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80042c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d112      	bne.n	80042f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d016      	beq.n	8004302 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d6:	3324      	adds	r3, #36	; 0x24
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fee3 	bl	80050a4 <xTaskRemoveFromEventList>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d00e      	beq.n	8004302 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	601a      	str	r2, [r3, #0]
 80042f0:	e007      	b.n	8004302 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80042f6:	3301      	adds	r3, #1
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	b25a      	sxtb	r2, r3
 80042fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004302:	2301      	movs	r3, #1
 8004304:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004306:	e001      	b.n	800430c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004308:	2300      	movs	r3, #0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800430e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004316:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800431a:	4618      	mov	r0, r3
 800431c:	3740      	adds	r7, #64	; 0x40
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b08c      	sub	sp, #48	; 0x30
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004330:	2300      	movs	r3, #0
 8004332:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10a      	bne.n	8004354 <xQueueReceive+0x30>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	623b      	str	r3, [r7, #32]
}
 8004350:	bf00      	nop
 8004352:	e7fe      	b.n	8004352 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d103      	bne.n	8004362 <xQueueReceive+0x3e>
 800435a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <xQueueReceive+0x42>
 8004362:	2301      	movs	r3, #1
 8004364:	e000      	b.n	8004368 <xQueueReceive+0x44>
 8004366:	2300      	movs	r3, #0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <xQueueReceive+0x5e>
	__asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	61fb      	str	r3, [r7, #28]
}
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004382:	f001 f84f 	bl	8005424 <xTaskGetSchedulerState>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <xQueueReceive+0x6e>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <xQueueReceive+0x72>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <xQueueReceive+0x74>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueReceive+0x8e>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	61bb      	str	r3, [r7, #24]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043b2:	f001 fe37 	bl	8006024 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d01f      	beq.n	8004402 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043c6:	f000 f8f7 	bl	80045b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	1e5a      	subs	r2, r3, #1
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00f      	beq.n	80043fa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043dc:	3310      	adds	r3, #16
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fe60 	bl	80050a4 <xTaskRemoveFromEventList>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043ea:	4b3d      	ldr	r3, [pc, #244]	; (80044e0 <xQueueReceive+0x1bc>)
 80043ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043fa:	f001 fe43 	bl	8006084 <vPortExitCritical>
				return pdPASS;
 80043fe:	2301      	movs	r3, #1
 8004400:	e069      	b.n	80044d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d103      	bne.n	8004410 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004408:	f001 fe3c 	bl	8006084 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800440c:	2300      	movs	r3, #0
 800440e:	e062      	b.n	80044d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004416:	f107 0310 	add.w	r3, r7, #16
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fea4 	bl	8005168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004424:	f001 fe2e 	bl	8006084 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004428:	f000 fc18 	bl	8004c5c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800442c:	f001 fdfa 	bl	8006024 <vPortEnterCritical>
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004436:	b25b      	sxtb	r3, r3
 8004438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443c:	d103      	bne.n	8004446 <xQueueReceive+0x122>
 800443e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800444c:	b25b      	sxtb	r3, r3
 800444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004452:	d103      	bne.n	800445c <xQueueReceive+0x138>
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800445c:	f001 fe12 	bl	8006084 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004460:	1d3a      	adds	r2, r7, #4
 8004462:	f107 0310 	add.w	r3, r7, #16
 8004466:	4611      	mov	r1, r2
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fe93 	bl	8005194 <xTaskCheckForTimeOut>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d123      	bne.n	80044bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004474:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004476:	f000 f917 	bl	80046a8 <prvIsQueueEmpty>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d017      	beq.n	80044b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004482:	3324      	adds	r3, #36	; 0x24
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	4611      	mov	r1, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f000 fdbb 	bl	8005004 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800448e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004490:	f000 f8b8 	bl	8004604 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004494:	f000 fbf0 	bl	8004c78 <xTaskResumeAll>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d189      	bne.n	80043b2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800449e:	4b10      	ldr	r3, [pc, #64]	; (80044e0 <xQueueReceive+0x1bc>)
 80044a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044a4:	601a      	str	r2, [r3, #0]
 80044a6:	f3bf 8f4f 	dsb	sy
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	e780      	b.n	80043b2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044b2:	f000 f8a7 	bl	8004604 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044b6:	f000 fbdf 	bl	8004c78 <xTaskResumeAll>
 80044ba:	e77a      	b.n	80043b2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80044bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044be:	f000 f8a1 	bl	8004604 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044c2:	f000 fbd9 	bl	8004c78 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c8:	f000 f8ee 	bl	80046a8 <prvIsQueueEmpty>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f43f af6f 	beq.w	80043b2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80044d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3730      	adds	r7, #48	; 0x30
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	e000ed04 	.word	0xe000ed04

080044e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10d      	bne.n	800451e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d14d      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 ffa6 	bl	8005460 <xTaskPriorityDisinherit>
 8004514:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	609a      	str	r2, [r3, #8]
 800451c:	e043      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d119      	bne.n	8004558 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6858      	ldr	r0, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	461a      	mov	r2, r3
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	f002 f8aa 	bl	8006688 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	441a      	add	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	429a      	cmp	r2, r3
 800454c:	d32b      	bcc.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	605a      	str	r2, [r3, #4]
 8004556:	e026      	b.n	80045a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	68d8      	ldr	r0, [r3, #12]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	461a      	mov	r2, r3
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	f002 f890 	bl	8006688 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	425b      	negs	r3, r3
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d207      	bcs.n	8004594 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458c:	425b      	negs	r3, r3
 800458e:	441a      	add	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d105      	bne.n	80045a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d002      	beq.n	80045a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80045ae:	697b      	ldr	r3, [r7, #20]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d018      	beq.n	80045fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	441a      	add	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d303      	bcc.n	80045ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68d9      	ldr	r1, [r3, #12]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f4:	461a      	mov	r2, r3
 80045f6:	6838      	ldr	r0, [r7, #0]
 80045f8:	f002 f846 	bl	8006688 <memcpy>
	}
}
 80045fc:	bf00      	nop
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800460c:	f001 fd0a 	bl	8006024 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004616:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004618:	e011      	b.n	800463e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	2b00      	cmp	r3, #0
 8004620:	d012      	beq.n	8004648 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	3324      	adds	r3, #36	; 0x24
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fd3c 	bl	80050a4 <xTaskRemoveFromEventList>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004632:	f000 fe11 	bl	8005258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	3b01      	subs	r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800463e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	dce9      	bgt.n	800461a <prvUnlockQueue+0x16>
 8004646:	e000      	b.n	800464a <prvUnlockQueue+0x46>
					break;
 8004648:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	22ff      	movs	r2, #255	; 0xff
 800464e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004652:	f001 fd17 	bl	8006084 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004656:	f001 fce5 	bl	8006024 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004660:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004662:	e011      	b.n	8004688 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d012      	beq.n	8004692 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3310      	adds	r3, #16
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fd17 	bl	80050a4 <xTaskRemoveFromEventList>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800467c:	f000 fdec 	bl	8005258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004680:	7bbb      	ldrb	r3, [r7, #14]
 8004682:	3b01      	subs	r3, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800468c:	2b00      	cmp	r3, #0
 800468e:	dce9      	bgt.n	8004664 <prvUnlockQueue+0x60>
 8004690:	e000      	b.n	8004694 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004692:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	22ff      	movs	r2, #255	; 0xff
 8004698:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800469c:	f001 fcf2 	bl	8006084 <vPortExitCritical>
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046b0:	f001 fcb8 	bl	8006024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80046bc:	2301      	movs	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	e001      	b.n	80046c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80046c2:	2300      	movs	r3, #0
 80046c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046c6:	f001 fcdd 	bl	8006084 <vPortExitCritical>

	return xReturn;
 80046ca:	68fb      	ldr	r3, [r7, #12]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80046dc:	f001 fca2 	bl	8006024 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d102      	bne.n	80046f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80046ec:	2301      	movs	r3, #1
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	e001      	b.n	80046f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80046f2:	2300      	movs	r3, #0
 80046f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80046f6:	f001 fcc5 	bl	8006084 <vPortExitCritical>

	return xReturn;
 80046fa:	68fb      	ldr	r3, [r7, #12]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]
 8004712:	e014      	b.n	800473e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <vQueueAddToRegistry+0x50>)
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004720:	490c      	ldr	r1, [pc, #48]	; (8004754 <vQueueAddToRegistry+0x50>)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800472a:	4a0a      	ldr	r2, [pc, #40]	; (8004754 <vQueueAddToRegistry+0x50>)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004736:	e006      	b.n	8004746 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b07      	cmp	r3, #7
 8004742:	d9e7      	bls.n	8004714 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	200008dc 	.word	0x200008dc

08004758 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004768:	f001 fc5c 	bl	8006024 <vPortEnterCritical>
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004772:	b25b      	sxtb	r3, r3
 8004774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004778:	d103      	bne.n	8004782 <vQueueWaitForMessageRestricted+0x2a>
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004788:	b25b      	sxtb	r3, r3
 800478a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800478e:	d103      	bne.n	8004798 <vQueueWaitForMessageRestricted+0x40>
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004798:	f001 fc74 	bl	8006084 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d106      	bne.n	80047b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	3324      	adds	r3, #36	; 0x24
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	68b9      	ldr	r1, [r7, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 fc4d 	bl	800504c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80047b2:	6978      	ldr	r0, [r7, #20]
 80047b4:	f7ff ff26 	bl	8004604 <prvUnlockQueue>
	}
 80047b8:	bf00      	nop
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b08e      	sub	sp, #56	; 0x38
 80047c4:	af04      	add	r7, sp, #16
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
 80047cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80047ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <xTaskCreateStatic+0x2a>
	__asm volatile
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	623b      	str	r3, [r7, #32]
}
 80047e6:	bf00      	nop
 80047e8:	e7fe      	b.n	80047e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <xTaskCreateStatic+0x46>
	__asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	61fb      	str	r3, [r7, #28]
}
 8004802:	bf00      	nop
 8004804:	e7fe      	b.n	8004804 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004806:	23b4      	movs	r3, #180	; 0xb4
 8004808:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2bb4      	cmp	r3, #180	; 0xb4
 800480e:	d00a      	beq.n	8004826 <xTaskCreateStatic+0x66>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	61bb      	str	r3, [r7, #24]
}
 8004822:	bf00      	nop
 8004824:	e7fe      	b.n	8004824 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004826:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01e      	beq.n	800486c <xTaskCreateStatic+0xac>
 800482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004830:	2b00      	cmp	r3, #0
 8004832:	d01b      	beq.n	800486c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004836:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800483c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	2202      	movs	r2, #2
 8004842:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004846:	2300      	movs	r3, #0
 8004848:	9303      	str	r3, [sp, #12]
 800484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484c:	9302      	str	r3, [sp, #8]
 800484e:	f107 0314 	add.w	r3, r7, #20
 8004852:	9301      	str	r3, [sp, #4]
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	68b9      	ldr	r1, [r7, #8]
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f850 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004866:	f000 f8eb 	bl	8004a40 <prvAddNewTaskToReadyList>
 800486a:	e001      	b.n	8004870 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004870:	697b      	ldr	r3, [r7, #20]
	}
 8004872:	4618      	mov	r0, r3
 8004874:	3728      	adds	r7, #40	; 0x28
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}

0800487a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800487a:	b580      	push	{r7, lr}
 800487c:	b08c      	sub	sp, #48	; 0x30
 800487e:	af04      	add	r7, sp, #16
 8004880:	60f8      	str	r0, [r7, #12]
 8004882:	60b9      	str	r1, [r7, #8]
 8004884:	603b      	str	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800488a:	88fb      	ldrh	r3, [r7, #6]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4618      	mov	r0, r3
 8004890:	f001 fcea 	bl	8006268 <pvPortMalloc>
 8004894:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800489c:	20b4      	movs	r0, #180	; 0xb4
 800489e:	f001 fce3 	bl	8006268 <pvPortMalloc>
 80048a2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d003      	beq.n	80048b2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	631a      	str	r2, [r3, #48]	; 0x30
 80048b0:	e005      	b.n	80048be <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80048b2:	6978      	ldr	r0, [r7, #20]
 80048b4:	f001 fda4 	bl	8006400 <vPortFree>
 80048b8:	e001      	b.n	80048be <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d017      	beq.n	80048f4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80048cc:	88fa      	ldrh	r2, [r7, #6]
 80048ce:	2300      	movs	r3, #0
 80048d0:	9303      	str	r3, [sp, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	9302      	str	r3, [sp, #8]
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	9301      	str	r3, [sp, #4]
 80048da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048dc:	9300      	str	r3, [sp, #0]
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f80e 	bl	8004904 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80048e8:	69f8      	ldr	r0, [r7, #28]
 80048ea:	f000 f8a9 	bl	8004a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e002      	b.n	80048fa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80048f4:	f04f 33ff 	mov.w	r3, #4294967295
 80048f8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80048fa:	69bb      	ldr	r3, [r7, #24]
	}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800491c:	3b01      	subs	r3, #1
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	f003 0307 	and.w	r3, r3, #7
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <prvInitialiseNewTask+0x48>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	617b      	str	r3, [r7, #20]
}
 8004948:	bf00      	nop
 800494a:	e7fe      	b.n	800494a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01f      	beq.n	8004992 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
 8004956:	e012      	b.n	800497e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	4413      	add	r3, r2
 800495e:	7819      	ldrb	r1, [r3, #0]
 8004960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	3334      	adds	r3, #52	; 0x34
 8004968:	460a      	mov	r2, r1
 800496a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	4413      	add	r3, r2
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d006      	beq.n	8004986 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	3301      	adds	r3, #1
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	2b0f      	cmp	r3, #15
 8004982:	d9e9      	bls.n	8004958 <prvInitialiseNewTask+0x54>
 8004984:	e000      	b.n	8004988 <prvInitialiseNewTask+0x84>
			{
				break;
 8004986:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004990:	e003      	b.n	800499a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	2b06      	cmp	r3, #6
 800499e:	d901      	bls.n	80049a4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80049a0:	2306      	movs	r3, #6
 80049a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80049a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2200      	movs	r2, #0
 80049b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	3304      	adds	r3, #4
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff f984 	bl	8003cc8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	3318      	adds	r3, #24
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7ff f97f 	bl	8003cc8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	f1c3 0207 	rsb	r2, r3, #7
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	2200      	movs	r2, #0
 80049e4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80049e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80049f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f2:	334c      	adds	r3, #76	; 0x4c
 80049f4:	2260      	movs	r2, #96	; 0x60
 80049f6:	2100      	movs	r1, #0
 80049f8:	4618      	mov	r0, r3
 80049fa:	f001 fe53 	bl	80066a4 <memset>
 80049fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a00:	4a0c      	ldr	r2, [pc, #48]	; (8004a34 <prvInitialiseNewTask+0x130>)
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50
 8004a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a06:	4a0c      	ldr	r2, [pc, #48]	; (8004a38 <prvInitialiseNewTask+0x134>)
 8004a08:	655a      	str	r2, [r3, #84]	; 0x54
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	4a0b      	ldr	r2, [pc, #44]	; (8004a3c <prvInitialiseNewTask+0x138>)
 8004a0e:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	68f9      	ldr	r1, [r7, #12]
 8004a14:	69b8      	ldr	r0, [r7, #24]
 8004a16:	f001 f9db 	bl	8005dd0 <pxPortInitialiseStack>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d002      	beq.n	8004a2c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2c:	bf00      	nop
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	080068c8 	.word	0x080068c8
 8004a38:	080068e8 	.word	0x080068e8
 8004a3c:	080068a8 	.word	0x080068a8

08004a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004a48:	f001 faec 	bl	8006024 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	; (8004af8 <prvAddNewTaskToReadyList+0xb8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3301      	adds	r3, #1
 8004a52:	4a29      	ldr	r2, [pc, #164]	; (8004af8 <prvAddNewTaskToReadyList+0xb8>)
 8004a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004a56:	4b29      	ldr	r3, [pc, #164]	; (8004afc <prvAddNewTaskToReadyList+0xbc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d109      	bne.n	8004a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004a5e:	4a27      	ldr	r2, [pc, #156]	; (8004afc <prvAddNewTaskToReadyList+0xbc>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004a64:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <prvAddNewTaskToReadyList+0xb8>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d110      	bne.n	8004a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004a6c:	f000 fc18 	bl	80052a0 <prvInitialiseTaskLists>
 8004a70:	e00d      	b.n	8004a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004a72:	4b23      	ldr	r3, [pc, #140]	; (8004b00 <prvAddNewTaskToReadyList+0xc0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004a7a:	4b20      	ldr	r3, [pc, #128]	; (8004afc <prvAddNewTaskToReadyList+0xbc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d802      	bhi.n	8004a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004a88:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <prvAddNewTaskToReadyList+0xbc>)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004a8e:	4b1d      	ldr	r3, [pc, #116]	; (8004b04 <prvAddNewTaskToReadyList+0xc4>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	4a1b      	ldr	r2, [pc, #108]	; (8004b04 <prvAddNewTaskToReadyList+0xc4>)
 8004a96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	409a      	lsls	r2, r3
 8004aa0:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <prvAddNewTaskToReadyList+0xc8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	4a18      	ldr	r2, [pc, #96]	; (8004b08 <prvAddNewTaskToReadyList+0xc8>)
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <prvAddNewTaskToReadyList+0xcc>)
 8004ab8:	441a      	add	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4619      	mov	r1, r3
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	f7ff f90e 	bl	8003ce2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ac6:	f001 fadd 	bl	8006084 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004aca:	4b0d      	ldr	r3, [pc, #52]	; (8004b00 <prvAddNewTaskToReadyList+0xc0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d00e      	beq.n	8004af0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvAddNewTaskToReadyList+0xbc>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d207      	bcs.n	8004af0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	; (8004b10 <prvAddNewTaskToReadyList+0xd0>)
 8004ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ae6:	601a      	str	r2, [r3, #0]
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000a1c 	.word	0x20000a1c
 8004afc:	2000091c 	.word	0x2000091c
 8004b00:	20000a28 	.word	0x20000a28
 8004b04:	20000a38 	.word	0x20000a38
 8004b08:	20000a24 	.word	0x20000a24
 8004b0c:	20000920 	.word	0x20000920
 8004b10:	e000ed04 	.word	0xe000ed04

08004b14 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d017      	beq.n	8004b56 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004b26:	4b13      	ldr	r3, [pc, #76]	; (8004b74 <vTaskDelay+0x60>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <vTaskDelay+0x30>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	60bb      	str	r3, [r7, #8]
}
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004b44:	f000 f88a 	bl	8004c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fd0e 	bl	800556c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004b50:	f000 f892 	bl	8004c78 <xTaskResumeAll>
 8004b54:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d107      	bne.n	8004b6c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004b5c:	4b06      	ldr	r3, [pc, #24]	; (8004b78 <vTaskDelay+0x64>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004b6c:	bf00      	nop
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	20000a44 	.word	0x20000a44
 8004b78:	e000ed04 	.word	0xe000ed04

08004b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004b8a:	463a      	mov	r2, r7
 8004b8c:	1d39      	adds	r1, r7, #4
 8004b8e:	f107 0308 	add.w	r3, r7, #8
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fc f8dc 	bl	8000d50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004b98:	6839      	ldr	r1, [r7, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	9202      	str	r2, [sp, #8]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	9300      	str	r3, [sp, #0]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	460a      	mov	r2, r1
 8004baa:	4924      	ldr	r1, [pc, #144]	; (8004c3c <vTaskStartScheduler+0xc0>)
 8004bac:	4824      	ldr	r0, [pc, #144]	; (8004c40 <vTaskStartScheduler+0xc4>)
 8004bae:	f7ff fe07 	bl	80047c0 <xTaskCreateStatic>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	4a23      	ldr	r2, [pc, #140]	; (8004c44 <vTaskStartScheduler+0xc8>)
 8004bb6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004bb8:	4b22      	ldr	r3, [pc, #136]	; (8004c44 <vTaskStartScheduler+0xc8>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	617b      	str	r3, [r7, #20]
 8004bc4:	e001      	b.n	8004bca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d102      	bne.n	8004bd6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004bd0:	f000 fd32 	bl	8005638 <xTimerCreateTimerTask>
 8004bd4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d11b      	bne.n	8004c14 <vTaskStartScheduler+0x98>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	613b      	str	r3, [r7, #16]
}
 8004bee:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004bf0:	4b15      	ldr	r3, [pc, #84]	; (8004c48 <vTaskStartScheduler+0xcc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	334c      	adds	r3, #76	; 0x4c
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <vTaskStartScheduler+0xd0>)
 8004bf8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004bfa:	4b15      	ldr	r3, [pc, #84]	; (8004c50 <vTaskStartScheduler+0xd4>)
 8004bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004c00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004c02:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <vTaskStartScheduler+0xd8>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004c08:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <vTaskStartScheduler+0xdc>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004c0e:	f001 f967 	bl	8005ee0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004c12:	e00e      	b.n	8004c32 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c1a:	d10a      	bne.n	8004c32 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60fb      	str	r3, [r7, #12]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vTaskStartScheduler+0xb4>
}
 8004c32:	bf00      	nop
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08006878 	.word	0x08006878
 8004c40:	08005271 	.word	0x08005271
 8004c44:	20000a40 	.word	0x20000a40
 8004c48:	2000091c 	.word	0x2000091c
 8004c4c:	20000010 	.word	0x20000010
 8004c50:	20000a3c 	.word	0x20000a3c
 8004c54:	20000a28 	.word	0x20000a28
 8004c58:	20000a20 	.word	0x20000a20

08004c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <vTaskSuspendAll+0x18>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	3301      	adds	r3, #1
 8004c66:	4a03      	ldr	r2, [pc, #12]	; (8004c74 <vTaskSuspendAll+0x18>)
 8004c68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004c6a:	bf00      	nop
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	20000a44 	.word	0x20000a44

08004c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004c86:	4b41      	ldr	r3, [pc, #260]	; (8004d8c <xTaskResumeAll+0x114>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	603b      	str	r3, [r7, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004ca4:	f001 f9be 	bl	8006024 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004ca8:	4b38      	ldr	r3, [pc, #224]	; (8004d8c <xTaskResumeAll+0x114>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	4a37      	ldr	r2, [pc, #220]	; (8004d8c <xTaskResumeAll+0x114>)
 8004cb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb2:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <xTaskResumeAll+0x114>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d161      	bne.n	8004d7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004cba:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <xTaskResumeAll+0x118>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d05d      	beq.n	8004d7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004cc2:	e02e      	b.n	8004d22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cc4:	4b33      	ldr	r3, [pc, #204]	; (8004d94 <xTaskResumeAll+0x11c>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3318      	adds	r3, #24
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7ff f863 	bl	8003d9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3304      	adds	r3, #4
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7ff f85e 	bl	8003d9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	409a      	lsls	r2, r3
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <xTaskResumeAll+0x120>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <xTaskResumeAll+0x120>)
 8004cf0:	6013      	str	r3, [r2, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	009b      	lsls	r3, r3, #2
 8004cfa:	4413      	add	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4a27      	ldr	r2, [pc, #156]	; (8004d9c <xTaskResumeAll+0x124>)
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3304      	adds	r3, #4
 8004d06:	4619      	mov	r1, r3
 8004d08:	4610      	mov	r0, r2
 8004d0a:	f7fe ffea 	bl	8003ce2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d12:	4b23      	ldr	r3, [pc, #140]	; (8004da0 <xTaskResumeAll+0x128>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004d1c:	4b21      	ldr	r3, [pc, #132]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004d22:	4b1c      	ldr	r3, [pc, #112]	; (8004d94 <xTaskResumeAll+0x11c>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1cc      	bne.n	8004cc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004d30:	f000 fb58 	bl	80053e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004d34:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <xTaskResumeAll+0x130>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d010      	beq.n	8004d62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004d40:	f000 f846 	bl	8004dd0 <xTaskIncrementTick>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004d4a:	4b16      	ldr	r3, [pc, #88]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f1      	bne.n	8004d40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004d5c:	4b12      	ldr	r3, [pc, #72]	; (8004da8 <xTaskResumeAll+0x130>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004d62:	4b10      	ldr	r3, [pc, #64]	; (8004da4 <xTaskResumeAll+0x12c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <xTaskResumeAll+0x134>)
 8004d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004d7e:	f001 f981 	bl	8006084 <vPortExitCritical>

	return xAlreadyYielded;
 8004d82:	68bb      	ldr	r3, [r7, #8]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20000a44 	.word	0x20000a44
 8004d90:	20000a1c 	.word	0x20000a1c
 8004d94:	200009dc 	.word	0x200009dc
 8004d98:	20000a24 	.word	0x20000a24
 8004d9c:	20000920 	.word	0x20000920
 8004da0:	2000091c 	.word	0x2000091c
 8004da4:	20000a30 	.word	0x20000a30
 8004da8:	20000a2c 	.word	0x20000a2c
 8004dac:	e000ed04 	.word	0xe000ed04

08004db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004db0:	b480      	push	{r7}
 8004db2:	b083      	sub	sp, #12
 8004db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004db6:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <xTaskGetTickCount+0x1c>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004dbc:	687b      	ldr	r3, [r7, #4]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	20000a20 	.word	0x20000a20

08004dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b086      	sub	sp, #24
 8004dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dda:	4b4e      	ldr	r3, [pc, #312]	; (8004f14 <xTaskIncrementTick+0x144>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f040 808e 	bne.w	8004f00 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004de4:	4b4c      	ldr	r3, [pc, #304]	; (8004f18 <xTaskIncrementTick+0x148>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3301      	adds	r3, #1
 8004dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004dec:	4a4a      	ldr	r2, [pc, #296]	; (8004f18 <xTaskIncrementTick+0x148>)
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d120      	bne.n	8004e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004df8:	4b48      	ldr	r3, [pc, #288]	; (8004f1c <xTaskIncrementTick+0x14c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8004e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e06:	f383 8811 	msr	BASEPRI, r3
 8004e0a:	f3bf 8f6f 	isb	sy
 8004e0e:	f3bf 8f4f 	dsb	sy
 8004e12:	603b      	str	r3, [r7, #0]
}
 8004e14:	bf00      	nop
 8004e16:	e7fe      	b.n	8004e16 <xTaskIncrementTick+0x46>
 8004e18:	4b40      	ldr	r3, [pc, #256]	; (8004f1c <xTaskIncrementTick+0x14c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	4b40      	ldr	r3, [pc, #256]	; (8004f20 <xTaskIncrementTick+0x150>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a3e      	ldr	r2, [pc, #248]	; (8004f1c <xTaskIncrementTick+0x14c>)
 8004e24:	6013      	str	r3, [r2, #0]
 8004e26:	4a3e      	ldr	r2, [pc, #248]	; (8004f20 <xTaskIncrementTick+0x150>)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6013      	str	r3, [r2, #0]
 8004e2c:	4b3d      	ldr	r3, [pc, #244]	; (8004f24 <xTaskIncrementTick+0x154>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	3301      	adds	r3, #1
 8004e32:	4a3c      	ldr	r2, [pc, #240]	; (8004f24 <xTaskIncrementTick+0x154>)
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	f000 fad5 	bl	80053e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004e3a:	4b3b      	ldr	r3, [pc, #236]	; (8004f28 <xTaskIncrementTick+0x158>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d348      	bcc.n	8004ed6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e44:	4b35      	ldr	r3, [pc, #212]	; (8004f1c <xTaskIncrementTick+0x14c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d104      	bne.n	8004e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <xTaskIncrementTick+0x158>)
 8004e50:	f04f 32ff 	mov.w	r2, #4294967295
 8004e54:	601a      	str	r2, [r3, #0]
					break;
 8004e56:	e03e      	b.n	8004ed6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e58:	4b30      	ldr	r3, [pc, #192]	; (8004f1c <xTaskIncrementTick+0x14c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d203      	bcs.n	8004e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004e70:	4a2d      	ldr	r2, [pc, #180]	; (8004f28 <xTaskIncrementTick+0x158>)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004e76:	e02e      	b.n	8004ed6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe ff8d 	bl	8003d9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d004      	beq.n	8004e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3318      	adds	r3, #24
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fe ff84 	bl	8003d9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	2201      	movs	r2, #1
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	4b23      	ldr	r3, [pc, #140]	; (8004f2c <xTaskIncrementTick+0x15c>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	4a22      	ldr	r2, [pc, #136]	; (8004f2c <xTaskIncrementTick+0x15c>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4a1f      	ldr	r2, [pc, #124]	; (8004f30 <xTaskIncrementTick+0x160>)
 8004eb4:	441a      	add	r2, r3
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4610      	mov	r0, r2
 8004ebe:	f7fe ff10 	bl	8003ce2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	; (8004f34 <xTaskIncrementTick+0x164>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d3b9      	bcc.n	8004e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ed4:	e7b6      	b.n	8004e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ed6:	4b17      	ldr	r3, [pc, #92]	; (8004f34 <xTaskIncrementTick+0x164>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	4914      	ldr	r1, [pc, #80]	; (8004f30 <xTaskIncrementTick+0x160>)
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	440b      	add	r3, r1
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d901      	bls.n	8004ef2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ef2:	4b11      	ldr	r3, [pc, #68]	; (8004f38 <xTaskIncrementTick+0x168>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004efa:	2301      	movs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	e004      	b.n	8004f0a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004f00:	4b0e      	ldr	r3, [pc, #56]	; (8004f3c <xTaskIncrementTick+0x16c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3301      	adds	r3, #1
 8004f06:	4a0d      	ldr	r2, [pc, #52]	; (8004f3c <xTaskIncrementTick+0x16c>)
 8004f08:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004f0a:	697b      	ldr	r3, [r7, #20]
}
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	3718      	adds	r7, #24
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000a44 	.word	0x20000a44
 8004f18:	20000a20 	.word	0x20000a20
 8004f1c:	200009d4 	.word	0x200009d4
 8004f20:	200009d8 	.word	0x200009d8
 8004f24:	20000a34 	.word	0x20000a34
 8004f28:	20000a3c 	.word	0x20000a3c
 8004f2c:	20000a24 	.word	0x20000a24
 8004f30:	20000920 	.word	0x20000920
 8004f34:	2000091c 	.word	0x2000091c
 8004f38:	20000a30 	.word	0x20000a30
 8004f3c:	20000a2c 	.word	0x20000a2c

08004f40 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f46:	4b29      	ldr	r3, [pc, #164]	; (8004fec <vTaskSwitchContext+0xac>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004f4e:	4b28      	ldr	r3, [pc, #160]	; (8004ff0 <vTaskSwitchContext+0xb0>)
 8004f50:	2201      	movs	r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004f54:	e044      	b.n	8004fe0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8004f56:	4b26      	ldr	r3, [pc, #152]	; (8004ff0 <vTaskSwitchContext+0xb0>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5c:	4b25      	ldr	r3, [pc, #148]	; (8004ff4 <vTaskSwitchContext+0xb4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	fab3 f383 	clz	r3, r3
 8004f68:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004f6a:	7afb      	ldrb	r3, [r7, #11]
 8004f6c:	f1c3 031f 	rsb	r3, r3, #31
 8004f70:	617b      	str	r3, [r7, #20]
 8004f72:	4921      	ldr	r1, [pc, #132]	; (8004ff8 <vTaskSwitchContext+0xb8>)
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	440b      	add	r3, r1
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <vTaskSwitchContext+0x5c>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	607b      	str	r3, [r7, #4]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <vTaskSwitchContext+0x5a>
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4a14      	ldr	r2, [pc, #80]	; (8004ff8 <vTaskSwitchContext+0xb8>)
 8004fa8:	4413      	add	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d104      	bne.n	8004fcc <vTaskSwitchContext+0x8c>
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	685a      	ldr	r2, [r3, #4]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	605a      	str	r2, [r3, #4]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	; (8004ffc <vTaskSwitchContext+0xbc>)
 8004fd4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004fd6:	4b09      	ldr	r3, [pc, #36]	; (8004ffc <vTaskSwitchContext+0xbc>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	334c      	adds	r3, #76	; 0x4c
 8004fdc:	4a08      	ldr	r2, [pc, #32]	; (8005000 <vTaskSwitchContext+0xc0>)
 8004fde:	6013      	str	r3, [r2, #0]
}
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	20000a44 	.word	0x20000a44
 8004ff0:	20000a30 	.word	0x20000a30
 8004ff4:	20000a24 	.word	0x20000a24
 8004ff8:	20000920 	.word	0x20000920
 8004ffc:	2000091c 	.word	0x2000091c
 8005000:	20000010 	.word	0x20000010

08005004 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d10a      	bne.n	800502a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005018:	f383 8811 	msr	BASEPRI, r3
 800501c:	f3bf 8f6f 	isb	sy
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	60fb      	str	r3, [r7, #12]
}
 8005026:	bf00      	nop
 8005028:	e7fe      	b.n	8005028 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800502a:	4b07      	ldr	r3, [pc, #28]	; (8005048 <vTaskPlaceOnEventList+0x44>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3318      	adds	r3, #24
 8005030:	4619      	mov	r1, r3
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f7fe fe79 	bl	8003d2a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005038:	2101      	movs	r1, #1
 800503a:	6838      	ldr	r0, [r7, #0]
 800503c:	f000 fa96 	bl	800556c <prvAddCurrentTaskToDelayedList>
}
 8005040:	bf00      	nop
 8005042:	3710      	adds	r7, #16
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	2000091c 	.word	0x2000091c

0800504c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800505e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005062:	f383 8811 	msr	BASEPRI, r3
 8005066:	f3bf 8f6f 	isb	sy
 800506a:	f3bf 8f4f 	dsb	sy
 800506e:	617b      	str	r3, [r7, #20]
}
 8005070:	bf00      	nop
 8005072:	e7fe      	b.n	8005072 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005074:	4b0a      	ldr	r3, [pc, #40]	; (80050a0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3318      	adds	r3, #24
 800507a:	4619      	mov	r1, r3
 800507c:	68f8      	ldr	r0, [r7, #12]
 800507e:	f7fe fe30 	bl	8003ce2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68b8      	ldr	r0, [r7, #8]
 8005092:	f000 fa6b 	bl	800556c <prvAddCurrentTaskToDelayedList>
	}
 8005096:	bf00      	nop
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	2000091c 	.word	0x2000091c

080050a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	60fb      	str	r3, [r7, #12]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	3318      	adds	r3, #24
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fe fe61 	bl	8003d9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050da:	4b1d      	ldr	r3, [pc, #116]	; (8005150 <xTaskRemoveFromEventList+0xac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11c      	bne.n	800511c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	3304      	adds	r3, #4
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fe fe58 	bl	8003d9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	4b17      	ldr	r3, [pc, #92]	; (8005154 <xTaskRemoveFromEventList+0xb0>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	4a16      	ldr	r2, [pc, #88]	; (8005154 <xTaskRemoveFromEventList+0xb0>)
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005102:	4613      	mov	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4a13      	ldr	r2, [pc, #76]	; (8005158 <xTaskRemoveFromEventList+0xb4>)
 800510c:	441a      	add	r2, r3
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4610      	mov	r0, r2
 8005116:	f7fe fde4 	bl	8003ce2 <vListInsertEnd>
 800511a:	e005      	b.n	8005128 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	3318      	adds	r3, #24
 8005120:	4619      	mov	r1, r3
 8005122:	480e      	ldr	r0, [pc, #56]	; (800515c <xTaskRemoveFromEventList+0xb8>)
 8005124:	f7fe fddd 	bl	8003ce2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512c:	4b0c      	ldr	r3, [pc, #48]	; (8005160 <xTaskRemoveFromEventList+0xbc>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005132:	429a      	cmp	r2, r3
 8005134:	d905      	bls.n	8005142 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005136:	2301      	movs	r3, #1
 8005138:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800513a:	4b0a      	ldr	r3, [pc, #40]	; (8005164 <xTaskRemoveFromEventList+0xc0>)
 800513c:	2201      	movs	r2, #1
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e001      	b.n	8005146 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005142:	2300      	movs	r3, #0
 8005144:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005146:	697b      	ldr	r3, [r7, #20]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3718      	adds	r7, #24
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000a44 	.word	0x20000a44
 8005154:	20000a24 	.word	0x20000a24
 8005158:	20000920 	.word	0x20000920
 800515c:	200009dc 	.word	0x200009dc
 8005160:	2000091c 	.word	0x2000091c
 8005164:	20000a30 	.word	0x20000a30

08005168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005170:	4b06      	ldr	r3, [pc, #24]	; (800518c <vTaskInternalSetTimeOutState+0x24>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <vTaskInternalSetTimeOutState+0x28>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	605a      	str	r2, [r3, #4]
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	20000a34 	.word	0x20000a34
 8005190:	20000a20 	.word	0x20000a20

08005194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10a      	bne.n	80051d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60fb      	str	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80051d6:	f000 ff25 	bl	8006024 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80051da:	4b1d      	ldr	r3, [pc, #116]	; (8005250 <xTaskCheckForTimeOut+0xbc>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f2:	d102      	bne.n	80051fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80051f4:	2300      	movs	r3, #0
 80051f6:	61fb      	str	r3, [r7, #28]
 80051f8:	e023      	b.n	8005242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b15      	ldr	r3, [pc, #84]	; (8005254 <xTaskCheckForTimeOut+0xc0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d007      	beq.n	8005216 <xTaskCheckForTimeOut+0x82>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	429a      	cmp	r2, r3
 800520e:	d302      	bcc.n	8005216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	e015      	b.n	8005242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d20b      	bcs.n	8005238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	1ad2      	subs	r2, r2, r3
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff ff9b 	bl	8005168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	e004      	b.n	8005242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005242:	f000 ff1f 	bl	8006084 <vPortExitCritical>

	return xReturn;
 8005246:	69fb      	ldr	r3, [r7, #28]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	20000a20 	.word	0x20000a20
 8005254:	20000a34 	.word	0x20000a34

08005258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800525c:	4b03      	ldr	r3, [pc, #12]	; (800526c <vTaskMissedYield+0x14>)
 800525e:	2201      	movs	r2, #1
 8005260:	601a      	str	r2, [r3, #0]
}
 8005262:	bf00      	nop
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr
 800526c:	20000a30 	.word	0x20000a30

08005270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005278:	f000 f852 	bl	8005320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800527c:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvIdleTask+0x28>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d9f9      	bls.n	8005278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005284:	4b05      	ldr	r3, [pc, #20]	; (800529c <prvIdleTask+0x2c>)
 8005286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005294:	e7f0      	b.n	8005278 <prvIdleTask+0x8>
 8005296:	bf00      	nop
 8005298:	20000920 	.word	0x20000920
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052a6:	2300      	movs	r3, #0
 80052a8:	607b      	str	r3, [r7, #4]
 80052aa:	e00c      	b.n	80052c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <prvInitialiseTaskLists+0x60>)
 80052b8:	4413      	add	r3, r2
 80052ba:	4618      	mov	r0, r3
 80052bc:	f7fe fce4 	bl	8003c88 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3301      	adds	r3, #1
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b06      	cmp	r3, #6
 80052ca:	d9ef      	bls.n	80052ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80052cc:	480d      	ldr	r0, [pc, #52]	; (8005304 <prvInitialiseTaskLists+0x64>)
 80052ce:	f7fe fcdb 	bl	8003c88 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80052d2:	480d      	ldr	r0, [pc, #52]	; (8005308 <prvInitialiseTaskLists+0x68>)
 80052d4:	f7fe fcd8 	bl	8003c88 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80052d8:	480c      	ldr	r0, [pc, #48]	; (800530c <prvInitialiseTaskLists+0x6c>)
 80052da:	f7fe fcd5 	bl	8003c88 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80052de:	480c      	ldr	r0, [pc, #48]	; (8005310 <prvInitialiseTaskLists+0x70>)
 80052e0:	f7fe fcd2 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80052e4:	480b      	ldr	r0, [pc, #44]	; (8005314 <prvInitialiseTaskLists+0x74>)
 80052e6:	f7fe fccf 	bl	8003c88 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80052ea:	4b0b      	ldr	r3, [pc, #44]	; (8005318 <prvInitialiseTaskLists+0x78>)
 80052ec:	4a05      	ldr	r2, [pc, #20]	; (8005304 <prvInitialiseTaskLists+0x64>)
 80052ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <prvInitialiseTaskLists+0x7c>)
 80052f2:	4a05      	ldr	r2, [pc, #20]	; (8005308 <prvInitialiseTaskLists+0x68>)
 80052f4:	601a      	str	r2, [r3, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000920 	.word	0x20000920
 8005304:	200009ac 	.word	0x200009ac
 8005308:	200009c0 	.word	0x200009c0
 800530c:	200009dc 	.word	0x200009dc
 8005310:	200009f0 	.word	0x200009f0
 8005314:	20000a08 	.word	0x20000a08
 8005318:	200009d4 	.word	0x200009d4
 800531c:	200009d8 	.word	0x200009d8

08005320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005326:	e019      	b.n	800535c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005328:	f000 fe7c 	bl	8006024 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800532c:	4b10      	ldr	r3, [pc, #64]	; (8005370 <prvCheckTasksWaitingTermination+0x50>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	3304      	adds	r3, #4
 8005338:	4618      	mov	r0, r3
 800533a:	f7fe fd2f 	bl	8003d9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800533e:	4b0d      	ldr	r3, [pc, #52]	; (8005374 <prvCheckTasksWaitingTermination+0x54>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3b01      	subs	r3, #1
 8005344:	4a0b      	ldr	r2, [pc, #44]	; (8005374 <prvCheckTasksWaitingTermination+0x54>)
 8005346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3b01      	subs	r3, #1
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 8005350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005352:	f000 fe97 	bl	8006084 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f810 	bl	800537c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <prvCheckTasksWaitingTermination+0x58>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e1      	bne.n	8005328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005364:	bf00      	nop
 8005366:	bf00      	nop
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	200009f0 	.word	0x200009f0
 8005374:	20000a1c 	.word	0x20000a1c
 8005378:	20000a04 	.word	0x20000a04

0800537c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	334c      	adds	r3, #76	; 0x4c
 8005388:	4618      	mov	r0, r3
 800538a:	f001 f9a1 	bl	80066d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539c:	4618      	mov	r0, r3
 800539e:	f001 f82f 	bl	8006400 <vPortFree>
				vPortFree( pxTCB );
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 f82c 	bl	8006400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80053a8:	e018      	b.n	80053dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d103      	bne.n	80053bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f001 f823 	bl	8006400 <vPortFree>
	}
 80053ba:	e00f      	b.n	80053dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d00a      	beq.n	80053dc <prvDeleteTCB+0x60>
	__asm volatile
 80053c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ca:	f383 8811 	msr	BASEPRI, r3
 80053ce:	f3bf 8f6f 	isb	sy
 80053d2:	f3bf 8f4f 	dsb	sy
 80053d6:	60fb      	str	r3, [r7, #12]
}
 80053d8:	bf00      	nop
 80053da:	e7fe      	b.n	80053da <prvDeleteTCB+0x5e>
	}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ea:	4b0c      	ldr	r3, [pc, #48]	; (800541c <prvResetNextTaskUnblockTime+0x38>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d104      	bne.n	80053fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053f4:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <prvResetNextTaskUnblockTime+0x3c>)
 80053f6:	f04f 32ff 	mov.w	r2, #4294967295
 80053fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80053fc:	e008      	b.n	8005410 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <prvResetNextTaskUnblockTime+0x38>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	4a04      	ldr	r2, [pc, #16]	; (8005420 <prvResetNextTaskUnblockTime+0x3c>)
 800540e:	6013      	str	r3, [r2, #0]
}
 8005410:	bf00      	nop
 8005412:	370c      	adds	r7, #12
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr
 800541c:	200009d4 	.word	0x200009d4
 8005420:	20000a3c 	.word	0x20000a3c

08005424 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800542a:	4b0b      	ldr	r3, [pc, #44]	; (8005458 <xTaskGetSchedulerState+0x34>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d102      	bne.n	8005438 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005432:	2301      	movs	r3, #1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	e008      	b.n	800544a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005438:	4b08      	ldr	r3, [pc, #32]	; (800545c <xTaskGetSchedulerState+0x38>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d102      	bne.n	8005446 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005440:	2302      	movs	r3, #2
 8005442:	607b      	str	r3, [r7, #4]
 8005444:	e001      	b.n	800544a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005446:	2300      	movs	r3, #0
 8005448:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800544a:	687b      	ldr	r3, [r7, #4]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr
 8005458:	20000a28 	.word	0x20000a28
 800545c:	20000a44 	.word	0x20000a44

08005460 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800546c:	2300      	movs	r3, #0
 800546e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d06e      	beq.n	8005554 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005476:	4b3a      	ldr	r3, [pc, #232]	; (8005560 <xTaskPriorityDisinherit+0x100>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	429a      	cmp	r2, r3
 800547e:	d00a      	beq.n	8005496 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
}
 8005492:	bf00      	nop
 8005494:	e7fe      	b.n	8005494 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800549a:	2b00      	cmp	r3, #0
 800549c:	d10a      	bne.n	80054b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	60bb      	str	r3, [r7, #8]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b8:	1e5a      	subs	r2, r3, #1
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d044      	beq.n	8005554 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d140      	bne.n	8005554 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3304      	adds	r3, #4
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fe fc60 	bl	8003d9c <uxListRemove>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d115      	bne.n	800550e <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e6:	491f      	ldr	r1, [pc, #124]	; (8005564 <xTaskPriorityDisinherit+0x104>)
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	440b      	add	r3, r1
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <xTaskPriorityDisinherit+0xae>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054fc:	2201      	movs	r2, #1
 80054fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005502:	43da      	mvns	r2, r3
 8005504:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xTaskPriorityDisinherit+0x108>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4013      	ands	r3, r2
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <xTaskPriorityDisinherit+0x108>)
 800550c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800551a:	f1c3 0207 	rsb	r2, r3, #7
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	4b0f      	ldr	r3, [pc, #60]	; (8005568 <xTaskPriorityDisinherit+0x108>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	4a0d      	ldr	r2, [pc, #52]	; (8005568 <xTaskPriorityDisinherit+0x108>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a08      	ldr	r2, [pc, #32]	; (8005564 <xTaskPriorityDisinherit+0x104>)
 8005542:	441a      	add	r2, r3
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fbc9 	bl	8003ce2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005550:	2301      	movs	r3, #1
 8005552:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005554:	697b      	ldr	r3, [r7, #20]
	}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	2000091c 	.word	0x2000091c
 8005564:	20000920 	.word	0x20000920
 8005568:	20000a24 	.word	0x20000a24

0800556c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005576:	4b29      	ldr	r3, [pc, #164]	; (800561c <prvAddCurrentTaskToDelayedList+0xb0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800557c:	4b28      	ldr	r3, [pc, #160]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	3304      	adds	r3, #4
 8005582:	4618      	mov	r0, r3
 8005584:	f7fe fc0a 	bl	8003d9c <uxListRemove>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800558e:	4b24      	ldr	r3, [pc, #144]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2201      	movs	r2, #1
 8005596:	fa02 f303 	lsl.w	r3, r2, r3
 800559a:	43da      	mvns	r2, r3
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4013      	ands	r3, r2
 80055a2:	4a20      	ldr	r2, [pc, #128]	; (8005624 <prvAddCurrentTaskToDelayedList+0xb8>)
 80055a4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d10a      	bne.n	80055c4 <prvAddCurrentTaskToDelayedList+0x58>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d007      	beq.n	80055c4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055b4:	4b1a      	ldr	r3, [pc, #104]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4619      	mov	r1, r3
 80055bc:	481a      	ldr	r0, [pc, #104]	; (8005628 <prvAddCurrentTaskToDelayedList+0xbc>)
 80055be:	f7fe fb90 	bl	8003ce2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80055c2:	e026      	b.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4413      	add	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80055cc:	4b14      	ldr	r3, [pc, #80]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d209      	bcs.n	80055f0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055dc:	4b13      	ldr	r3, [pc, #76]	; (800562c <prvAddCurrentTaskToDelayedList+0xc0>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	4b0f      	ldr	r3, [pc, #60]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3304      	adds	r3, #4
 80055e6:	4619      	mov	r1, r3
 80055e8:	4610      	mov	r0, r2
 80055ea:	f7fe fb9e 	bl	8003d2a <vListInsert>
}
 80055ee:	e010      	b.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80055f0:	4b0f      	ldr	r3, [pc, #60]	; (8005630 <prvAddCurrentTaskToDelayedList+0xc4>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3304      	adds	r3, #4
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7fe fb94 	bl	8003d2a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005602:	4b0c      	ldr	r3, [pc, #48]	; (8005634 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68ba      	ldr	r2, [r7, #8]
 8005608:	429a      	cmp	r2, r3
 800560a:	d202      	bcs.n	8005612 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800560c:	4a09      	ldr	r2, [pc, #36]	; (8005634 <prvAddCurrentTaskToDelayedList+0xc8>)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6013      	str	r3, [r2, #0]
}
 8005612:	bf00      	nop
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	20000a20 	.word	0x20000a20
 8005620:	2000091c 	.word	0x2000091c
 8005624:	20000a24 	.word	0x20000a24
 8005628:	20000a08 	.word	0x20000a08
 800562c:	200009d8 	.word	0x200009d8
 8005630:	200009d4 	.word	0x200009d4
 8005634:	20000a3c 	.word	0x20000a3c

08005638 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	; 0x28
 800563c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800563e:	2300      	movs	r3, #0
 8005640:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005642:	f000 fb85 	bl	8005d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005646:	4b1c      	ldr	r3, [pc, #112]	; (80056b8 <xTimerCreateTimerTask+0x80>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d021      	beq.n	8005692 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005652:	2300      	movs	r3, #0
 8005654:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005656:	1d3a      	adds	r2, r7, #4
 8005658:	f107 0108 	add.w	r1, r7, #8
 800565c:	f107 030c 	add.w	r3, r7, #12
 8005660:	4618      	mov	r0, r3
 8005662:	f7fb fb8f 	bl	8000d84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	9202      	str	r2, [sp, #8]
 800566e:	9301      	str	r3, [sp, #4]
 8005670:	2306      	movs	r3, #6
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	460a      	mov	r2, r1
 8005678:	4910      	ldr	r1, [pc, #64]	; (80056bc <xTimerCreateTimerTask+0x84>)
 800567a:	4811      	ldr	r0, [pc, #68]	; (80056c0 <xTimerCreateTimerTask+0x88>)
 800567c:	f7ff f8a0 	bl	80047c0 <xTaskCreateStatic>
 8005680:	4603      	mov	r3, r0
 8005682:	4a10      	ldr	r2, [pc, #64]	; (80056c4 <xTimerCreateTimerTask+0x8c>)
 8005684:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005686:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <xTimerCreateTimerTask+0x8c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800568e:	2301      	movs	r3, #1
 8005690:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	613b      	str	r3, [r7, #16]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80056ae:	697b      	ldr	r3, [r7, #20]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	20000a78 	.word	0x20000a78
 80056bc:	08006880 	.word	0x08006880
 80056c0:	08005931 	.word	0x08005931
 80056c4:	20000a7c 	.word	0x20000a7c

080056c8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b088      	sub	sp, #32
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80056d6:	2028      	movs	r0, #40	; 0x28
 80056d8:	f000 fdc6 	bl	8006268 <pvPortMalloc>
 80056dc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00d      	beq.n	8005700 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	9301      	str	r3, [sp, #4]
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	9300      	str	r3, [sp, #0]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f843 	bl	8005786 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005700:	697b      	ldr	r3, [r7, #20]
	}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}

0800570a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800570a:	b580      	push	{r7, lr}
 800570c:	b08a      	sub	sp, #40	; 0x28
 800570e:	af02      	add	r7, sp, #8
 8005710:	60f8      	str	r0, [r7, #12]
 8005712:	60b9      	str	r1, [r7, #8]
 8005714:	607a      	str	r2, [r7, #4]
 8005716:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005718:	2328      	movs	r3, #40	; 0x28
 800571a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b28      	cmp	r3, #40	; 0x28
 8005720:	d00a      	beq.n	8005738 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61bb      	str	r3, [r7, #24]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005738:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10a      	bne.n	8005756 <xTimerCreateStatic+0x4c>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	617b      	str	r3, [r7, #20]
}
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005758:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005760:	69fb      	ldr	r3, [r7, #28]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	9301      	str	r3, [sp, #4]
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	68f8      	ldr	r0, [r7, #12]
 8005778:	f000 f805 	bl	8005786 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800577c:	69fb      	ldr	r3, [r7, #28]
	}
 800577e:	4618      	mov	r0, r3
 8005780:	3720      	adds	r7, #32
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10a      	bne.n	80057b0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800579a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579e:	f383 8811 	msr	BASEPRI, r3
 80057a2:	f3bf 8f6f 	isb	sy
 80057a6:	f3bf 8f4f 	dsb	sy
 80057aa:	617b      	str	r3, [r7, #20]
}
 80057ac:	bf00      	nop
 80057ae:	e7fe      	b.n	80057ae <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01e      	beq.n	80057f4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80057b6:	f000 facb 	bl	8005d50 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80057c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80057c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c8:	683a      	ldr	r2, [r7, #0]
 80057ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	6a3a      	ldr	r2, [r7, #32]
 80057d0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	3304      	adds	r3, #4
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fe fa76 	bl	8003cc8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80057e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80057e8:	f043 0304 	orr.w	r3, r3, #4
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80057f4:	bf00      	nop
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08a      	sub	sp, #40	; 0x28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]
 8005808:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800580a:	2300      	movs	r3, #0
 800580c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10a      	bne.n	800582a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	623b      	str	r3, [r7, #32]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800582a:	4b1a      	ldr	r3, [pc, #104]	; (8005894 <xTimerGenericCommand+0x98>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d02a      	beq.n	8005888 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b05      	cmp	r3, #5
 8005842:	dc18      	bgt.n	8005876 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005844:	f7ff fdee 	bl	8005424 <xTaskGetSchedulerState>
 8005848:	4603      	mov	r3, r0
 800584a:	2b02      	cmp	r3, #2
 800584c:	d109      	bne.n	8005862 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800584e:	4b11      	ldr	r3, [pc, #68]	; (8005894 <xTimerGenericCommand+0x98>)
 8005850:	6818      	ldr	r0, [r3, #0]
 8005852:	f107 0114 	add.w	r1, r7, #20
 8005856:	2300      	movs	r3, #0
 8005858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800585a:	f7fe fbc9 	bl	8003ff0 <xQueueGenericSend>
 800585e:	6278      	str	r0, [r7, #36]	; 0x24
 8005860:	e012      	b.n	8005888 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005862:	4b0c      	ldr	r3, [pc, #48]	; (8005894 <xTimerGenericCommand+0x98>)
 8005864:	6818      	ldr	r0, [r3, #0]
 8005866:	f107 0114 	add.w	r1, r7, #20
 800586a:	2300      	movs	r3, #0
 800586c:	2200      	movs	r2, #0
 800586e:	f7fe fbbf 	bl	8003ff0 <xQueueGenericSend>
 8005872:	6278      	str	r0, [r7, #36]	; 0x24
 8005874:	e008      	b.n	8005888 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005876:	4b07      	ldr	r3, [pc, #28]	; (8005894 <xTimerGenericCommand+0x98>)
 8005878:	6818      	ldr	r0, [r3, #0]
 800587a:	f107 0114 	add.w	r1, r7, #20
 800587e:	2300      	movs	r3, #0
 8005880:	683a      	ldr	r2, [r7, #0]
 8005882:	f7fe fcb3 	bl	80041ec <xQueueGenericSendFromISR>
 8005886:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800588a:	4618      	mov	r0, r3
 800588c:	3728      	adds	r7, #40	; 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000a78 	.word	0x20000a78

08005898 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b088      	sub	sp, #32
 800589c:	af02      	add	r7, sp, #8
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058a2:	4b22      	ldr	r3, [pc, #136]	; (800592c <prvProcessExpiredTimer+0x94>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3304      	adds	r3, #4
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fe fa73 	bl	8003d9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d022      	beq.n	800590a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	699a      	ldr	r2, [r3, #24]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	18d1      	adds	r1, r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	6978      	ldr	r0, [r7, #20]
 80058d2:	f000 f8d1 	bl	8005a78 <prvInsertTimerInActiveList>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01f      	beq.n	800591c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058dc:	2300      	movs	r3, #0
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	2100      	movs	r1, #0
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff ff88 	bl	80057fc <xTimerGenericCommand>
 80058ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d113      	bne.n	800591c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005910:	f023 0301 	bic.w	r3, r3, #1
 8005914:	b2da      	uxtb	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	6978      	ldr	r0, [r7, #20]
 8005922:	4798      	blx	r3
}
 8005924:	bf00      	nop
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	20000a70 	.word	0x20000a70

08005930 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005938:	f107 0308 	add.w	r3, r7, #8
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f857 	bl	80059f0 <prvGetNextExpireTime>
 8005942:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4619      	mov	r1, r3
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f803 	bl	8005954 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800594e:	f000 f8d5 	bl	8005afc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005952:	e7f1      	b.n	8005938 <prvTimerTask+0x8>

08005954 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800595e:	f7ff f97d 	bl	8004c5c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005962:	f107 0308 	add.w	r3, r7, #8
 8005966:	4618      	mov	r0, r3
 8005968:	f000 f866 	bl	8005a38 <prvSampleTimeNow>
 800596c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d130      	bne.n	80059d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10a      	bne.n	8005990 <prvProcessTimerOrBlockTask+0x3c>
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	429a      	cmp	r2, r3
 8005980:	d806      	bhi.n	8005990 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005982:	f7ff f979 	bl	8004c78 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005986:	68f9      	ldr	r1, [r7, #12]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f7ff ff85 	bl	8005898 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800598e:	e024      	b.n	80059da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d008      	beq.n	80059a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005996:	4b13      	ldr	r3, [pc, #76]	; (80059e4 <prvProcessTimerOrBlockTask+0x90>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <prvProcessTimerOrBlockTask+0x50>
 80059a0:	2301      	movs	r3, #1
 80059a2:	e000      	b.n	80059a6 <prvProcessTimerOrBlockTask+0x52>
 80059a4:	2300      	movs	r3, #0
 80059a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80059a8:	4b0f      	ldr	r3, [pc, #60]	; (80059e8 <prvProcessTimerOrBlockTask+0x94>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	4619      	mov	r1, r3
 80059b6:	f7fe fecf 	bl	8004758 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80059ba:	f7ff f95d 	bl	8004c78 <xTaskResumeAll>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80059c4:	4b09      	ldr	r3, [pc, #36]	; (80059ec <prvProcessTimerOrBlockTask+0x98>)
 80059c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ca:	601a      	str	r2, [r3, #0]
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	f3bf 8f6f 	isb	sy
}
 80059d4:	e001      	b.n	80059da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80059d6:	f7ff f94f 	bl	8004c78 <xTaskResumeAll>
}
 80059da:	bf00      	nop
 80059dc:	3710      	adds	r7, #16
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000a74 	.word	0x20000a74
 80059e8:	20000a78 	.word	0x20000a78
 80059ec:	e000ed04 	.word	0xe000ed04

080059f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059f8:	4b0e      	ldr	r3, [pc, #56]	; (8005a34 <prvGetNextExpireTime+0x44>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d101      	bne.n	8005a06 <prvGetNextExpireTime+0x16>
 8005a02:	2201      	movs	r2, #1
 8005a04:	e000      	b.n	8005a08 <prvGetNextExpireTime+0x18>
 8005a06:	2200      	movs	r2, #0
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a14:	4b07      	ldr	r3, [pc, #28]	; (8005a34 <prvGetNextExpireTime+0x44>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	60fb      	str	r3, [r7, #12]
 8005a1e:	e001      	b.n	8005a24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005a24:	68fb      	ldr	r3, [r7, #12]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000a70 	.word	0x20000a70

08005a38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005a40:	f7ff f9b6 	bl	8004db0 <xTaskGetTickCount>
 8005a44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005a46:	4b0b      	ldr	r3, [pc, #44]	; (8005a74 <prvSampleTimeNow+0x3c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d205      	bcs.n	8005a5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005a50:	f000 f91a 	bl	8005c88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	e002      	b.n	8005a62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <prvSampleTimeNow+0x3c>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005a68:	68fb      	ldr	r3, [r7, #12]
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	20000a80 	.word	0x20000a80

08005a78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b086      	sub	sp, #24
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005a86:	2300      	movs	r3, #0
 8005a88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005a96:	68ba      	ldr	r2, [r7, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d812      	bhi.n	8005ac4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	1ad2      	subs	r2, r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	699b      	ldr	r3, [r3, #24]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d302      	bcc.n	8005ab2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e01b      	b.n	8005aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <prvInsertTimerInActiveList+0x7c>)
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3304      	adds	r3, #4
 8005aba:	4619      	mov	r1, r3
 8005abc:	4610      	mov	r0, r2
 8005abe:	f7fe f934 	bl	8003d2a <vListInsert>
 8005ac2:	e012      	b.n	8005aea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ac4:	687a      	ldr	r2, [r7, #4]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d206      	bcs.n	8005ada <prvInsertTimerInActiveList+0x62>
 8005acc:	68ba      	ldr	r2, [r7, #8]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d302      	bcc.n	8005ada <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	e007      	b.n	8005aea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ada:	4b07      	ldr	r3, [pc, #28]	; (8005af8 <prvInsertTimerInActiveList+0x80>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fe f920 	bl	8003d2a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005aea:	697b      	ldr	r3, [r7, #20]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	20000a74 	.word	0x20000a74
 8005af8:	20000a70 	.word	0x20000a70

08005afc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b08c      	sub	sp, #48	; 0x30
 8005b00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005b02:	e0ae      	b.n	8005c62 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f2c0 80aa 	blt.w	8005c60 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d004      	beq.n	8005b22 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7fe f93d 	bl	8003d9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b22:	1d3b      	adds	r3, r7, #4
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7ff ff87 	bl	8005a38 <prvSampleTimeNow>
 8005b2a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	f200 8097 	bhi.w	8005c62 <prvProcessReceivedCommands+0x166>
 8005b34:	a201      	add	r2, pc, #4	; (adr r2, 8005b3c <prvProcessReceivedCommands+0x40>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b65 	.word	0x08005b65
 8005b48:	08005bd9 	.word	0x08005bd9
 8005b4c:	08005bed 	.word	0x08005bed
 8005b50:	08005c37 	.word	0x08005c37
 8005b54:	08005b65 	.word	0x08005b65
 8005b58:	08005b65 	.word	0x08005b65
 8005b5c:	08005bd9 	.word	0x08005bd9
 8005b60:	08005bed 	.word	0x08005bed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b6a:	f043 0301 	orr.w	r3, r3, #1
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	699b      	ldr	r3, [r3, #24]
 8005b7c:	18d1      	adds	r1, r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6a3a      	ldr	r2, [r7, #32]
 8005b82:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b84:	f7ff ff78 	bl	8005a78 <prvInsertTimerInActiveList>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d069      	beq.n	8005c62 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b9c:	f003 0304 	and.w	r3, r3, #4
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05e      	beq.n	8005c62 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	441a      	add	r2, r3
 8005bac:	2300      	movs	r3, #0
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	2100      	movs	r1, #0
 8005bb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bb6:	f7ff fe21 	bl	80057fc <xTimerGenericCommand>
 8005bba:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d14f      	bne.n	8005c62 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8005bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc6:	f383 8811 	msr	BASEPRI, r3
 8005bca:	f3bf 8f6f 	isb	sy
 8005bce:	f3bf 8f4f 	dsb	sy
 8005bd2:	61bb      	str	r3, [r7, #24]
}
 8005bd4:	bf00      	nop
 8005bd6:	e7fe      	b.n	8005bd6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8005bea:	e03a      	b.n	8005c62 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bf2:	f043 0301 	orr.w	r3, r3, #1
 8005bf6:	b2da      	uxtb	r2, r3
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	617b      	str	r3, [r7, #20]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	699a      	ldr	r2, [r3, #24]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	18d1      	adds	r1, r2, r3
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	6a3a      	ldr	r2, [r7, #32]
 8005c2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c30:	f7ff ff22 	bl	8005a78 <prvInsertTimerInActiveList>
					break;
 8005c34:	e015      	b.n	8005c62 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d103      	bne.n	8005c4c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8005c44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005c46:	f000 fbdb 	bl	8006400 <vPortFree>
 8005c4a:	e00a      	b.n	8005c62 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c52:	f023 0301 	bic.w	r3, r3, #1
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005c5e:	e000      	b.n	8005c62 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005c60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c62:	4b08      	ldr	r3, [pc, #32]	; (8005c84 <prvProcessReceivedCommands+0x188>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f107 0108 	add.w	r1, r7, #8
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fe fb59 	bl	8004324 <xQueueReceive>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	f47f af45 	bne.w	8005b04 <prvProcessReceivedCommands+0x8>
	}
}
 8005c7a:	bf00      	nop
 8005c7c:	bf00      	nop
 8005c7e:	3728      	adds	r7, #40	; 0x28
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	20000a78 	.word	0x20000a78

08005c88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b088      	sub	sp, #32
 8005c8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c8e:	e048      	b.n	8005d22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c90:	4b2d      	ldr	r3, [pc, #180]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68db      	ldr	r3, [r3, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9a:	4b2b      	ldr	r3, [pc, #172]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fe f877 	bl	8003d9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6a1b      	ldr	r3, [r3, #32]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d02e      	beq.n	8005d22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	693a      	ldr	r2, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d90e      	bls.n	8005cf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ce2:	4b19      	ldr	r3, [pc, #100]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	4619      	mov	r1, r3
 8005cec:	4610      	mov	r0, r2
 8005cee:	f7fe f81c 	bl	8003d2a <vListInsert>
 8005cf2:	e016      	b.n	8005d22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f7ff fd7c 	bl	80057fc <xTimerGenericCommand>
 8005d04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d10:	f383 8811 	msr	BASEPRI, r3
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	f3bf 8f4f 	dsb	sy
 8005d1c:	603b      	str	r3, [r7, #0]
}
 8005d1e:	bf00      	nop
 8005d20:	e7fe      	b.n	8005d20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d22:	4b09      	ldr	r3, [pc, #36]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1b1      	bne.n	8005c90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005d2c:	4b06      	ldr	r3, [pc, #24]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005d32:	4b06      	ldr	r3, [pc, #24]	; (8005d4c <prvSwitchTimerLists+0xc4>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a04      	ldr	r2, [pc, #16]	; (8005d48 <prvSwitchTimerLists+0xc0>)
 8005d38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005d3a:	4a04      	ldr	r2, [pc, #16]	; (8005d4c <prvSwitchTimerLists+0xc4>)
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	6013      	str	r3, [r2, #0]
}
 8005d40:	bf00      	nop
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	20000a70 	.word	0x20000a70
 8005d4c:	20000a74 	.word	0x20000a74

08005d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b082      	sub	sp, #8
 8005d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d56:	f000 f965 	bl	8006024 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d5a:	4b15      	ldr	r3, [pc, #84]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d120      	bne.n	8005da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d62:	4814      	ldr	r0, [pc, #80]	; (8005db4 <prvCheckForValidListAndQueue+0x64>)
 8005d64:	f7fd ff90 	bl	8003c88 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d68:	4813      	ldr	r0, [pc, #76]	; (8005db8 <prvCheckForValidListAndQueue+0x68>)
 8005d6a:	f7fd ff8d 	bl	8003c88 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <prvCheckForValidListAndQueue+0x6c>)
 8005d70:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <prvCheckForValidListAndQueue+0x64>)
 8005d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d74:	4b12      	ldr	r3, [pc, #72]	; (8005dc0 <prvCheckForValidListAndQueue+0x70>)
 8005d76:	4a10      	ldr	r2, [pc, #64]	; (8005db8 <prvCheckForValidListAndQueue+0x68>)
 8005d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <prvCheckForValidListAndQueue+0x74>)
 8005d80:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <prvCheckForValidListAndQueue+0x78>)
 8005d82:	210c      	movs	r1, #12
 8005d84:	200a      	movs	r0, #10
 8005d86:	f7fe f89b 	bl	8003ec0 <xQueueGenericCreateStatic>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	4a08      	ldr	r2, [pc, #32]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d90:	4b07      	ldr	r3, [pc, #28]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <prvCheckForValidListAndQueue+0x60>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	490b      	ldr	r1, [pc, #44]	; (8005dcc <prvCheckForValidListAndQueue+0x7c>)
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fe fcb0 	bl	8004704 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005da4:	f000 f96e 	bl	8006084 <vPortExitCritical>
}
 8005da8:	bf00      	nop
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000a78 	.word	0x20000a78
 8005db4:	20000a48 	.word	0x20000a48
 8005db8:	20000a5c 	.word	0x20000a5c
 8005dbc:	20000a70 	.word	0x20000a70
 8005dc0:	20000a74 	.word	0x20000a74
 8005dc4:	20000afc 	.word	0x20000afc
 8005dc8:	20000a84 	.word	0x20000a84
 8005dcc:	08006888 	.word	0x08006888

08005dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3b04      	subs	r3, #4
 8005de0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3b04      	subs	r3, #4
 8005dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f023 0201 	bic.w	r2, r3, #1
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	3b04      	subs	r3, #4
 8005dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e00:	4a0c      	ldr	r2, [pc, #48]	; (8005e34 <pxPortInitialiseStack+0x64>)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	3b14      	subs	r3, #20
 8005e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f06f 0202 	mvn.w	r2, #2
 8005e1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3b20      	subs	r3, #32
 8005e24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3714      	adds	r7, #20
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr
 8005e34:	08005e39 	.word	0x08005e39

08005e38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e42:	4b12      	ldr	r3, [pc, #72]	; (8005e8c <prvTaskExitError+0x54>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d00a      	beq.n	8005e62 <prvTaskExitError+0x2a>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <prvTaskExitError+0x28>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60bb      	str	r3, [r7, #8]
}
 8005e74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e76:	bf00      	nop
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d0fc      	beq.n	8005e78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	2000000c 	.word	0x2000000c

08005e90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <pxCurrentTCBConst2>)
 8005e92:	6819      	ldr	r1, [r3, #0]
 8005e94:	6808      	ldr	r0, [r1, #0]
 8005e96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9a:	f380 8809 	msr	PSP, r0
 8005e9e:	f3bf 8f6f 	isb	sy
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8811 	msr	BASEPRI, r0
 8005eaa:	4770      	bx	lr
 8005eac:	f3af 8000 	nop.w

08005eb0 <pxCurrentTCBConst2>:
 8005eb0:	2000091c 	.word	0x2000091c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop

08005eb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005eb8:	4808      	ldr	r0, [pc, #32]	; (8005edc <prvPortStartFirstTask+0x24>)
 8005eba:	6800      	ldr	r0, [r0, #0]
 8005ebc:	6800      	ldr	r0, [r0, #0]
 8005ebe:	f380 8808 	msr	MSP, r0
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8814 	msr	CONTROL, r0
 8005eca:	b662      	cpsie	i
 8005ecc:	b661      	cpsie	f
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	df00      	svc	0
 8005ed8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005eda:	bf00      	nop
 8005edc:	e000ed08 	.word	0xe000ed08

08005ee0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ee6:	4b46      	ldr	r3, [pc, #280]	; (8006000 <xPortStartScheduler+0x120>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a46      	ldr	r2, [pc, #280]	; (8006004 <xPortStartScheduler+0x124>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d10a      	bne.n	8005f06 <xPortStartScheduler+0x26>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	613b      	str	r3, [r7, #16]
}
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005f06:	4b3e      	ldr	r3, [pc, #248]	; (8006000 <xPortStartScheduler+0x120>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a3f      	ldr	r2, [pc, #252]	; (8006008 <xPortStartScheduler+0x128>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10a      	bne.n	8005f26 <xPortStartScheduler+0x46>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	60fb      	str	r3, [r7, #12]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f26:	4b39      	ldr	r3, [pc, #228]	; (800600c <xPortStartScheduler+0x12c>)
 8005f28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	4b31      	ldr	r3, [pc, #196]	; (8006010 <xPortStartScheduler+0x130>)
 8005f4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f4e:	4b31      	ldr	r3, [pc, #196]	; (8006014 <xPortStartScheduler+0x134>)
 8005f50:	2207      	movs	r2, #7
 8005f52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f54:	e009      	b.n	8005f6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005f56:	4b2f      	ldr	r3, [pc, #188]	; (8006014 <xPortStartScheduler+0x134>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <xPortStartScheduler+0x134>)
 8005f5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f60:	78fb      	ldrb	r3, [r7, #3]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f6a:	78fb      	ldrb	r3, [r7, #3]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f72:	2b80      	cmp	r3, #128	; 0x80
 8005f74:	d0ef      	beq.n	8005f56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f76:	4b27      	ldr	r3, [pc, #156]	; (8006014 <xPortStartScheduler+0x134>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f1c3 0307 	rsb	r3, r3, #7
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d00a      	beq.n	8005f98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60bb      	str	r3, [r7, #8]
}
 8005f94:	bf00      	nop
 8005f96:	e7fe      	b.n	8005f96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f98:	4b1e      	ldr	r3, [pc, #120]	; (8006014 <xPortStartScheduler+0x134>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	021b      	lsls	r3, r3, #8
 8005f9e:	4a1d      	ldr	r2, [pc, #116]	; (8006014 <xPortStartScheduler+0x134>)
 8005fa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005fa2:	4b1c      	ldr	r3, [pc, #112]	; (8006014 <xPortStartScheduler+0x134>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005faa:	4a1a      	ldr	r2, [pc, #104]	; (8006014 <xPortStartScheduler+0x134>)
 8005fac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005fb6:	4b18      	ldr	r3, [pc, #96]	; (8006018 <xPortStartScheduler+0x138>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a17      	ldr	r2, [pc, #92]	; (8006018 <xPortStartScheduler+0x138>)
 8005fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fc2:	4b15      	ldr	r3, [pc, #84]	; (8006018 <xPortStartScheduler+0x138>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a14      	ldr	r2, [pc, #80]	; (8006018 <xPortStartScheduler+0x138>)
 8005fc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fce:	f000 f8dd 	bl	800618c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fd2:	4b12      	ldr	r3, [pc, #72]	; (800601c <xPortStartScheduler+0x13c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fd8:	f000 f8fc 	bl	80061d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fdc:	4b10      	ldr	r3, [pc, #64]	; (8006020 <xPortStartScheduler+0x140>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0f      	ldr	r2, [pc, #60]	; (8006020 <xPortStartScheduler+0x140>)
 8005fe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fe8:	f7ff ff66 	bl	8005eb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fec:	f7fe ffa8 	bl	8004f40 <vTaskSwitchContext>
	prvTaskExitError();
 8005ff0:	f7ff ff22 	bl	8005e38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	e000ed00 	.word	0xe000ed00
 8006004:	410fc271 	.word	0x410fc271
 8006008:	410fc270 	.word	0x410fc270
 800600c:	e000e400 	.word	0xe000e400
 8006010:	20000b44 	.word	0x20000b44
 8006014:	20000b48 	.word	0x20000b48
 8006018:	e000ed20 	.word	0xe000ed20
 800601c:	2000000c 	.word	0x2000000c
 8006020:	e000ef34 	.word	0xe000ef34

08006024 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006024:	b480      	push	{r7}
 8006026:	b083      	sub	sp, #12
 8006028:	af00      	add	r7, sp, #0
	__asm volatile
 800602a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	607b      	str	r3, [r7, #4]
}
 800603c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800603e:	4b0f      	ldr	r3, [pc, #60]	; (800607c <vPortEnterCritical+0x58>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	3301      	adds	r3, #1
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <vPortEnterCritical+0x58>)
 8006046:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006048:	4b0c      	ldr	r3, [pc, #48]	; (800607c <vPortEnterCritical+0x58>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10f      	bne.n	8006070 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006050:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <vPortEnterCritical+0x5c>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	b2db      	uxtb	r3, r3
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00a      	beq.n	8006070 <vPortEnterCritical+0x4c>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	603b      	str	r3, [r7, #0]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vPortEnterCritical+0x4a>
	}
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr
 800607c:	2000000c 	.word	0x2000000c
 8006080:	e000ed04 	.word	0xe000ed04

08006084 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <vPortExitCritical+0x50>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d10a      	bne.n	80060a8 <vPortExitCritical+0x24>
	__asm volatile
 8006092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006096:	f383 8811 	msr	BASEPRI, r3
 800609a:	f3bf 8f6f 	isb	sy
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	607b      	str	r3, [r7, #4]
}
 80060a4:	bf00      	nop
 80060a6:	e7fe      	b.n	80060a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80060a8:	4b0a      	ldr	r3, [pc, #40]	; (80060d4 <vPortExitCritical+0x50>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <vPortExitCritical+0x50>)
 80060b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80060b2:	4b08      	ldr	r3, [pc, #32]	; (80060d4 <vPortExitCritical+0x50>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d105      	bne.n	80060c6 <vPortExitCritical+0x42>
 80060ba:	2300      	movs	r3, #0
 80060bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	f383 8811 	msr	BASEPRI, r3
}
 80060c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060c6:	bf00      	nop
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	2000000c 	.word	0x2000000c
	...

080060e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060e0:	f3ef 8009 	mrs	r0, PSP
 80060e4:	f3bf 8f6f 	isb	sy
 80060e8:	4b15      	ldr	r3, [pc, #84]	; (8006140 <pxCurrentTCBConst>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	f01e 0f10 	tst.w	lr, #16
 80060f0:	bf08      	it	eq
 80060f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	6010      	str	r0, [r2, #0]
 80060fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006100:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006104:	f380 8811 	msr	BASEPRI, r0
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	f3bf 8f6f 	isb	sy
 8006110:	f7fe ff16 	bl	8004f40 <vTaskSwitchContext>
 8006114:	f04f 0000 	mov.w	r0, #0
 8006118:	f380 8811 	msr	BASEPRI, r0
 800611c:	bc09      	pop	{r0, r3}
 800611e:	6819      	ldr	r1, [r3, #0]
 8006120:	6808      	ldr	r0, [r1, #0]
 8006122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006126:	f01e 0f10 	tst.w	lr, #16
 800612a:	bf08      	it	eq
 800612c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006130:	f380 8809 	msr	PSP, r0
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	f3af 8000 	nop.w

08006140 <pxCurrentTCBConst>:
 8006140:	2000091c 	.word	0x2000091c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006144:	bf00      	nop
 8006146:	bf00      	nop

08006148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
	__asm volatile
 800614e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006152:	f383 8811 	msr	BASEPRI, r3
 8006156:	f3bf 8f6f 	isb	sy
 800615a:	f3bf 8f4f 	dsb	sy
 800615e:	607b      	str	r3, [r7, #4]
}
 8006160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006162:	f7fe fe35 	bl	8004dd0 <xTaskIncrementTick>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <SysTick_Handler+0x40>)
 800616e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	2300      	movs	r3, #0
 8006176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	f383 8811 	msr	BASEPRI, r3
}
 800617e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006180:	bf00      	nop
 8006182:	3708      	adds	r7, #8
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}
 8006188:	e000ed04 	.word	0xe000ed04

0800618c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006190:	4b0b      	ldr	r3, [pc, #44]	; (80061c0 <vPortSetupTimerInterrupt+0x34>)
 8006192:	2200      	movs	r2, #0
 8006194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006196:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <vPortSetupTimerInterrupt+0x38>)
 8006198:	2200      	movs	r2, #0
 800619a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800619c:	4b0a      	ldr	r3, [pc, #40]	; (80061c8 <vPortSetupTimerInterrupt+0x3c>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <vPortSetupTimerInterrupt+0x40>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <vPortSetupTimerInterrupt+0x44>)
 80061aa:	3b01      	subs	r3, #1
 80061ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80061ae:	4b04      	ldr	r3, [pc, #16]	; (80061c0 <vPortSetupTimerInterrupt+0x34>)
 80061b0:	2207      	movs	r2, #7
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	e000e010 	.word	0xe000e010
 80061c4:	e000e018 	.word	0xe000e018
 80061c8:	20000000 	.word	0x20000000
 80061cc:	10624dd3 	.word	0x10624dd3
 80061d0:	e000e014 	.word	0xe000e014

080061d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061e4 <vPortEnableVFP+0x10>
 80061d8:	6801      	ldr	r1, [r0, #0]
 80061da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061de:	6001      	str	r1, [r0, #0]
 80061e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061e2:	bf00      	nop
 80061e4:	e000ed88 	.word	0xe000ed88

080061e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061ee:	f3ef 8305 	mrs	r3, IPSR
 80061f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	d914      	bls.n	8006224 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061fa:	4a17      	ldr	r2, [pc, #92]	; (8006258 <vPortValidateInterruptPriority+0x70>)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006204:	4b15      	ldr	r3, [pc, #84]	; (800625c <vPortValidateInterruptPriority+0x74>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	7afa      	ldrb	r2, [r7, #11]
 800620a:	429a      	cmp	r2, r3
 800620c:	d20a      	bcs.n	8006224 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800620e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006212:	f383 8811 	msr	BASEPRI, r3
 8006216:	f3bf 8f6f 	isb	sy
 800621a:	f3bf 8f4f 	dsb	sy
 800621e:	607b      	str	r3, [r7, #4]
}
 8006220:	bf00      	nop
 8006222:	e7fe      	b.n	8006222 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006224:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <vPortValidateInterruptPriority+0x78>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800622c:	4b0d      	ldr	r3, [pc, #52]	; (8006264 <vPortValidateInterruptPriority+0x7c>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d90a      	bls.n	800624a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	603b      	str	r3, [r7, #0]
}
 8006246:	bf00      	nop
 8006248:	e7fe      	b.n	8006248 <vPortValidateInterruptPriority+0x60>
	}
 800624a:	bf00      	nop
 800624c:	3714      	adds	r7, #20
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr
 8006256:	bf00      	nop
 8006258:	e000e3f0 	.word	0xe000e3f0
 800625c:	20000b44 	.word	0x20000b44
 8006260:	e000ed0c 	.word	0xe000ed0c
 8006264:	20000b48 	.word	0x20000b48

08006268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b08a      	sub	sp, #40	; 0x28
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006270:	2300      	movs	r3, #0
 8006272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006274:	f7fe fcf2 	bl	8004c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006278:	4b5b      	ldr	r3, [pc, #364]	; (80063e8 <pvPortMalloc+0x180>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006280:	f000 f920 	bl	80064c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006284:	4b59      	ldr	r3, [pc, #356]	; (80063ec <pvPortMalloc+0x184>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4013      	ands	r3, r2
 800628c:	2b00      	cmp	r3, #0
 800628e:	f040 8093 	bne.w	80063b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01d      	beq.n	80062d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006298:	2208      	movs	r2, #8
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4413      	add	r3, r2
 800629e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d014      	beq.n	80062d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	3308      	adds	r3, #8
 80062b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <pvPortMalloc+0x6c>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	617b      	str	r3, [r7, #20]
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d06e      	beq.n	80063b8 <pvPortMalloc+0x150>
 80062da:	4b45      	ldr	r3, [pc, #276]	; (80063f0 <pvPortMalloc+0x188>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d869      	bhi.n	80063b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062e4:	4b43      	ldr	r3, [pc, #268]	; (80063f4 <pvPortMalloc+0x18c>)
 80062e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062e8:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <pvPortMalloc+0x18c>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ee:	e004      	b.n	80062fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	429a      	cmp	r2, r3
 8006302:	d903      	bls.n	800630c <pvPortMalloc+0xa4>
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1f1      	bne.n	80062f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800630c:	4b36      	ldr	r3, [pc, #216]	; (80063e8 <pvPortMalloc+0x180>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006312:	429a      	cmp	r2, r3
 8006314:	d050      	beq.n	80063b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006316:	6a3b      	ldr	r3, [r7, #32]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2208      	movs	r2, #8
 800631c:	4413      	add	r3, r2
 800631e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	1ad2      	subs	r2, r2, r3
 8006330:	2308      	movs	r3, #8
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	429a      	cmp	r2, r3
 8006336:	d91f      	bls.n	8006378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4413      	add	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f003 0307 	and.w	r3, r3, #7
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <pvPortMalloc+0xf8>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	613b      	str	r3, [r7, #16]
}
 800635c:	bf00      	nop
 800635e:	e7fe      	b.n	800635e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	1ad2      	subs	r2, r2, r3
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800636c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800636e:	687a      	ldr	r2, [r7, #4]
 8006370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006372:	69b8      	ldr	r0, [r7, #24]
 8006374:	f000 f908 	bl	8006588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006378:	4b1d      	ldr	r3, [pc, #116]	; (80063f0 <pvPortMalloc+0x188>)
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	1ad3      	subs	r3, r2, r3
 8006382:	4a1b      	ldr	r2, [pc, #108]	; (80063f0 <pvPortMalloc+0x188>)
 8006384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006386:	4b1a      	ldr	r3, [pc, #104]	; (80063f0 <pvPortMalloc+0x188>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b1b      	ldr	r3, [pc, #108]	; (80063f8 <pvPortMalloc+0x190>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d203      	bcs.n	800639a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006392:	4b17      	ldr	r3, [pc, #92]	; (80063f0 <pvPortMalloc+0x188>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a18      	ldr	r2, [pc, #96]	; (80063f8 <pvPortMalloc+0x190>)
 8006398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	685a      	ldr	r2, [r3, #4]
 800639e:	4b13      	ldr	r3, [pc, #76]	; (80063ec <pvPortMalloc+0x184>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <pvPortMalloc+0x194>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3301      	adds	r3, #1
 80063b4:	4a11      	ldr	r2, [pc, #68]	; (80063fc <pvPortMalloc+0x194>)
 80063b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063b8:	f7fe fc5e 	bl	8004c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0307 	and.w	r3, r3, #7
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d00a      	beq.n	80063dc <pvPortMalloc+0x174>
	__asm volatile
 80063c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	60fb      	str	r3, [r7, #12]
}
 80063d8:	bf00      	nop
 80063da:	e7fe      	b.n	80063da <pvPortMalloc+0x172>
	return pvReturn;
 80063dc:	69fb      	ldr	r3, [r7, #28]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3728      	adds	r7, #40	; 0x28
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20004754 	.word	0x20004754
 80063ec:	20004768 	.word	0x20004768
 80063f0:	20004758 	.word	0x20004758
 80063f4:	2000474c 	.word	0x2000474c
 80063f8:	2000475c 	.word	0x2000475c
 80063fc:	20004760 	.word	0x20004760

08006400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b086      	sub	sp, #24
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d04d      	beq.n	80064ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006412:	2308      	movs	r3, #8
 8006414:	425b      	negs	r3, r3
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4413      	add	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	4b24      	ldr	r3, [pc, #144]	; (80064b8 <vPortFree+0xb8>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10a      	bne.n	8006444 <vPortFree+0x44>
	__asm volatile
 800642e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	60fb      	str	r3, [r7, #12]
}
 8006440:	bf00      	nop
 8006442:	e7fe      	b.n	8006442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <vPortFree+0x62>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	60bb      	str	r3, [r7, #8]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	4b14      	ldr	r3, [pc, #80]	; (80064b8 <vPortFree+0xb8>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	d01e      	beq.n	80064ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	4b0e      	ldr	r3, [pc, #56]	; (80064b8 <vPortFree+0xb8>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	43db      	mvns	r3, r3
 8006482:	401a      	ands	r2, r3
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006488:	f7fe fbe8 	bl	8004c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	685a      	ldr	r2, [r3, #4]
 8006490:	4b0a      	ldr	r3, [pc, #40]	; (80064bc <vPortFree+0xbc>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4413      	add	r3, r2
 8006496:	4a09      	ldr	r2, [pc, #36]	; (80064bc <vPortFree+0xbc>)
 8006498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800649a:	6938      	ldr	r0, [r7, #16]
 800649c:	f000 f874 	bl	8006588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80064a0:	4b07      	ldr	r3, [pc, #28]	; (80064c0 <vPortFree+0xc0>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3301      	adds	r3, #1
 80064a6:	4a06      	ldr	r2, [pc, #24]	; (80064c0 <vPortFree+0xc0>)
 80064a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80064aa:	f7fe fbe5 	bl	8004c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80064ae:	bf00      	nop
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	20004768 	.word	0x20004768
 80064bc:	20004758 	.word	0x20004758
 80064c0:	20004764 	.word	0x20004764

080064c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80064ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064d0:	4b27      	ldr	r3, [pc, #156]	; (8006570 <prvHeapInit+0xac>)
 80064d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f003 0307 	and.w	r3, r3, #7
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d00c      	beq.n	80064f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3307      	adds	r3, #7
 80064e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0307 	bic.w	r3, r3, #7
 80064ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <prvHeapInit+0xac>)
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064fc:	4a1d      	ldr	r2, [pc, #116]	; (8006574 <prvHeapInit+0xb0>)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006502:	4b1c      	ldr	r3, [pc, #112]	; (8006574 <prvHeapInit+0xb0>)
 8006504:	2200      	movs	r2, #0
 8006506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4413      	add	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006510:	2208      	movs	r2, #8
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1a9b      	subs	r3, r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0307 	bic.w	r3, r3, #7
 800651e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4a15      	ldr	r2, [pc, #84]	; (8006578 <prvHeapInit+0xb4>)
 8006524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006526:	4b14      	ldr	r3, [pc, #80]	; (8006578 <prvHeapInit+0xb4>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2200      	movs	r2, #0
 800652c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800652e:	4b12      	ldr	r3, [pc, #72]	; (8006578 <prvHeapInit+0xb4>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	2200      	movs	r2, #0
 8006534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	1ad2      	subs	r2, r2, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006544:	4b0c      	ldr	r3, [pc, #48]	; (8006578 <prvHeapInit+0xb4>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4a0a      	ldr	r2, [pc, #40]	; (800657c <prvHeapInit+0xb8>)
 8006552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	4a09      	ldr	r2, [pc, #36]	; (8006580 <prvHeapInit+0xbc>)
 800655a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800655c:	4b09      	ldr	r3, [pc, #36]	; (8006584 <prvHeapInit+0xc0>)
 800655e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006562:	601a      	str	r2, [r3, #0]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr
 8006570:	20000b4c 	.word	0x20000b4c
 8006574:	2000474c 	.word	0x2000474c
 8006578:	20004754 	.word	0x20004754
 800657c:	2000475c 	.word	0x2000475c
 8006580:	20004758 	.word	0x20004758
 8006584:	20004768 	.word	0x20004768

08006588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <prvInsertBlockIntoFreeList+0xac>)
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	e002      	b.n	800659c <prvInsertBlockIntoFreeList+0x14>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d8f7      	bhi.n	8006596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	4413      	add	r3, r2
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d108      	bne.n	80065ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	441a      	add	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d118      	bne.n	8006610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	4b15      	ldr	r3, [pc, #84]	; (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d00d      	beq.n	8006606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	441a      	add	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	e008      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <prvInsertBlockIntoFreeList+0xb0>)
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	601a      	str	r2, [r3, #0]
 800660e:	e003      	b.n	8006618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	d002      	beq.n	8006626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006626:	bf00      	nop
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	2000474c 	.word	0x2000474c
 8006638:	20004754 	.word	0x20004754

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	; (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	; (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	; (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	; (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f8f2 	bl	8006838 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	08006910 	.word	0x08006910
 8006678:	08006910 	.word	0x08006910
 800667c:	08006910 	.word	0x08006910
 8006680:	08006914 	.word	0x08006914

08006684 <__retarget_lock_acquire_recursive>:
 8006684:	4770      	bx	lr

08006686 <__retarget_lock_release_recursive>:
 8006686:	4770      	bx	lr

08006688 <memcpy>:
 8006688:	440a      	add	r2, r1
 800668a:	4291      	cmp	r1, r2
 800668c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006690:	d100      	bne.n	8006694 <memcpy+0xc>
 8006692:	4770      	bx	lr
 8006694:	b510      	push	{r4, lr}
 8006696:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800669e:	4291      	cmp	r1, r2
 80066a0:	d1f9      	bne.n	8006696 <memcpy+0xe>
 80066a2:	bd10      	pop	{r4, pc}

080066a4 <memset>:
 80066a4:	4402      	add	r2, r0
 80066a6:	4603      	mov	r3, r0
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d100      	bne.n	80066ae <memset+0xa>
 80066ac:	4770      	bx	lr
 80066ae:	f803 1b01 	strb.w	r1, [r3], #1
 80066b2:	e7f9      	b.n	80066a8 <memset+0x4>

080066b4 <cleanup_glue>:
 80066b4:	b538      	push	{r3, r4, r5, lr}
 80066b6:	460c      	mov	r4, r1
 80066b8:	6809      	ldr	r1, [r1, #0]
 80066ba:	4605      	mov	r5, r0
 80066bc:	b109      	cbz	r1, 80066c2 <cleanup_glue+0xe>
 80066be:	f7ff fff9 	bl	80066b4 <cleanup_glue>
 80066c2:	4621      	mov	r1, r4
 80066c4:	4628      	mov	r0, r5
 80066c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ca:	f000 b869 	b.w	80067a0 <_free_r>
	...

080066d0 <_reclaim_reent>:
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <_reclaim_reent+0xb4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4283      	cmp	r3, r0
 80066d6:	b570      	push	{r4, r5, r6, lr}
 80066d8:	4604      	mov	r4, r0
 80066da:	d051      	beq.n	8006780 <_reclaim_reent+0xb0>
 80066dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80066de:	b143      	cbz	r3, 80066f2 <_reclaim_reent+0x22>
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d14a      	bne.n	800677c <_reclaim_reent+0xac>
 80066e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066e8:	6819      	ldr	r1, [r3, #0]
 80066ea:	b111      	cbz	r1, 80066f2 <_reclaim_reent+0x22>
 80066ec:	4620      	mov	r0, r4
 80066ee:	f000 f857 	bl	80067a0 <_free_r>
 80066f2:	6961      	ldr	r1, [r4, #20]
 80066f4:	b111      	cbz	r1, 80066fc <_reclaim_reent+0x2c>
 80066f6:	4620      	mov	r0, r4
 80066f8:	f000 f852 	bl	80067a0 <_free_r>
 80066fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80066fe:	b111      	cbz	r1, 8006706 <_reclaim_reent+0x36>
 8006700:	4620      	mov	r0, r4
 8006702:	f000 f84d 	bl	80067a0 <_free_r>
 8006706:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006708:	b111      	cbz	r1, 8006710 <_reclaim_reent+0x40>
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f848 	bl	80067a0 <_free_r>
 8006710:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006712:	b111      	cbz	r1, 800671a <_reclaim_reent+0x4a>
 8006714:	4620      	mov	r0, r4
 8006716:	f000 f843 	bl	80067a0 <_free_r>
 800671a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800671c:	b111      	cbz	r1, 8006724 <_reclaim_reent+0x54>
 800671e:	4620      	mov	r0, r4
 8006720:	f000 f83e 	bl	80067a0 <_free_r>
 8006724:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006726:	b111      	cbz	r1, 800672e <_reclaim_reent+0x5e>
 8006728:	4620      	mov	r0, r4
 800672a:	f000 f839 	bl	80067a0 <_free_r>
 800672e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006730:	b111      	cbz	r1, 8006738 <_reclaim_reent+0x68>
 8006732:	4620      	mov	r0, r4
 8006734:	f000 f834 	bl	80067a0 <_free_r>
 8006738:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800673a:	b111      	cbz	r1, 8006742 <_reclaim_reent+0x72>
 800673c:	4620      	mov	r0, r4
 800673e:	f000 f82f 	bl	80067a0 <_free_r>
 8006742:	69a3      	ldr	r3, [r4, #24]
 8006744:	b1e3      	cbz	r3, 8006780 <_reclaim_reent+0xb0>
 8006746:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006748:	4620      	mov	r0, r4
 800674a:	4798      	blx	r3
 800674c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800674e:	b1b9      	cbz	r1, 8006780 <_reclaim_reent+0xb0>
 8006750:	4620      	mov	r0, r4
 8006752:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006756:	f7ff bfad 	b.w	80066b4 <cleanup_glue>
 800675a:	5949      	ldr	r1, [r1, r5]
 800675c:	b941      	cbnz	r1, 8006770 <_reclaim_reent+0xa0>
 800675e:	3504      	adds	r5, #4
 8006760:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006762:	2d80      	cmp	r5, #128	; 0x80
 8006764:	68d9      	ldr	r1, [r3, #12]
 8006766:	d1f8      	bne.n	800675a <_reclaim_reent+0x8a>
 8006768:	4620      	mov	r0, r4
 800676a:	f000 f819 	bl	80067a0 <_free_r>
 800676e:	e7ba      	b.n	80066e6 <_reclaim_reent+0x16>
 8006770:	680e      	ldr	r6, [r1, #0]
 8006772:	4620      	mov	r0, r4
 8006774:	f000 f814 	bl	80067a0 <_free_r>
 8006778:	4631      	mov	r1, r6
 800677a:	e7ef      	b.n	800675c <_reclaim_reent+0x8c>
 800677c:	2500      	movs	r5, #0
 800677e:	e7ef      	b.n	8006760 <_reclaim_reent+0x90>
 8006780:	bd70      	pop	{r4, r5, r6, pc}
 8006782:	bf00      	nop
 8006784:	20000010 	.word	0x20000010

08006788 <__malloc_lock>:
 8006788:	4801      	ldr	r0, [pc, #4]	; (8006790 <__malloc_lock+0x8>)
 800678a:	f7ff bf7b 	b.w	8006684 <__retarget_lock_acquire_recursive>
 800678e:	bf00      	nop
 8006790:	2000476c 	.word	0x2000476c

08006794 <__malloc_unlock>:
 8006794:	4801      	ldr	r0, [pc, #4]	; (800679c <__malloc_unlock+0x8>)
 8006796:	f7ff bf76 	b.w	8006686 <__retarget_lock_release_recursive>
 800679a:	bf00      	nop
 800679c:	2000476c 	.word	0x2000476c

080067a0 <_free_r>:
 80067a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80067a2:	2900      	cmp	r1, #0
 80067a4:	d044      	beq.n	8006830 <_free_r+0x90>
 80067a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067aa:	9001      	str	r0, [sp, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f1a1 0404 	sub.w	r4, r1, #4
 80067b2:	bfb8      	it	lt
 80067b4:	18e4      	addlt	r4, r4, r3
 80067b6:	f7ff ffe7 	bl	8006788 <__malloc_lock>
 80067ba:	4a1e      	ldr	r2, [pc, #120]	; (8006834 <_free_r+0x94>)
 80067bc:	9801      	ldr	r0, [sp, #4]
 80067be:	6813      	ldr	r3, [r2, #0]
 80067c0:	b933      	cbnz	r3, 80067d0 <_free_r+0x30>
 80067c2:	6063      	str	r3, [r4, #4]
 80067c4:	6014      	str	r4, [r2, #0]
 80067c6:	b003      	add	sp, #12
 80067c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80067cc:	f7ff bfe2 	b.w	8006794 <__malloc_unlock>
 80067d0:	42a3      	cmp	r3, r4
 80067d2:	d908      	bls.n	80067e6 <_free_r+0x46>
 80067d4:	6825      	ldr	r5, [r4, #0]
 80067d6:	1961      	adds	r1, r4, r5
 80067d8:	428b      	cmp	r3, r1
 80067da:	bf01      	itttt	eq
 80067dc:	6819      	ldreq	r1, [r3, #0]
 80067de:	685b      	ldreq	r3, [r3, #4]
 80067e0:	1949      	addeq	r1, r1, r5
 80067e2:	6021      	streq	r1, [r4, #0]
 80067e4:	e7ed      	b.n	80067c2 <_free_r+0x22>
 80067e6:	461a      	mov	r2, r3
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	b10b      	cbz	r3, 80067f0 <_free_r+0x50>
 80067ec:	42a3      	cmp	r3, r4
 80067ee:	d9fa      	bls.n	80067e6 <_free_r+0x46>
 80067f0:	6811      	ldr	r1, [r2, #0]
 80067f2:	1855      	adds	r5, r2, r1
 80067f4:	42a5      	cmp	r5, r4
 80067f6:	d10b      	bne.n	8006810 <_free_r+0x70>
 80067f8:	6824      	ldr	r4, [r4, #0]
 80067fa:	4421      	add	r1, r4
 80067fc:	1854      	adds	r4, r2, r1
 80067fe:	42a3      	cmp	r3, r4
 8006800:	6011      	str	r1, [r2, #0]
 8006802:	d1e0      	bne.n	80067c6 <_free_r+0x26>
 8006804:	681c      	ldr	r4, [r3, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	6053      	str	r3, [r2, #4]
 800680a:	4421      	add	r1, r4
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	e7da      	b.n	80067c6 <_free_r+0x26>
 8006810:	d902      	bls.n	8006818 <_free_r+0x78>
 8006812:	230c      	movs	r3, #12
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	e7d6      	b.n	80067c6 <_free_r+0x26>
 8006818:	6825      	ldr	r5, [r4, #0]
 800681a:	1961      	adds	r1, r4, r5
 800681c:	428b      	cmp	r3, r1
 800681e:	bf04      	itt	eq
 8006820:	6819      	ldreq	r1, [r3, #0]
 8006822:	685b      	ldreq	r3, [r3, #4]
 8006824:	6063      	str	r3, [r4, #4]
 8006826:	bf04      	itt	eq
 8006828:	1949      	addeq	r1, r1, r5
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	6054      	str	r4, [r2, #4]
 800682e:	e7ca      	b.n	80067c6 <_free_r+0x26>
 8006830:	b003      	add	sp, #12
 8006832:	bd30      	pop	{r4, r5, pc}
 8006834:	20004770 	.word	0x20004770

08006838 <_init>:
 8006838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800683a:	bf00      	nop
 800683c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683e:	bc08      	pop	{r3}
 8006840:	469e      	mov	lr, r3
 8006842:	4770      	bx	lr

08006844 <_fini>:
 8006844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006846:	bf00      	nop
 8006848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800684a:	bc08      	pop	{r3}
 800684c:	469e      	mov	lr, r3
 800684e:	4770      	bx	lr
