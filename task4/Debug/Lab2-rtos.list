
Lab2-rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08009688  08009688  00019688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aec  08009aec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009af4  08009af4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009af8  08009af8  00019af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000428c  200001e0  08009cdc  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000446c  08009cdc  0002446c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017672  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003333  00000000  00000000  00037882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  0003abb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  0003bf18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d2f  00000000  00000000  0003d130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001667a  00000000  00000000  00062e5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e793d  00000000  00000000  000794d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160e16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000626c  00000000  00000000  00160e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800966c 	.word	0x0800966c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800966c 	.word	0x0800966c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <vApplicationGetIdleTaskMemory+0x30>)
 8000fa2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2280      	movs	r2, #128	; 0x80
 8000fa8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	200001fc 	.word	0x200001fc
 8000fbc:	200002b0 	.word	0x200002b0

08000fc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b08e      	sub	sp, #56	; 0x38
 8000fc4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fc6:	f000 fe4d 	bl	8001c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fca:	f000 f847 	bl	800105c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fce:	f000 f9c9 	bl	8001364 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fd2:	f000 f989 	bl	80012e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fd6:	f000 f95d 	bl	8001294 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000fda:	f000 f8ad 	bl	8001138 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000fde:	f000 f90b 	bl	80011f8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 8000fe2:	4817      	ldr	r0, [pc, #92]	; (8001040 <main+0x80>)
 8000fe4:	f002 ffa0 	bl	8003f28 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, buf_temp, 2);
 8000fe8:	2202      	movs	r2, #2
 8000fea:	4916      	ldr	r1, [pc, #88]	; (8001044 <main+0x84>)
 8000fec:	4816      	ldr	r0, [pc, #88]	; (8001048 <main+0x88>)
 8000fee:	f000 febf 	bl	8001d70 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of blink01 */
  osThreadDef(blink01, StartBlink01, osPriorityNormal, 0, 128);
 8000ff2:	4b16      	ldr	r3, [pc, #88]	; (800104c <main+0x8c>)
 8000ff4:	f107 041c 	add.w	r4, r7, #28
 8000ff8:	461d      	mov	r5, r3
 8000ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ffe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001002:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blink01Handle = osThreadCreate(osThread(blink01), NULL);
 8001006:	f107 031c 	add.w	r3, r7, #28
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f004 f956 	bl	80052be <osThreadCreate>
 8001012:	4603      	mov	r3, r0
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <main+0x90>)
 8001016:	6013      	str	r3, [r2, #0]

  /* definition and creation of send_data */
  osThreadDef(send_data, send_data_func, osPriorityNormal, 0, 128);
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <main+0x94>)
 800101a:	463c      	mov	r4, r7
 800101c:	461d      	mov	r5, r3
 800101e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001022:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001026:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  send_dataHandle = osThreadCreate(osThread(send_data), NULL);
 800102a:	463b      	mov	r3, r7
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f004 f945 	bl	80052be <osThreadCreate>
 8001034:	4603      	mov	r3, r0
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <main+0x98>)
 8001038:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800103a:	f004 f939 	bl	80052b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800103e:	e7fe      	b.n	800103e <main+0x7e>
 8001040:	20000560 	.word	0x20000560
 8001044:	200006b4 	.word	0x200006b4
 8001048:	200004b8 	.word	0x200004b8
 800104c:	0800969c 	.word	0x0800969c
 8001050:	200006ac 	.word	0x200006ac
 8001054:	080096b8 	.word	0x080096b8
 8001058:	200006b0 	.word	0x200006b0

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b094      	sub	sp, #80	; 0x50
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 031c 	add.w	r3, r7, #28
 8001066:	2234      	movs	r2, #52	; 0x34
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f005 fcaf 	bl	80069ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	f107 0308 	add.w	r3, r7, #8
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <SystemClock_Config+0xd4>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a29      	ldr	r2, [pc, #164]	; (8001130 <SystemClock_Config+0xd4>)
 800108a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b27      	ldr	r3, [pc, #156]	; (8001130 <SystemClock_Config+0xd4>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800109c:	2300      	movs	r3, #0
 800109e:	603b      	str	r3, [r7, #0]
 80010a0:	4b24      	ldr	r3, [pc, #144]	; (8001134 <SystemClock_Config+0xd8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010a8:	4a22      	ldr	r2, [pc, #136]	; (8001134 <SystemClock_Config+0xd8>)
 80010aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ae:	6013      	str	r3, [r2, #0]
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <SystemClock_Config+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c0:	2301      	movs	r3, #1
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010c4:	2310      	movs	r3, #16
 80010c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010c8:	2302      	movs	r3, #2
 80010ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010cc:	2300      	movs	r3, #0
 80010ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d0:	2310      	movs	r3, #16
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010da:	2304      	movs	r3, #4
 80010dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010de:	2302      	movs	r3, #2
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4618      	mov	r0, r3
 80010ec:	f002 fc2e 	bl	800394c <HAL_RCC_OscConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010f6:	f000 fa8f 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
 80010fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fe:	2302      	movs	r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800110a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	2102      	movs	r1, #2
 8001116:	4618      	mov	r0, r3
 8001118:	f002 f89c 	bl	8003254 <HAL_RCC_ClockConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001122:	f000 fa79 	bl	8001618 <Error_Handler>
  }
}
 8001126:	bf00      	nop
 8001128:	3750      	adds	r7, #80	; 0x50
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40007000 	.word	0x40007000

08001138 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800113e:	463b      	mov	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114a:	4b27      	ldr	r3, [pc, #156]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800114c:	4a27      	ldr	r2, [pc, #156]	; (80011ec <MX_ADC1_Init+0xb4>)
 800114e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001150:	4b25      	ldr	r3, [pc, #148]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001152:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001158:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800115e:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001160:	2201      	movs	r2, #1
 8001162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001164:	4b20      	ldr	r3, [pc, #128]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001166:	2201      	movs	r2, #1
 8001168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001172:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800117a:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <MX_ADC1_Init+0xb8>)
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001186:	2202      	movs	r2, #2
 8001188:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800118a:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_ADC1_Init+0xb0>)
 8001194:	2201      	movs	r2, #1
 8001196:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001198:	4813      	ldr	r0, [pc, #76]	; (80011e8 <MX_ADC1_Init+0xb0>)
 800119a:	f000 fda5 	bl	8001ce8 <HAL_ADC_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011a4:	f000 fa38 	bl	8001618 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80011a8:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_ADC1_Init+0xbc>)
 80011aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80011b0:	2307      	movs	r3, #7
 80011b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b4:	463b      	mov	r3, r7
 80011b6:	4619      	mov	r1, r3
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MX_ADC1_Init+0xb0>)
 80011ba:	f000 ff07 	bl	8001fcc <HAL_ADC_ConfigChannel>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011c4:	f000 fa28 	bl	8001618 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80011c8:	2302      	movs	r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011cc:	463b      	mov	r3, r7
 80011ce:	4619      	mov	r1, r3
 80011d0:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_ADC1_Init+0xb0>)
 80011d2:	f000 fefb 	bl	8001fcc <HAL_ADC_ConfigChannel>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80011dc:	f000 fa1c 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200004b8 	.word	0x200004b8
 80011ec:	40012000 	.word	0x40012000
 80011f0:	0f000001 	.word	0x0f000001
 80011f4:	10000012 	.word	0x10000012

080011f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b086      	sub	sp, #24
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	605a      	str	r2, [r3, #4]
 8001208:	609a      	str	r2, [r3, #8]
 800120a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	463b      	mov	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <MX_TIM2_Init+0x98>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <MX_TIM2_Init+0x98>)
 800121e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_TIM2_Init+0x98>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_TIM2_Init+0x98>)
 800122c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_TIM2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <MX_TIM2_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	4814      	ldr	r0, [pc, #80]	; (8001290 <MX_TIM2_Init+0x98>)
 8001240:	f002 fe22 	bl	8003e88 <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800124a:	f000 f9e5 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	4619      	mov	r1, r3
 800125a:	480d      	ldr	r0, [pc, #52]	; (8001290 <MX_TIM2_Init+0x98>)
 800125c:	f002 ffdc 	bl	8004218 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001266:	f000 f9d7 	bl	8001618 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4806      	ldr	r0, [pc, #24]	; (8001290 <MX_TIM2_Init+0x98>)
 8001278:	f003 f9f8 	bl	800466c <HAL_TIMEx_MasterConfigSynchronization>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001282:	f000 f9c9 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000560 	.word	0x20000560

08001294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 800129a:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <MX_USART2_UART_Init+0x50>)
 800129c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800129e:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012b2:	4b0b      	ldr	r3, [pc, #44]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012ba:	220c      	movs	r2, #12
 80012bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012be:	4b08      	ldr	r3, [pc, #32]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012ca:	4805      	ldr	r0, [pc, #20]	; (80012e0 <MX_USART2_UART_Init+0x4c>)
 80012cc:	f003 fa5e 	bl	800478c <HAL_UART_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80012d6:	f000 f99f 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200005a8 	.word	0x200005a8
 80012e4:	40004400 	.word	0x40004400

080012e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_DMA_Init+0x78>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a1a      	ldr	r2, [pc, #104]	; (8001360 <MX_DMA_Init+0x78>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_DMA_Init+0x78>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	603b      	str	r3, [r7, #0]
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_DMA_Init+0x78>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a13      	ldr	r2, [pc, #76]	; (8001360 <MX_DMA_Init+0x78>)
 8001314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_DMA_Init+0x78>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001322:	603b      	str	r3, [r7, #0]
 8001324:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	2010      	movs	r0, #16
 800132c:	f001 f9b6 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001330:	2010      	movs	r0, #16
 8001332:	f001 f9cf 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2011      	movs	r0, #17
 800133c:	f001 f9ae 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001340:	2011      	movs	r0, #17
 8001342:	f001 f9c7 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2105      	movs	r1, #5
 800134a:	2038      	movs	r0, #56	; 0x38
 800134c:	f001 f9a6 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001350:	2038      	movs	r0, #56	; 0x38
 8001352:	f001 f9bf 	bl	80026d4 <HAL_NVIC_EnableIRQ>

}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800

08001364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
 800137e:	4b31      	ldr	r3, [pc, #196]	; (8001444 <MX_GPIO_Init+0xe0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a30      	ldr	r2, [pc, #192]	; (8001444 <MX_GPIO_Init+0xe0>)
 8001384:	f043 0304 	orr.w	r3, r3, #4
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b2e      	ldr	r3, [pc, #184]	; (8001444 <MX_GPIO_Init+0xe0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0304 	and.w	r3, r3, #4
 8001392:	613b      	str	r3, [r7, #16]
 8001394:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	4b2a      	ldr	r3, [pc, #168]	; (8001444 <MX_GPIO_Init+0xe0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	4a29      	ldr	r2, [pc, #164]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a4:	6313      	str	r3, [r2, #48]	; 0x30
 80013a6:	4b27      	ldr	r3, [pc, #156]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	4a22      	ldr	r2, [pc, #136]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	6313      	str	r3, [r2, #48]	; 0x30
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a1b      	ldr	r2, [pc, #108]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013d8:	f043 0302 	orr.w	r3, r3, #2
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2120      	movs	r1, #32
 80013ee:	4816      	ldr	r0, [pc, #88]	; (8001448 <MX_GPIO_Init+0xe4>)
 80013f0:	f001 fefe 	bl	80031f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4619      	mov	r1, r3
 800140a:	4810      	ldr	r0, [pc, #64]	; (800144c <MX_GPIO_Init+0xe8>)
 800140c:	f001 fd5c 	bl	8002ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001410:	2320      	movs	r3, #32
 8001412:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	4619      	mov	r1, r3
 8001426:	4808      	ldr	r0, [pc, #32]	; (8001448 <MX_GPIO_Init+0xe4>)
 8001428:	f001 fd4e 	bl	8002ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	2105      	movs	r1, #5
 8001430:	2028      	movs	r0, #40	; 0x28
 8001432:	f001 f933 	bl	800269c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001436:	2028      	movs	r0, #40	; 0x28
 8001438:	f001 f94c 	bl	80026d4 <HAL_NVIC_EnableIRQ>

}
 800143c:	bf00      	nop
 800143e:	3728      	adds	r7, #40	; 0x28
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40023800 	.word	0x40023800
 8001448:	40020000 	.word	0x40020000
 800144c:	40020800 	.word	0x40020800

08001450 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
	//if callback was called by gpio pin corresponding to button varaible state will change
  if(GPIO_Pin == B1_Pin) {
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001460:	d102      	bne.n	8001468 <HAL_GPIO_EXTI_Callback+0x18>
	  button_pressed = 1;
 8001462:	4b04      	ldr	r3, [pc, #16]	; (8001474 <HAL_GPIO_EXTI_Callback+0x24>)
 8001464:	2201      	movs	r2, #1
 8001466:	701a      	strb	r2, [r3, #0]

  }
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	200004b0 	.word	0x200004b0

08001478 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void const * argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	  //it can be easilly checked by touching microcontroller with finger to heat it up.
	  // value of temperature is get and calculated in the hardware timer IRQ
	  //HAL_ADC_PollForConversion(&hadc1, 1);
	 	  //uint16_t raw = HAL_ADC_GetValue(&hadc1);
	 	  //HAL_ADC_Stop(&hadc1);
	 float vsense = (3.3 * buf_temp[0] )/4095;
 8001480:	4b35      	ldr	r3, [pc, #212]	; (8001558 <StartBlink01+0xe0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f86d 	bl	8000564 <__aeabi_i2d>
 800148a:	a32b      	add	r3, pc, #172	; (adr r3, 8001538 <StartBlink01+0xc0>)
 800148c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001490:	f7ff f8d2 	bl	8000638 <__aeabi_dmul>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	4610      	mov	r0, r2
 800149a:	4619      	mov	r1, r3
 800149c:	a328      	add	r3, pc, #160	; (adr r3, 8001540 <StartBlink01+0xc8>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff f9f3 	bl	800088c <__aeabi_ddiv>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	f7ff fb9b 	bl	8000be8 <__aeabi_d2f>
 80014b2:	4603      	mov	r3, r0
 80014b4:	60fb      	str	r3, [r7, #12]
	 	  temperature = ((vsense) - 0.76)/(0.0025) + 25;
 80014b6:	68f8      	ldr	r0, [r7, #12]
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a322      	add	r3, pc, #136	; (adr r3, 8001548 <StartBlink01+0xd0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7fe ff01 	bl	80002c8 <__aeabi_dsub>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	a320      	add	r3, pc, #128	; (adr r3, 8001550 <StartBlink01+0xd8>)
 80014d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d4:	f7ff f9da 	bl	800088c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	4b1d      	ldr	r3, [pc, #116]	; (800155c <StartBlink01+0xe4>)
 80014e6:	f7fe fef1 	bl	80002cc <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	4610      	mov	r0, r2
 80014f0:	4619      	mov	r1, r3
 80014f2:	f7ff fb79 	bl	8000be8 <__aeabi_d2f>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <StartBlink01+0xe8>)
 80014fa:	6013      	str	r3, [r2, #0]

	  if(temperature > 22.0)
 80014fc:	4b18      	ldr	r3, [pc, #96]	; (8001560 <StartBlink01+0xe8>)
 80014fe:	edd3 7a00 	vldr	s15, [r3]
 8001502:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8001506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	dd05      	ble.n	800151c <StartBlink01+0xa4>
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2120      	movs	r1, #32
 8001514:	4813      	ldr	r0, [pc, #76]	; (8001564 <StartBlink01+0xec>)
 8001516:	f001 fe6b 	bl	80031f0 <HAL_GPIO_WritePin>
 800151a:	e004      	b.n	8001526 <StartBlink01+0xae>
	  else
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin,GPIO_PIN_RESET);
 800151c:	2200      	movs	r2, #0
 800151e:	2120      	movs	r1, #32
 8001520:	4810      	ldr	r0, [pc, #64]	; (8001564 <StartBlink01+0xec>)
 8001522:	f001 fe65 	bl	80031f0 <HAL_GPIO_WritePin>
	  // calculate period in loop to adjust when varaible blink_freq is changed.
	  //period = 1000/(blink_freq*2);
	  //toggle LED
float test = temperature;
 8001526:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <StartBlink01+0xe8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	60bb      	str	r3, [r7, #8]
	  // delay for rtos - when to call function next time. It does not block running of uC.
	  osDelay(1000);
 800152c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001530:	f003 ff11 	bl	8005356 <osDelay>
  {
 8001534:	e7a4      	b.n	8001480 <StartBlink01+0x8>
 8001536:	bf00      	nop
 8001538:	66666666 	.word	0x66666666
 800153c:	400a6666 	.word	0x400a6666
 8001540:	00000000 	.word	0x00000000
 8001544:	40affe00 	.word	0x40affe00
 8001548:	851eb852 	.word	0x851eb852
 800154c:	3fe851eb 	.word	0x3fe851eb
 8001550:	47ae147b 	.word	0x47ae147b
 8001554:	3f647ae1 	.word	0x3f647ae1
 8001558:	200006b4 	.word	0x200006b4
 800155c:	40390000 	.word	0x40390000
 8001560:	200004b4 	.word	0x200004b4
 8001564:	40020000 	.word	0x40020000

08001568 <send_data_func>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_send_data_func */
void send_data_func(void const * argument)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b09e      	sub	sp, #120	; 0x78
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN send_data_func */
  /* Infinite loop */
	float temp_temperature=0;
 8001570:	f04f 0300 	mov.w	r3, #0
 8001574:	677b      	str	r3, [r7, #116]	; 0x74

	static uint16_t cnt = 0; // Licznik wyslanych wiadomosci
	 uint8_t data[100];// Tablica przechowujaca wysylana wiadomosc.
	 uint16_t size = 0; // Rozmiar wysylanej wiadomosci ++cnt; // Zwiekszenie licznika wyslanych wiadomosci.
 8001576:	2300      	movs	r3, #0
 8001578:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72



  for(;;)
  {
	  HAL_UART_Abort(&huart2);
 800157c:	481a      	ldr	r0, [pc, #104]	; (80015e8 <send_data_func+0x80>)
 800157e:	f003 f9d1 	bl	8004924 <HAL_UART_Abort>
	  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001582:	4819      	ldr	r0, [pc, #100]	; (80015e8 <send_data_func+0x80>)
 8001584:	f003 f902 	bl	800478c <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <send_data_func+0x2a>
	  {
	    Error_Handler();
 800158e:	f000 f843 	bl	8001618 <Error_Handler>
	  }
	  if(temperature!=0){
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <send_data_func+0x84>)
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	eef5 7a40 	vcmp.f32	s15, #0.0
 800159c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a0:	d01d      	beq.n	80015de <send_data_func+0x76>
	   temp_temperature = temperature;
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <send_data_func+0x84>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	677b      	str	r3, [r7, #116]	; 0x74
	   //DMA1->HIFCR = DMA_HIFCR_CTCIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CFEIF6; // clear DMA flags

	  //data[0]=temp_temperature;
	  uint16_t tere = temp_temperature;
 80015a8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80015ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b0:	ee17 3a90 	vmov	r3, s15
 80015b4:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	 	 size = sprintf(data, "Temperatura %d \n\r", tere); // Stworzenie wiadomosci do wyslania oraz przypisanie ilosci wysylanych znakow do zmiennej size.
 80015b8:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	490b      	ldr	r1, [pc, #44]	; (80015f0 <send_data_func+0x88>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 ff84 	bl	80074d0 <siprintf>
 80015c8:	4603      	mov	r3, r0
 80015ca:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	 	//HAL_UART_Transmit_IT(&huart2, data, size); // Rozpoczecie nadawania danych z wykorzystaniem przerwan



	 		HAL_UART_Transmit_DMA(&huart2, data, size); // Ro
 80015ce:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4803      	ldr	r0, [pc, #12]	; (80015e8 <send_data_func+0x80>)
 80015da:	f003 f925 	bl	8004828 <HAL_UART_Transmit_DMA>
	 		//HAL_UART_Transmit_DMA(&huart2, data[0], 1); // Ro
	 	  //HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Zmiana stanu pinu na diodzie LED
	  }
    osDelay(2000);
 80015de:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015e2:	f003 feb8 	bl	8005356 <osDelay>
	  HAL_UART_Abort(&huart2);
 80015e6:	e7c9      	b.n	800157c <send_data_func+0x14>
 80015e8:	200005a8 	.word	0x200005a8
 80015ec:	200004b4 	.word	0x200004b4
 80015f0:	080096d4 	.word	0x080096d4

080015f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d101      	bne.n	800160a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001606:	f000 fb4f 	bl	8001ca8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40010000 	.word	0x40010000

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_MspInit+0x54>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a11      	ldr	r2, [pc, #68]	; (8001678 <HAL_MspInit+0x54>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <HAL_MspInit+0x54>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <HAL_MspInit+0x54>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a0a      	ldr	r2, [pc, #40]	; (8001678 <HAL_MspInit+0x54>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b08      	ldr	r3, [pc, #32]	; (8001678 <HAL_MspInit+0x54>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	210f      	movs	r1, #15
 8001666:	f06f 0001 	mvn.w	r0, #1
 800166a:	f001 f817 	bl	800269c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_ADC_MspInit+0x98>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d13e      	bne.n	800170c <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <HAL_ADC_MspInit+0x9c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a20      	ldr	r2, [pc, #128]	; (8001718 <HAL_ADC_MspInit+0x9c>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <HAL_ADC_MspInit+0x9c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	60fb      	str	r3, [r7, #12]
 80016a8:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_ADC_MspInit+0xa4>)
 80016ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b6:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80016bc:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016be:	2200      	movs	r2, #0
 80016c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80016c2:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016e4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016e8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016f0:	480a      	ldr	r0, [pc, #40]	; (800171c <HAL_ADC_MspInit+0xa0>)
 80016f2:	f000 fffd 	bl	80026f0 <HAL_DMA_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <HAL_ADC_MspInit+0x84>
    {
      Error_Handler();
 80016fc:	f7ff ff8c 	bl	8001618 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a06      	ldr	r2, [pc, #24]	; (800171c <HAL_ADC_MspInit+0xa0>)
 8001704:	639a      	str	r2, [r3, #56]	; 0x38
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_ADC_MspInit+0xa0>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800170c:	bf00      	nop
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40012000 	.word	0x40012000
 8001718:	40023800 	.word	0x40023800
 800171c:	20000500 	.word	0x20000500
 8001720:	40026410 	.word	0x40026410

08001724 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001734:	d115      	bne.n	8001762 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b0c      	ldr	r3, [pc, #48]	; (800176c <HAL_TIM_Base_MspInit+0x48>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_TIM_Base_MspInit+0x48>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_TIM_Base_MspInit+0x48>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	201c      	movs	r0, #28
 8001758:	f000 ffa0 	bl	800269c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 ffb9 	bl	80026d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40023800 	.word	0x40023800

08001770 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b08a      	sub	sp, #40	; 0x28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001778:	f107 0314 	add.w	r3, r7, #20
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_UART_MspInit+0x150>)
 800178e:	4293      	cmp	r3, r2
 8001790:	f040 8092 	bne.w	80018b8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001794:	2300      	movs	r3, #0
 8001796:	613b      	str	r3, [r7, #16]
 8001798:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_UART_MspInit+0x154>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179c:	4a49      	ldr	r2, [pc, #292]	; (80018c4 <HAL_UART_MspInit+0x154>)
 800179e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a2:	6413      	str	r3, [r2, #64]	; 0x40
 80017a4:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_UART_MspInit+0x154>)
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b43      	ldr	r3, [pc, #268]	; (80018c4 <HAL_UART_MspInit+0x154>)
 80017b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b8:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <HAL_UART_MspInit+0x154>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6313      	str	r3, [r2, #48]	; 0x30
 80017c0:	4b40      	ldr	r3, [pc, #256]	; (80018c4 <HAL_UART_MspInit+0x154>)
 80017c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017cc:	230c      	movs	r3, #12
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017dc:	2307      	movs	r3, #7
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	4838      	ldr	r0, [pc, #224]	; (80018c8 <HAL_UART_MspInit+0x158>)
 80017e8:	f001 fb6e 	bl	8002ec8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <HAL_UART_MspInit+0x15c>)
 80017ee:	4a38      	ldr	r2, [pc, #224]	; (80018d0 <HAL_UART_MspInit+0x160>)
 80017f0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80017f2:	4b36      	ldr	r3, [pc, #216]	; (80018cc <HAL_UART_MspInit+0x15c>)
 80017f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HAL_UART_MspInit+0x15c>)
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001800:	4b32      	ldr	r3, [pc, #200]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800180c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001810:	2200      	movs	r2, #0
 8001812:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001814:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001816:	2200      	movs	r2, #0
 8001818:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800181a:	4b2c      	ldr	r3, [pc, #176]	; (80018cc <HAL_UART_MspInit+0x15c>)
 800181c:	2200      	movs	r2, #0
 800181e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001820:	4b2a      	ldr	r3, [pc, #168]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001826:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001828:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HAL_UART_MspInit+0x15c>)
 800182a:	2204      	movs	r2, #4
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001830:	2203      	movs	r2, #3
 8001832:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001834:	4b25      	ldr	r3, [pc, #148]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001836:	2200      	movs	r2, #0
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_UART_MspInit+0x15c>)
 800183c:	2200      	movs	r2, #0
 800183e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001840:	4822      	ldr	r0, [pc, #136]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001842:	f000 ff55 	bl	80026f0 <HAL_DMA_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 800184c:	f7ff fee4 	bl	8001618 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_UART_MspInit+0x15c>)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800185c:	4b1d      	ldr	r3, [pc, #116]	; (80018d4 <HAL_UART_MspInit+0x164>)
 800185e:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_UART_MspInit+0x168>)
 8001860:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001864:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001868:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186a:	4b1a      	ldr	r3, [pc, #104]	; (80018d4 <HAL_UART_MspInit+0x164>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001878:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800187c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001880:	2200      	movs	r2, #0
 8001882:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001886:	2200      	movs	r2, #0
 8001888:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800188a:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <HAL_UART_MspInit+0x164>)
 800188c:	2200      	movs	r2, #0
 800188e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <HAL_UART_MspInit+0x164>)
 8001898:	2200      	movs	r2, #0
 800189a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <HAL_UART_MspInit+0x164>)
 800189e:	f000 ff27 	bl	80026f0 <HAL_DMA_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 80018a8:	f7ff feb6 	bl	8001618 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a09      	ldr	r2, [pc, #36]	; (80018d4 <HAL_UART_MspInit+0x164>)
 80018b0:	639a      	str	r2, [r3, #56]	; 0x38
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_UART_MspInit+0x164>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3728      	adds	r7, #40	; 0x28
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	200005ec 	.word	0x200005ec
 80018d0:	400260a0 	.word	0x400260a0
 80018d4:	2000064c 	.word	0x2000064c
 80018d8:	40026088 	.word	0x40026088

080018dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b2e      	ldr	r3, [pc, #184]	; (80019ac <HAL_InitTick+0xd0>)
 80018f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f4:	4a2d      	ldr	r2, [pc, #180]	; (80019ac <HAL_InitTick+0xd0>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	6453      	str	r3, [r2, #68]	; 0x44
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <HAL_InitTick+0xd0>)
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001908:	f107 020c 	add.w	r2, r7, #12
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4611      	mov	r1, r2
 8001912:	4618      	mov	r0, r3
 8001914:	f001 fdb8 	bl	8003488 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001918:	f001 fda2 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 800191c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	4a23      	ldr	r2, [pc, #140]	; (80019b0 <HAL_InitTick+0xd4>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0c9b      	lsrs	r3, r3, #18
 8001928:	3b01      	subs	r3, #1
 800192a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800192c:	4b21      	ldr	r3, [pc, #132]	; (80019b4 <HAL_InitTick+0xd8>)
 800192e:	4a22      	ldr	r2, [pc, #136]	; (80019b8 <HAL_InitTick+0xdc>)
 8001930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001932:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <HAL_InitTick+0xd8>)
 8001934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001938:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800193a:	4a1e      	ldr	r2, [pc, #120]	; (80019b4 <HAL_InitTick+0xd8>)
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001940:	4b1c      	ldr	r3, [pc, #112]	; (80019b4 <HAL_InitTick+0xd8>)
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001946:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <HAL_InitTick+0xd8>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b19      	ldr	r3, [pc, #100]	; (80019b4 <HAL_InitTick+0xd8>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001952:	4818      	ldr	r0, [pc, #96]	; (80019b4 <HAL_InitTick+0xd8>)
 8001954:	f002 fa98 	bl	8003e88 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800195e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11b      	bne.n	800199e <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001966:	4813      	ldr	r0, [pc, #76]	; (80019b4 <HAL_InitTick+0xd8>)
 8001968:	f002 fade 	bl	8003f28 <HAL_TIM_Base_Start_IT>
 800196c:	4603      	mov	r3, r0
 800196e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001976:	2b00      	cmp	r3, #0
 8001978:	d111      	bne.n	800199e <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800197a:	2019      	movs	r0, #25
 800197c:	f000 feaa 	bl	80026d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b0f      	cmp	r3, #15
 8001984:	d808      	bhi.n	8001998 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001986:	2200      	movs	r2, #0
 8001988:	6879      	ldr	r1, [r7, #4]
 800198a:	2019      	movs	r0, #25
 800198c:	f000 fe86 	bl	800269c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001990:	4a0a      	ldr	r2, [pc, #40]	; (80019bc <HAL_InitTick+0xe0>)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e002      	b.n	800199e <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800199e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3730      	adds	r7, #48	; 0x30
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023800 	.word	0x40023800
 80019b0:	431bde83 	.word	0x431bde83
 80019b4:	200006b8 	.word	0x200006b8
 80019b8:	40010000 	.word	0x40010000
 80019bc:	20000004 	.word	0x20000004

080019c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <NMI_Handler+0x4>

080019c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019c6:	b480      	push	{r7}
 80019c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ca:	e7fe      	b.n	80019ca <HardFault_Handler+0x4>

080019cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <MemManage_Handler+0x4>

080019d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <BusFault_Handler+0x4>

080019d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <UsageFault_Handler+0x4>

080019de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80019f0:	4802      	ldr	r0, [pc, #8]	; (80019fc <DMA1_Stream5_IRQHandler+0x10>)
 80019f2:	f000 fff3 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	2000064c 	.word	0x2000064c

08001a00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001a04:	4802      	ldr	r0, [pc, #8]	; (8001a10 <DMA1_Stream6_IRQHandler+0x10>)
 8001a06:	f000 ffe9 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	200005ec 	.word	0x200005ec

08001a14 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a18:	4802      	ldr	r0, [pc, #8]	; (8001a24 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a1a:	f002 faf5 	bl	8004008 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200006b8 	.word	0x200006b8

08001a28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a2c:	4802      	ldr	r0, [pc, #8]	; (8001a38 <TIM2_IRQHandler+0x10>)
 8001a2e:	f002 faeb 	bl	8004008 <HAL_TIM_IRQHandler>
	  //uint16_t raw = HAL_ADC_GetValue(&hadc1);
	  //HAL_ADC_Stop(&hadc1);
//float vsense = (3.3 * raw )/4095;
	  //temperature = ((vsense) - 0.76)/(0.0025) + 25;
  /* USER CODE END TIM2_IRQn 1 */
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000560 	.word	0x20000560

08001a3c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */



  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a44:	f001 fbee 	bl	8003224 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <DMA2_Stream0_IRQHandler+0x10>)
 8001a52:	f000 ffc3 	bl	80029dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000500 	.word	0x20000500

08001a60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
	return 1;
 8001a64:	2301      	movs	r3, #1
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <_kill>:

int _kill(int pid, int sig)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a7a:	f004 fe77 	bl	800676c <__errno>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2216      	movs	r2, #22
 8001a82:	601a      	str	r2, [r3, #0]
	return -1;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <_exit>:

void _exit (int status)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ffe7 	bl	8001a70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aa2:	e7fe      	b.n	8001aa2 <_exit+0x12>

08001aa4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e00a      	b.n	8001acc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab6:	f3af 8000 	nop.w
 8001aba:	4601      	mov	r1, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	b2ca      	uxtb	r2, r1
 8001ac4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	3301      	adds	r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	dbf0      	blt.n	8001ab6 <_read+0x12>
	}

return len;
 8001ad4:	687b      	ldr	r3, [r7, #4]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b086      	sub	sp, #24
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	60f8      	str	r0, [r7, #12]
 8001ae6:	60b9      	str	r1, [r7, #8]
 8001ae8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	e009      	b.n	8001b04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1c5a      	adds	r2, r3, #1
 8001af4:	60ba      	str	r2, [r7, #8]
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	3301      	adds	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	dbf1      	blt.n	8001af0 <_write+0x12>
	}
	return len;
 8001b0c:	687b      	ldr	r3, [r7, #4]
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3718      	adds	r7, #24
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <_close>:

int _close(int file)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b083      	sub	sp, #12
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr

08001b2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
 8001b36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <_isatty>:

int _isatty(int file)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
	return 1;
 8001b56:	2301      	movs	r3, #1
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb0:	f004 fddc 	bl	800676c <__errno>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4413      	add	r3, r2
 8001bce:	4a05      	ldr	r2, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20020000 	.word	0x20020000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	20000700 	.word	0x20000700
 8001be8:	20004470 	.word	0x20004470

08001bec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <SystemInit+0x20>)
 8001bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf6:	4a05      	ldr	r2, [pc, #20]	; (8001c0c <SystemInit+0x20>)
 8001bf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	e000ed00 	.word	0xe000ed00

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c16:	490e      	ldr	r1, [pc, #56]	; (8001c50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0b      	ldr	r2, [pc, #44]	; (8001c58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c2c:	4c0b      	ldr	r4, [pc, #44]	; (8001c5c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c3a:	f7ff ffd7 	bl	8001bec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f004 fe91 	bl	8006964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff f9bd 	bl	8000fc0 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c54:	08009afc 	.word	0x08009afc
  ldr r2, =_sbss
 8001c58:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c5c:	2000446c 	.word	0x2000446c

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>
	...

08001c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c68:	4b0e      	ldr	r3, [pc, #56]	; (8001ca4 <HAL_Init+0x40>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0d      	ldr	r2, [pc, #52]	; (8001ca4 <HAL_Init+0x40>)
 8001c6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_Init+0x40>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <HAL_Init+0x40>)
 8001c7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c80:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_Init+0x40>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_Init+0x40>)
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 fcfa 	bl	8002686 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c92:	200f      	movs	r0, #15
 8001c94:	f7ff fe22 	bl	80018dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c98:	f7ff fcc4 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023c00 	.word	0x40023c00

08001ca8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cac:	4b06      	ldr	r3, [pc, #24]	; (8001cc8 <HAL_IncTick+0x20>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x24>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a04      	ldr	r2, [pc, #16]	; (8001ccc <HAL_IncTick+0x24>)
 8001cba:	6013      	str	r3, [r2, #0]
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	20000704 	.word	0x20000704

08001cd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_GetTick+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000704 	.word	0x20000704

08001ce8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e033      	b.n	8001d66 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fcb8 	bl	800167c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d118      	bne.n	8001d58 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d2e:	f023 0302 	bic.w	r3, r3, #2
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa78 	bl	8002230 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f023 0303 	bic.w	r3, r3, #3
 8001d4e:	f043 0201 	orr.w	r2, r3, #1
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	641a      	str	r2, [r3, #64]	; 0x40
 8001d56:	e001      	b.n	8001d5c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3710      	adds	r7, #16
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Start_DMA+0x1e>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0e9      	b.n	8001f62 <HAL_ADC_Start_DMA+0x1f2>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d018      	beq.n	8001dd6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001db4:	4b6d      	ldr	r3, [pc, #436]	; (8001f6c <HAL_ADC_Start_DMA+0x1fc>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a6d      	ldr	r2, [pc, #436]	; (8001f70 <HAL_ADC_Start_DMA+0x200>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9a      	lsrs	r2, r3, #18
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001de4:	d107      	bne.n	8001df6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001df4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	f040 80a1 	bne.w	8001f48 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e0e:	f023 0301 	bic.w	r3, r3, #1
 8001e12:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e30:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e44:	d106      	bne.n	8001e54 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f023 0206 	bic.w	r2, r3, #6
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	645a      	str	r2, [r3, #68]	; 0x44
 8001e52:	e002      	b.n	8001e5a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e62:	4b44      	ldr	r3, [pc, #272]	; (8001f74 <HAL_ADC_Start_DMA+0x204>)
 8001e64:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <HAL_ADC_Start_DMA+0x208>)
 8001e6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e72:	4a42      	ldr	r2, [pc, #264]	; (8001f7c <HAL_ADC_Start_DMA+0x20c>)
 8001e74:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7a:	4a41      	ldr	r2, [pc, #260]	; (8001f80 <HAL_ADC_Start_DMA+0x210>)
 8001e7c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e86:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	685a      	ldr	r2, [r3, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e96:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ea6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	334c      	adds	r3, #76	; 0x4c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f000 fcc8 	bl	800284c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 031f 	and.w	r3, r3, #31
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d12a      	bne.n	8001f1e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_ADC_Start_DMA+0x214>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d015      	beq.n	8001efe <HAL_ADC_Start_DMA+0x18e>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2c      	ldr	r2, [pc, #176]	; (8001f88 <HAL_ADC_Start_DMA+0x218>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d105      	bne.n	8001ee8 <HAL_ADC_Start_DMA+0x178>
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_ADC_Start_DMA+0x204>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 031f 	and.w	r3, r3, #31
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00a      	beq.n	8001efe <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a27      	ldr	r2, [pc, #156]	; (8001f8c <HAL_ADC_Start_DMA+0x21c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d136      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_ADC_Start_DMA+0x204>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d130      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d129      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	e020      	b.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a18      	ldr	r2, [pc, #96]	; (8001f84 <HAL_ADC_Start_DMA+0x214>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d11b      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d114      	bne.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	e00b      	b.n	8001f60 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	f043 0210 	orr.w	r2, r3, #16
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f58:	f043 0201 	orr.w	r2, r3, #1
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000000 	.word	0x20000000
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	40012300 	.word	0x40012300
 8001f78:	08002429 	.word	0x08002429
 8001f7c:	080024e3 	.word	0x080024e3
 8001f80:	080024ff 	.word	0x080024ff
 8001f84:	40012000 	.word	0x40012000
 8001f88:	40012100 	.word	0x40012100
 8001f8c:	40012200 	.word	0x40012200

08001f90 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x1c>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e113      	b.n	8002210 <HAL_ADC_ConfigChannel+0x244>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b09      	cmp	r3, #9
 8001ff6:	d925      	bls.n	8002044 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68d9      	ldr	r1, [r3, #12]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	461a      	mov	r2, r3
 8002006:	4613      	mov	r3, r2
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4413      	add	r3, r2
 800200c:	3b1e      	subs	r3, #30
 800200e:	2207      	movs	r2, #7
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	43da      	mvns	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	400a      	ands	r2, r1
 800201c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68d9      	ldr	r1, [r3, #12]
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	b29b      	uxth	r3, r3
 800202e:	4618      	mov	r0, r3
 8002030:	4603      	mov	r3, r0
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4403      	add	r3, r0
 8002036:	3b1e      	subs	r3, #30
 8002038:	409a      	lsls	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	e022      	b.n	800208a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6919      	ldr	r1, [r3, #16]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	2207      	movs	r2, #7
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6919      	ldr	r1, [r3, #16]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	689a      	ldr	r2, [r3, #8]
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	4603      	mov	r3, r0
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	4403      	add	r3, r0
 8002080:	409a      	lsls	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b06      	cmp	r3, #6
 8002090:	d824      	bhi.n	80020dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b05      	subs	r3, #5
 80020a4:	221f      	movs	r2, #31
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	b29b      	uxth	r3, r3
 80020c0:	4618      	mov	r0, r3
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	3b05      	subs	r3, #5
 80020ce:	fa00 f203 	lsl.w	r2, r0, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
 80020da:	e04c      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d824      	bhi.n	800212e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b23      	subs	r3, #35	; 0x23
 80020f6:	221f      	movs	r2, #31
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43da      	mvns	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	400a      	ands	r2, r1
 8002104:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	b29b      	uxth	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b23      	subs	r3, #35	; 0x23
 8002120:	fa00 f203 	lsl.w	r2, r0, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	631a      	str	r2, [r3, #48]	; 0x30
 800212c:	e023      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3b41      	subs	r3, #65	; 0x41
 8002140:	221f      	movs	r2, #31
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43da      	mvns	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	400a      	ands	r2, r1
 800214e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	b29b      	uxth	r3, r3
 800215c:	4618      	mov	r0, r3
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	4413      	add	r3, r2
 8002168:	3b41      	subs	r3, #65	; 0x41
 800216a:	fa00 f203 	lsl.w	r2, r0, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002176:	4b29      	ldr	r3, [pc, #164]	; (800221c <HAL_ADC_ConfigChannel+0x250>)
 8002178:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <HAL_ADC_ConfigChannel+0x254>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d10f      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1d8>
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2b12      	cmp	r3, #18
 800218a:	d10b      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_ADC_ConfigChannel+0x254>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d12b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x23a>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_ADC_ConfigChannel+0x258>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d003      	beq.n	80021c0 <HAL_ADC_ConfigChannel+0x1f4>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d122      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a11      	ldr	r2, [pc, #68]	; (8002224 <HAL_ADC_ConfigChannel+0x258>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d111      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_ADC_ConfigChannel+0x25c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x260>)
 80021e8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ec:	0c9a      	lsrs	r2, r3, #18
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021f8:	e002      	b.n	8002200 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3b01      	subs	r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f9      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	40012300 	.word	0x40012300
 8002220:	40012000 	.word	0x40012000
 8002224:	10000012 	.word	0x10000012
 8002228:	20000000 	.word	0x20000000
 800222c:	431bde83 	.word	0x431bde83

08002230 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002238:	4b79      	ldr	r3, [pc, #484]	; (8002420 <ADC_Init+0x1f0>)
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	685a      	ldr	r2, [r3, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	431a      	orrs	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002264:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6859      	ldr	r1, [r3, #4]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	021a      	lsls	r2, r3, #8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002288:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6899      	ldr	r1, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c2:	4a58      	ldr	r2, [pc, #352]	; (8002424 <ADC_Init+0x1f4>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d022      	beq.n	800230e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6899      	ldr	r1, [r3, #8]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	6899      	ldr	r1, [r3, #8]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	e00f      	b.n	800232e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800231c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800232c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f022 0202 	bic.w	r2, r2, #2
 800233c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	6899      	ldr	r1, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
 8002348:	005a      	lsls	r2, r3, #1
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	430a      	orrs	r2, r1
 8002350:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01b      	beq.n	8002394 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	685a      	ldr	r2, [r3, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800236a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800237a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	035a      	lsls	r2, r3, #13
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e007      	b.n	80023a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	3b01      	subs	r3, #1
 80023c0:	051a      	lsls	r2, r3, #20
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6899      	ldr	r1, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e6:	025a      	lsls	r2, r3, #9
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6899      	ldr	r1, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	029a      	lsls	r2, r3, #10
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	40012300 	.word	0x40012300
 8002424:	0f000001 	.word	0x0f000001

08002428 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002434:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800243e:	2b00      	cmp	r3, #0
 8002440:	d13c      	bne.n	80024bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d12b      	bne.n	80024b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002460:	2b00      	cmp	r3, #0
 8002462:	d127      	bne.n	80024b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800247c:	2b00      	cmp	r3, #0
 800247e:	d119      	bne.n	80024b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f022 0220 	bic.w	r2, r2, #32
 800248e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d105      	bne.n	80024b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0201 	orr.w	r2, r3, #1
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024b4:	68f8      	ldr	r0, [r7, #12]
 80024b6:	f7ff fd6b 	bl	8001f90 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024ba:	e00e      	b.n	80024da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f7ff fd75 	bl	8001fb8 <HAL_ADC_ErrorCallback>
}
 80024ce:	e004      	b.n	80024da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
}
 80024da:	bf00      	nop
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b084      	sub	sp, #16
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff fd57 	bl	8001fa4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b084      	sub	sp, #16
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800250a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f043 0204 	orr.w	r2, r3, #4
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff fd4a 	bl	8001fb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002524:	bf00      	nop
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f7ff ff4c 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 8002694:	bf00      	nop
 8002696:	3708      	adds	r7, #8
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}

0800269c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026ae:	f7ff ff61 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f7ff ffb1 	bl	8002620 <NVIC_EncodePriority>
 80026be:	4602      	mov	r2, r0
 80026c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ff80 	bl	80025cc <__NVIC_SetPriority>
}
 80026cc:	bf00      	nop
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff ff54 	bl	8002590 <__NVIC_EnableIRQ>
}
 80026e8:	bf00      	nop
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff fae8 	bl	8001cd0 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e099      	b.n	8002840 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272c:	e00f      	b.n	800274e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272e:	f7ff facf 	bl	8001cd0 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b05      	cmp	r3, #5
 800273a:	d908      	bls.n	800274e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2220      	movs	r2, #32
 8002740:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2203      	movs	r2, #3
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e078      	b.n	8002840 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1e8      	bne.n	800272e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	4b38      	ldr	r3, [pc, #224]	; (8002848 <HAL_DMA_Init+0x158>)
 8002768:	4013      	ands	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800277a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	d107      	bne.n	80027b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	4313      	orrs	r3, r2
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	697a      	ldr	r2, [r7, #20]
 80027be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f023 0307 	bic.w	r3, r3, #7
 80027ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d117      	bne.n	8002812 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 faeb 	bl	8002dd0 <DMA_CheckFifoParam>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2240      	movs	r2, #64	; 0x40
 8002804:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2201      	movs	r2, #1
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800280e:	2301      	movs	r3, #1
 8002810:	e016      	b.n	8002840 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 faa2 	bl	8002d64 <DMA_CalcBaseAndBitshift>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002828:	223f      	movs	r2, #63	; 0x3f
 800282a:	409a      	lsls	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3718      	adds	r7, #24
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	f010803f 	.word	0xf010803f

0800284c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
 8002858:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002862:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_DMA_Start_IT+0x26>
 800286e:	2302      	movs	r3, #2
 8002870:	e040      	b.n	80028f4 <HAL_DMA_Start_IT+0xa8>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d12f      	bne.n	80028e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2202      	movs	r2, #2
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2200      	movs	r2, #0
 8002892:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fa34 	bl	8002d08 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	223f      	movs	r2, #63	; 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0216 	orr.w	r2, r2, #22
 80028ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d007      	beq.n	80028d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 0208 	orr.w	r2, r2, #8
 80028d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e005      	b.n	80028f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ee:	2302      	movs	r3, #2
 80028f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800290a:	f7ff f9e1 	bl	8001cd0 <HAL_GetTick>
 800290e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d008      	beq.n	800292e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2280      	movs	r2, #128	; 0x80
 8002920:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e052      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0216 	bic.w	r2, r2, #22
 800293c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800294c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <HAL_DMA_Abort+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0208 	bic.w	r2, r2, #8
 800296c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297e:	e013      	b.n	80029a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002980:	f7ff f9a6 	bl	8001cd0 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b05      	cmp	r3, #5
 800298c:	d90c      	bls.n	80029a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2203      	movs	r2, #3
 8002998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029a4:	2303      	movs	r3, #3
 80029a6:	e015      	b.n	80029d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1e4      	bne.n	8002980 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	223f      	movs	r2, #63	; 0x3f
 80029bc:	409a      	lsls	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029e8:	4b8e      	ldr	r3, [pc, #568]	; (8002c24 <HAL_DMA_IRQHandler+0x248>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a8e      	ldr	r2, [pc, #568]	; (8002c28 <HAL_DMA_IRQHandler+0x24c>)
 80029ee:	fba2 2303 	umull	r2, r3, r2, r3
 80029f2:	0a9b      	lsrs	r3, r3, #10
 80029f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a06:	2208      	movs	r2, #8
 8002a08:	409a      	lsls	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d01a      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0204 	bic.w	r2, r2, #4
 8002a2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2208      	movs	r2, #8
 8002a36:	409a      	lsls	r2, r3
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a40:	f043 0201 	orr.w	r2, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d012      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a76:	f043 0202 	orr.w	r2, r3, #2
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2204      	movs	r2, #4
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f043 0204 	orr.w	r2, r3, #4
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2210      	movs	r2, #16
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d043      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d03c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad6:	2210      	movs	r2, #16
 8002ad8:	409a      	lsls	r2, r3
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d018      	beq.n	8002b1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d108      	bne.n	8002b0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d024      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	4798      	blx	r3
 8002b0a:	e01f      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d01b      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	4798      	blx	r3
 8002b1c:	e016      	b.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d107      	bne.n	8002b3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0208 	bic.w	r2, r2, #8
 8002b3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d003      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	2220      	movs	r2, #32
 8002b52:	409a      	lsls	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4013      	ands	r3, r2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f000 808f 	beq.w	8002c7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0310 	and.w	r3, r3, #16
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8087 	beq.w	8002c7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2220      	movs	r2, #32
 8002b74:	409a      	lsls	r2, r3
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b05      	cmp	r3, #5
 8002b84:	d136      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0216 	bic.w	r2, r2, #22
 8002b94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695a      	ldr	r2, [r3, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d103      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x1da>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0208 	bic.w	r2, r2, #8
 8002bc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bca:	223f      	movs	r2, #63	; 0x3f
 8002bcc:	409a      	lsls	r2, r3
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07e      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	4798      	blx	r3
        }
        return;
 8002bf2:	e079      	b.n	8002ce8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01d      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10d      	bne.n	8002c2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d031      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	4798      	blx	r3
 8002c20:	e02c      	b.n	8002c7c <HAL_DMA_IRQHandler+0x2a0>
 8002c22:	bf00      	nop
 8002c24:	20000000 	.word	0x20000000
 8002c28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d023      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	4798      	blx	r3
 8002c3c:	e01e      	b.n	8002c7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10f      	bne.n	8002c6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f022 0210 	bic.w	r2, r2, #16
 8002c5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d032      	beq.n	8002cea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d022      	beq.n	8002cd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2205      	movs	r2, #5
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0201 	bic.w	r2, r2, #1
 8002ca6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	3301      	adds	r3, #1
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d307      	bcc.n	8002cc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f2      	bne.n	8002ca8 <HAL_DMA_IRQHandler+0x2cc>
 8002cc2:	e000      	b.n	8002cc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	4798      	blx	r3
 8002ce6:	e000      	b.n	8002cea <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ce8:	bf00      	nop
    }
  }
}
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d24:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	d108      	bne.n	8002d48 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d46:	e007      	b.n	8002d58 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	3b10      	subs	r3, #16
 8002d74:	4a14      	ldr	r2, [pc, #80]	; (8002dc8 <DMA_CalcBaseAndBitshift+0x64>)
 8002d76:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7a:	091b      	lsrs	r3, r3, #4
 8002d7c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d7e:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <DMA_CalcBaseAndBitshift+0x68>)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	4413      	add	r3, r2
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d909      	bls.n	8002da6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9a:	f023 0303 	bic.w	r3, r3, #3
 8002d9e:	1d1a      	adds	r2, r3, #4
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	659a      	str	r2, [r3, #88]	; 0x58
 8002da4:	e007      	b.n	8002db6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002dae:	f023 0303 	bic.w	r3, r3, #3
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	aaaaaaab 	.word	0xaaaaaaab
 8002dcc:	08009708 	.word	0x08009708

08002dd0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b085      	sub	sp, #20
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d11f      	bne.n	8002e2a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d856      	bhi.n	8002e9e <DMA_CheckFifoParam+0xce>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <DMA_CheckFifoParam+0x28>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e1b 	.word	0x08002e1b
 8002e00:	08002e09 	.word	0x08002e09
 8002e04:	08002e9f 	.word	0x08002e9f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d046      	beq.n	8002ea2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e18:	e043      	b.n	8002ea2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e22:	d140      	bne.n	8002ea6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e28:	e03d      	b.n	8002ea6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e32:	d121      	bne.n	8002e78 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d837      	bhi.n	8002eaa <DMA_CheckFifoParam+0xda>
 8002e3a:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <DMA_CheckFifoParam+0x70>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e57 	.word	0x08002e57
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08002e69 	.word	0x08002e69
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
      break;
 8002e54:	e030      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d025      	beq.n	8002eae <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e66:	e022      	b.n	8002eae <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e76:	e01c      	b.n	8002eb2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d903      	bls.n	8002e86 <DMA_CheckFifoParam+0xb6>
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d003      	beq.n	8002e8c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e84:	e018      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8a:	e015      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00e      	beq.n	8002eb6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e9c:	e00b      	b.n	8002eb6 <DMA_CheckFifoParam+0xe6>
      break;
 8002e9e:	bf00      	nop
 8002ea0:	e00a      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e008      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e006      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <DMA_CheckFifoParam+0xe8>
      break;
 8002eb6:	bf00      	nop
    }
  } 
  
  return status; 
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop

08002ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
 8002ee2:	e165      	b.n	80031b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	f040 8154 	bne.w	80031aa <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d005      	beq.n	8002f1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d130      	bne.n	8002f7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69ba      	ldr	r2, [r7, #24]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f50:	2201      	movs	r2, #1
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 0201 	and.w	r2, r3, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0303 	and.w	r3, r3, #3
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d017      	beq.n	8002fb8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689a      	ldr	r2, [r3, #8]
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f003 0303 	and.w	r3, r3, #3
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d123      	bne.n	800300c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	08da      	lsrs	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3208      	adds	r2, #8
 8002fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	220f      	movs	r2, #15
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	08da      	lsrs	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3208      	adds	r2, #8
 8003006:	69b9      	ldr	r1, [r7, #24]
 8003008:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0203 	and.w	r2, r3, #3
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80ae 	beq.w	80031aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b5d      	ldr	r3, [pc, #372]	; (80031c8 <HAL_GPIO_Init+0x300>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a5c      	ldr	r2, [pc, #368]	; (80031c8 <HAL_GPIO_Init+0x300>)
 8003058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b5a      	ldr	r3, [pc, #360]	; (80031c8 <HAL_GPIO_Init+0x300>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800306a:	4a58      	ldr	r2, [pc, #352]	; (80031cc <HAL_GPIO_Init+0x304>)
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	3302      	adds	r3, #2
 8003072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	220f      	movs	r2, #15
 8003082:	fa02 f303 	lsl.w	r3, r2, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_GPIO_Init+0x308>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d025      	beq.n	80030e2 <HAL_GPIO_Init+0x21a>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_GPIO_Init+0x30c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d01f      	beq.n	80030de <HAL_GPIO_Init+0x216>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a4d      	ldr	r2, [pc, #308]	; (80031d8 <HAL_GPIO_Init+0x310>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d019      	beq.n	80030da <HAL_GPIO_Init+0x212>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a4c      	ldr	r2, [pc, #304]	; (80031dc <HAL_GPIO_Init+0x314>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d013      	beq.n	80030d6 <HAL_GPIO_Init+0x20e>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a4b      	ldr	r2, [pc, #300]	; (80031e0 <HAL_GPIO_Init+0x318>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00d      	beq.n	80030d2 <HAL_GPIO_Init+0x20a>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_GPIO_Init+0x31c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <HAL_GPIO_Init+0x206>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_GPIO_Init+0x320>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d101      	bne.n	80030ca <HAL_GPIO_Init+0x202>
 80030c6:	2306      	movs	r3, #6
 80030c8:	e00c      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030ca:	2307      	movs	r3, #7
 80030cc:	e00a      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030ce:	2305      	movs	r3, #5
 80030d0:	e008      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030d2:	2304      	movs	r3, #4
 80030d4:	e006      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030d6:	2303      	movs	r3, #3
 80030d8:	e004      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030da:	2302      	movs	r3, #2
 80030dc:	e002      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <HAL_GPIO_Init+0x21c>
 80030e2:	2300      	movs	r3, #0
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	f002 0203 	and.w	r2, r2, #3
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	4093      	lsls	r3, r2
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030f4:	4935      	ldr	r1, [pc, #212]	; (80031cc <HAL_GPIO_Init+0x304>)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003102:	4b3a      	ldr	r3, [pc, #232]	; (80031ec <HAL_GPIO_Init+0x324>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	4313      	orrs	r3, r2
 8003124:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <HAL_GPIO_Init+0x324>)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800312c:	4b2f      	ldr	r3, [pc, #188]	; (80031ec <HAL_GPIO_Init+0x324>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	43db      	mvns	r3, r3
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	4013      	ands	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003150:	4a26      	ldr	r2, [pc, #152]	; (80031ec <HAL_GPIO_Init+0x324>)
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003156:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_GPIO_Init+0x324>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	43db      	mvns	r3, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4013      	ands	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800317a:	4a1c      	ldr	r2, [pc, #112]	; (80031ec <HAL_GPIO_Init+0x324>)
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003180:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_GPIO_Init+0x324>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031a4:	4a11      	ldr	r2, [pc, #68]	; (80031ec <HAL_GPIO_Init+0x324>)
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3301      	adds	r3, #1
 80031ae:	61fb      	str	r3, [r7, #28]
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	2b0f      	cmp	r3, #15
 80031b4:	f67f ae96 	bls.w	8002ee4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031b8:	bf00      	nop
 80031ba:	bf00      	nop
 80031bc:	3724      	adds	r7, #36	; 0x24
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40013800 	.word	0x40013800
 80031d0:	40020000 	.word	0x40020000
 80031d4:	40020400 	.word	0x40020400
 80031d8:	40020800 	.word	0x40020800
 80031dc:	40020c00 	.word	0x40020c00
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40021400 	.word	0x40021400
 80031e8:	40021800 	.word	0x40021800
 80031ec:	40013c00 	.word	0x40013c00

080031f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	460b      	mov	r3, r1
 80031fa:	807b      	strh	r3, [r7, #2]
 80031fc:	4613      	mov	r3, r2
 80031fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003200:	787b      	ldrb	r3, [r7, #1]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003206:	887a      	ldrh	r2, [r7, #2]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800320c:	e003      	b.n	8003216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	041a      	lsls	r2, r3, #16
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	619a      	str	r2, [r3, #24]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800322e:	4b08      	ldr	r3, [pc, #32]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003230:	695a      	ldr	r2, [r3, #20]
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4013      	ands	r3, r2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800323c:	88fb      	ldrh	r3, [r7, #6]
 800323e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe f904 	bl	8001450 <HAL_GPIO_EXTI_Callback>
  }
}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d101      	bne.n	8003268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e0cc      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003268:	4b68      	ldr	r3, [pc, #416]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d90c      	bls.n	8003290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b65      	ldr	r3, [pc, #404]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327e:	4b63      	ldr	r3, [pc, #396]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e0b8      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a8:	4b59      	ldr	r3, [pc, #356]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	4a58      	ldr	r2, [pc, #352]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0308 	and.w	r3, r3, #8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032c0:	4b53      	ldr	r3, [pc, #332]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	4a52      	ldr	r2, [pc, #328]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032cc:	4b50      	ldr	r3, [pc, #320]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	494d      	ldr	r1, [pc, #308]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d044      	beq.n	8003374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d107      	bne.n	8003302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	4b47      	ldr	r3, [pc, #284]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d119      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e07f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b02      	cmp	r3, #2
 8003308:	d003      	beq.n	8003312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330e:	2b03      	cmp	r3, #3
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e06f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003322:	4b3b      	ldr	r3, [pc, #236]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0302 	and.w	r3, r3, #2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d101      	bne.n	8003332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e067      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003332:	4b37      	ldr	r3, [pc, #220]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f023 0203 	bic.w	r2, r3, #3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	4934      	ldr	r1, [pc, #208]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003340:	4313      	orrs	r3, r2
 8003342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003344:	f7fe fcc4 	bl	8001cd0 <HAL_GetTick>
 8003348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	e00a      	b.n	8003362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800334c:	f7fe fcc0 	bl	8001cd0 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	f241 3288 	movw	r2, #5000	; 0x1388
 800335a:	4293      	cmp	r3, r2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e04f      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f003 020c 	and.w	r2, r3, #12
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	429a      	cmp	r2, r3
 8003372:	d1eb      	bne.n	800334c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003374:	4b25      	ldr	r3, [pc, #148]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	429a      	cmp	r2, r3
 8003380:	d20c      	bcs.n	800339c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003382:	4b22      	ldr	r3, [pc, #136]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800338a:	4b20      	ldr	r3, [pc, #128]	; (800340c <HAL_RCC_ClockConfig+0x1b8>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	683a      	ldr	r2, [r7, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d001      	beq.n	800339c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e032      	b.n	8003402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0304 	and.w	r3, r3, #4
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d008      	beq.n	80033ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a8:	4b19      	ldr	r3, [pc, #100]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4916      	ldr	r1, [pc, #88]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0308 	and.w	r3, r3, #8
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d009      	beq.n	80033da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c6:	4b12      	ldr	r3, [pc, #72]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	490e      	ldr	r1, [pc, #56]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033da:	f000 f887 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80033de:	4602      	mov	r2, r0
 80033e0:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_ClockConfig+0x1bc>)
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	091b      	lsrs	r3, r3, #4
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	490a      	ldr	r1, [pc, #40]	; (8003414 <HAL_RCC_ClockConfig+0x1c0>)
 80033ec:	5ccb      	ldrb	r3, [r1, r3]
 80033ee:	fa22 f303 	lsr.w	r3, r2, r3
 80033f2:	4a09      	ldr	r2, [pc, #36]	; (8003418 <HAL_RCC_ClockConfig+0x1c4>)
 80033f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_ClockConfig+0x1c8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fa6e 	bl	80018dc <HAL_InitTick>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40023c00 	.word	0x40023c00
 8003410:	40023800 	.word	0x40023800
 8003414:	080096f0 	.word	0x080096f0
 8003418:	20000000 	.word	0x20000000
 800341c:	20000004 	.word	0x20000004

08003420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_RCC_GetHCLKFreq+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000000 	.word	0x20000000

08003438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800343c:	f7ff fff0 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003440:	4602      	mov	r2, r0
 8003442:	4b05      	ldr	r3, [pc, #20]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	0a9b      	lsrs	r3, r3, #10
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	4903      	ldr	r1, [pc, #12]	; (800345c <HAL_RCC_GetPCLK1Freq+0x24>)
 800344e:	5ccb      	ldrb	r3, [r1, r3]
 8003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003454:	4618      	mov	r0, r3
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40023800 	.word	0x40023800
 800345c:	08009700 	.word	0x08009700

08003460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003464:	f7ff ffdc 	bl	8003420 <HAL_RCC_GetHCLKFreq>
 8003468:	4602      	mov	r2, r0
 800346a:	4b05      	ldr	r3, [pc, #20]	; (8003480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	0b5b      	lsrs	r3, r3, #13
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	4903      	ldr	r1, [pc, #12]	; (8003484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003476:	5ccb      	ldrb	r3, [r1, r3]
 8003478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800347c:	4618      	mov	r0, r3
 800347e:	bd80      	pop	{r7, pc}
 8003480:	40023800 	.word	0x40023800
 8003484:	08009700 	.word	0x08009700

08003488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	220f      	movs	r2, #15
 8003496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034a4:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034b0:	4b0c      	ldr	r3, [pc, #48]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <HAL_RCC_GetClockConfig+0x5c>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034ca:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCC_GetClockConfig+0x60>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40023800 	.word	0x40023800
 80034e8:	40023c00 	.word	0x40023c00

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f0:	b0ae      	sub	sp, #184	; 0xb8
 80034f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003506:	2300      	movs	r3, #0
 8003508:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800350c:	2300      	movs	r3, #0
 800350e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003512:	4bcb      	ldr	r3, [pc, #812]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b0c      	cmp	r3, #12
 800351c:	f200 8206 	bhi.w	800392c <HAL_RCC_GetSysClockFreq+0x440>
 8003520:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003526:	bf00      	nop
 8003528:	0800355d 	.word	0x0800355d
 800352c:	0800392d 	.word	0x0800392d
 8003530:	0800392d 	.word	0x0800392d
 8003534:	0800392d 	.word	0x0800392d
 8003538:	08003565 	.word	0x08003565
 800353c:	0800392d 	.word	0x0800392d
 8003540:	0800392d 	.word	0x0800392d
 8003544:	0800392d 	.word	0x0800392d
 8003548:	0800356d 	.word	0x0800356d
 800354c:	0800392d 	.word	0x0800392d
 8003550:	0800392d 	.word	0x0800392d
 8003554:	0800392d 	.word	0x0800392d
 8003558:	0800375d 	.word	0x0800375d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800355c:	4bb9      	ldr	r3, [pc, #740]	; (8003844 <HAL_RCC_GetSysClockFreq+0x358>)
 800355e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003562:	e1e7      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003564:	4bb8      	ldr	r3, [pc, #736]	; (8003848 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003566:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800356a:	e1e3      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800356c:	4bb4      	ldr	r3, [pc, #720]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003574:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003578:	4bb1      	ldr	r3, [pc, #708]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d071      	beq.n	8003668 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003584:	4bae      	ldr	r3, [pc, #696]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	099b      	lsrs	r3, r3, #6
 800358a:	2200      	movs	r2, #0
 800358c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003590:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003594:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800359c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035a0:	2300      	movs	r3, #0
 80035a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80035aa:	4622      	mov	r2, r4
 80035ac:	462b      	mov	r3, r5
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	4621      	mov	r1, r4
 80035c4:	1a51      	subs	r1, r2, r1
 80035c6:	6439      	str	r1, [r7, #64]	; 0x40
 80035c8:	4629      	mov	r1, r5
 80035ca:	eb63 0301 	sbc.w	r3, r3, r1
 80035ce:	647b      	str	r3, [r7, #68]	; 0x44
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	f04f 0300 	mov.w	r3, #0
 80035d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80035dc:	4649      	mov	r1, r9
 80035de:	018b      	lsls	r3, r1, #6
 80035e0:	4641      	mov	r1, r8
 80035e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035e6:	4641      	mov	r1, r8
 80035e8:	018a      	lsls	r2, r1, #6
 80035ea:	4641      	mov	r1, r8
 80035ec:	1a51      	subs	r1, r2, r1
 80035ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80035f0:	4649      	mov	r1, r9
 80035f2:	eb63 0301 	sbc.w	r3, r3, r1
 80035f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003604:	4649      	mov	r1, r9
 8003606:	00cb      	lsls	r3, r1, #3
 8003608:	4641      	mov	r1, r8
 800360a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800360e:	4641      	mov	r1, r8
 8003610:	00ca      	lsls	r2, r1, #3
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	4603      	mov	r3, r0
 8003618:	4622      	mov	r2, r4
 800361a:	189b      	adds	r3, r3, r2
 800361c:	633b      	str	r3, [r7, #48]	; 0x30
 800361e:	462b      	mov	r3, r5
 8003620:	460a      	mov	r2, r1
 8003622:	eb42 0303 	adc.w	r3, r2, r3
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
 8003628:	f04f 0200 	mov.w	r2, #0
 800362c:	f04f 0300 	mov.w	r3, #0
 8003630:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003634:	4629      	mov	r1, r5
 8003636:	024b      	lsls	r3, r1, #9
 8003638:	4621      	mov	r1, r4
 800363a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800363e:	4621      	mov	r1, r4
 8003640:	024a      	lsls	r2, r1, #9
 8003642:	4610      	mov	r0, r2
 8003644:	4619      	mov	r1, r3
 8003646:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800364a:	2200      	movs	r2, #0
 800364c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003654:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003658:	f7fd fb16 	bl	8000c88 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003666:	e067      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003668:	4b75      	ldr	r3, [pc, #468]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	099b      	lsrs	r3, r3, #6
 800366e:	2200      	movs	r2, #0
 8003670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003674:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003678:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800367c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003680:	67bb      	str	r3, [r7, #120]	; 0x78
 8003682:	2300      	movs	r3, #0
 8003684:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003686:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800368a:	4622      	mov	r2, r4
 800368c:	462b      	mov	r3, r5
 800368e:	f04f 0000 	mov.w	r0, #0
 8003692:	f04f 0100 	mov.w	r1, #0
 8003696:	0159      	lsls	r1, r3, #5
 8003698:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800369c:	0150      	lsls	r0, r2, #5
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	4621      	mov	r1, r4
 80036a4:	1a51      	subs	r1, r2, r1
 80036a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80036a8:	4629      	mov	r1, r5
 80036aa:	eb63 0301 	sbc.w	r3, r3, r1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80036bc:	4649      	mov	r1, r9
 80036be:	018b      	lsls	r3, r1, #6
 80036c0:	4641      	mov	r1, r8
 80036c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036c6:	4641      	mov	r1, r8
 80036c8:	018a      	lsls	r2, r1, #6
 80036ca:	4641      	mov	r1, r8
 80036cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80036d0:	4649      	mov	r1, r9
 80036d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d6:	f04f 0200 	mov.w	r2, #0
 80036da:	f04f 0300 	mov.w	r3, #0
 80036de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ea:	4692      	mov	sl, r2
 80036ec:	469b      	mov	fp, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	eb1a 0303 	adds.w	r3, sl, r3
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	462b      	mov	r3, r5
 80036f8:	eb4b 0303 	adc.w	r3, fp, r3
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003720:	2200      	movs	r2, #0
 8003722:	673b      	str	r3, [r7, #112]	; 0x70
 8003724:	677a      	str	r2, [r7, #116]	; 0x74
 8003726:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800372a:	f7fd faad 	bl	8000c88 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4613      	mov	r3, r2
 8003734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003738:	4b41      	ldr	r3, [pc, #260]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	0c1b      	lsrs	r3, r3, #16
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	3301      	adds	r3, #1
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800374a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800374e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800375a:	e0eb      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800375c:	4b38      	ldr	r3, [pc, #224]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003768:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d06b      	beq.n	800384c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_RCC_GetSysClockFreq+0x354>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	2200      	movs	r2, #0
 800377c:	66bb      	str	r3, [r7, #104]	; 0x68
 800377e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003786:	663b      	str	r3, [r7, #96]	; 0x60
 8003788:	2300      	movs	r3, #0
 800378a:	667b      	str	r3, [r7, #100]	; 0x64
 800378c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003790:	4622      	mov	r2, r4
 8003792:	462b      	mov	r3, r5
 8003794:	f04f 0000 	mov.w	r0, #0
 8003798:	f04f 0100 	mov.w	r1, #0
 800379c:	0159      	lsls	r1, r3, #5
 800379e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a2:	0150      	lsls	r0, r2, #5
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4621      	mov	r1, r4
 80037aa:	1a51      	subs	r1, r2, r1
 80037ac:	61b9      	str	r1, [r7, #24]
 80037ae:	4629      	mov	r1, r5
 80037b0:	eb63 0301 	sbc.w	r3, r3, r1
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	f04f 0200 	mov.w	r2, #0
 80037ba:	f04f 0300 	mov.w	r3, #0
 80037be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80037c2:	4659      	mov	r1, fp
 80037c4:	018b      	lsls	r3, r1, #6
 80037c6:	4651      	mov	r1, sl
 80037c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037cc:	4651      	mov	r1, sl
 80037ce:	018a      	lsls	r2, r1, #6
 80037d0:	4651      	mov	r1, sl
 80037d2:	ebb2 0801 	subs.w	r8, r2, r1
 80037d6:	4659      	mov	r1, fp
 80037d8:	eb63 0901 	sbc.w	r9, r3, r1
 80037dc:	f04f 0200 	mov.w	r2, #0
 80037e0:	f04f 0300 	mov.w	r3, #0
 80037e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f0:	4690      	mov	r8, r2
 80037f2:	4699      	mov	r9, r3
 80037f4:	4623      	mov	r3, r4
 80037f6:	eb18 0303 	adds.w	r3, r8, r3
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	462b      	mov	r3, r5
 80037fe:	eb49 0303 	adc.w	r3, r9, r3
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	f04f 0200 	mov.w	r2, #0
 8003808:	f04f 0300 	mov.w	r3, #0
 800380c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003810:	4629      	mov	r1, r5
 8003812:	024b      	lsls	r3, r1, #9
 8003814:	4621      	mov	r1, r4
 8003816:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800381a:	4621      	mov	r1, r4
 800381c:	024a      	lsls	r2, r1, #9
 800381e:	4610      	mov	r0, r2
 8003820:	4619      	mov	r1, r3
 8003822:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003826:	2200      	movs	r2, #0
 8003828:	65bb      	str	r3, [r7, #88]	; 0x58
 800382a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800382c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003830:	f7fd fa2a 	bl	8000c88 <__aeabi_uldivmod>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4613      	mov	r3, r2
 800383a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800383e:	e065      	b.n	800390c <HAL_RCC_GetSysClockFreq+0x420>
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800384c:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <HAL_RCC_GetSysClockFreq+0x458>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	2200      	movs	r2, #0
 8003854:	4618      	mov	r0, r3
 8003856:	4611      	mov	r1, r2
 8003858:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800385c:	653b      	str	r3, [r7, #80]	; 0x50
 800385e:	2300      	movs	r3, #0
 8003860:	657b      	str	r3, [r7, #84]	; 0x54
 8003862:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003866:	4642      	mov	r2, r8
 8003868:	464b      	mov	r3, r9
 800386a:	f04f 0000 	mov.w	r0, #0
 800386e:	f04f 0100 	mov.w	r1, #0
 8003872:	0159      	lsls	r1, r3, #5
 8003874:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003878:	0150      	lsls	r0, r2, #5
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4641      	mov	r1, r8
 8003880:	1a51      	subs	r1, r2, r1
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	4649      	mov	r1, r9
 8003886:	eb63 0301 	sbc.w	r3, r3, r1
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	f04f 0200 	mov.w	r2, #0
 8003890:	f04f 0300 	mov.w	r3, #0
 8003894:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003898:	4659      	mov	r1, fp
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	4651      	mov	r1, sl
 800389e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038a2:	4651      	mov	r1, sl
 80038a4:	018a      	lsls	r2, r1, #6
 80038a6:	4651      	mov	r1, sl
 80038a8:	1a54      	subs	r4, r2, r1
 80038aa:	4659      	mov	r1, fp
 80038ac:	eb63 0501 	sbc.w	r5, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	00eb      	lsls	r3, r5, #3
 80038ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038be:	00e2      	lsls	r2, r4, #3
 80038c0:	4614      	mov	r4, r2
 80038c2:	461d      	mov	r5, r3
 80038c4:	4643      	mov	r3, r8
 80038c6:	18e3      	adds	r3, r4, r3
 80038c8:	603b      	str	r3, [r7, #0]
 80038ca:	464b      	mov	r3, r9
 80038cc:	eb45 0303 	adc.w	r3, r5, r3
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	f04f 0200 	mov.w	r2, #0
 80038d6:	f04f 0300 	mov.w	r3, #0
 80038da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038de:	4629      	mov	r1, r5
 80038e0:	028b      	lsls	r3, r1, #10
 80038e2:	4621      	mov	r1, r4
 80038e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038e8:	4621      	mov	r1, r4
 80038ea:	028a      	lsls	r2, r1, #10
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038f4:	2200      	movs	r2, #0
 80038f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80038fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80038fe:	f7fd f9c3 	bl	8000c88 <__aeabi_uldivmod>
 8003902:	4602      	mov	r2, r0
 8003904:	460b      	mov	r3, r1
 8003906:	4613      	mov	r3, r2
 8003908:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800390c:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <HAL_RCC_GetSysClockFreq+0x458>)
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	0f1b      	lsrs	r3, r3, #28
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800391a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800391e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800392a:	e003      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800392c:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_RCC_GetSysClockFreq+0x45c>)
 800392e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003932:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003938:	4618      	mov	r0, r3
 800393a:	37b8      	adds	r7, #184	; 0xb8
 800393c:	46bd      	mov	sp, r7
 800393e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003942:	bf00      	nop
 8003944:	40023800 	.word	0x40023800
 8003948:	00f42400 	.word	0x00f42400

0800394c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e28d      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0301 	and.w	r3, r3, #1
 8003966:	2b00      	cmp	r3, #0
 8003968:	f000 8083 	beq.w	8003a72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800396c:	4b94      	ldr	r3, [pc, #592]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 030c 	and.w	r3, r3, #12
 8003974:	2b04      	cmp	r3, #4
 8003976:	d019      	beq.n	80039ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003978:	4b91      	ldr	r3, [pc, #580]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003980:	2b08      	cmp	r3, #8
 8003982:	d106      	bne.n	8003992 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003984:	4b8e      	ldr	r3, [pc, #568]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800398c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003990:	d00c      	beq.n	80039ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003992:	4b8b      	ldr	r3, [pc, #556]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800399a:	2b0c      	cmp	r3, #12
 800399c:	d112      	bne.n	80039c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800399e:	4b88      	ldr	r3, [pc, #544]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039aa:	d10b      	bne.n	80039c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ac:	4b84      	ldr	r3, [pc, #528]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05b      	beq.n	8003a70 <HAL_RCC_OscConfig+0x124>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d157      	bne.n	8003a70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e25a      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d106      	bne.n	80039dc <HAL_RCC_OscConfig+0x90>
 80039ce:	4b7c      	ldr	r3, [pc, #496]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a7b      	ldr	r2, [pc, #492]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d8:	6013      	str	r3, [r2, #0]
 80039da:	e01d      	b.n	8003a18 <HAL_RCC_OscConfig+0xcc>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039e4:	d10c      	bne.n	8003a00 <HAL_RCC_OscConfig+0xb4>
 80039e6:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a75      	ldr	r2, [pc, #468]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	4b73      	ldr	r3, [pc, #460]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a72      	ldr	r2, [pc, #456]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 80039f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fc:	6013      	str	r3, [r2, #0]
 80039fe:	e00b      	b.n	8003a18 <HAL_RCC_OscConfig+0xcc>
 8003a00:	4b6f      	ldr	r3, [pc, #444]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a6e      	ldr	r2, [pc, #440]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b6c      	ldr	r3, [pc, #432]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a6b      	ldr	r2, [pc, #428]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe f956 	bl	8001cd0 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe f952 	bl	8001cd0 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e21f      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b61      	ldr	r3, [pc, #388]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0xdc>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe f942 	bl	8001cd0 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe f93e 	bl	8001cd0 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e20b      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	4b57      	ldr	r3, [pc, #348]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x104>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d06f      	beq.n	8003b5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a7e:	4b50      	ldr	r3, [pc, #320]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	f003 030c 	and.w	r3, r3, #12
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d017      	beq.n	8003aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a8a:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003a92:	2b08      	cmp	r3, #8
 8003a94:	d105      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003a96:	4b4a      	ldr	r3, [pc, #296]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003aaa:	2b0c      	cmp	r3, #12
 8003aac:	d11c      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aae:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d116      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aba:	4b41      	ldr	r3, [pc, #260]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x186>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d001      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e1d3      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b3b      	ldr	r3, [pc, #236]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4937      	ldr	r1, [pc, #220]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	e03a      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d020      	beq.n	8003b32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003af0:	4b34      	ldr	r3, [pc, #208]	; (8003bc4 <HAL_RCC_OscConfig+0x278>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fe f8eb 	bl	8001cd0 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fe f8e7 	bl	8001cd0 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e1b4      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b10:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	4925      	ldr	r1, [pc, #148]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	600b      	str	r3, [r1, #0]
 8003b30:	e015      	b.n	8003b5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b32:	4b24      	ldr	r3, [pc, #144]	; (8003bc4 <HAL_RCC_OscConfig+0x278>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b38:	f7fe f8ca 	bl	8001cd0 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b40:	f7fe f8c6 	bl	8001cd0 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e193      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b52:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0308 	and.w	r3, r3, #8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d036      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d016      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b72:	4b15      	ldr	r3, [pc, #84]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003b74:	2201      	movs	r2, #1
 8003b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b78:	f7fe f8aa 	bl	8001cd0 <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b80:	f7fe f8a6 	bl	8001cd0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e173      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b92:	4b0b      	ldr	r3, [pc, #44]	; (8003bc0 <HAL_RCC_OscConfig+0x274>)
 8003b94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCC_OscConfig+0x234>
 8003b9e:	e01b      	b.n	8003bd8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_RCC_OscConfig+0x27c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ba6:	f7fe f893 	bl	8001cd0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	e00e      	b.n	8003bcc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bae:	f7fe f88f 	bl	8001cd0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d907      	bls.n	8003bcc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e15c      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
 8003bc0:	40023800 	.word	0x40023800
 8003bc4:	42470000 	.word	0x42470000
 8003bc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bcc:	4b8a      	ldr	r3, [pc, #552]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ea      	bne.n	8003bae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 8097 	beq.w	8003d14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003be6:	2300      	movs	r3, #0
 8003be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bea:	4b83      	ldr	r3, [pc, #524]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	4b7f      	ldr	r3, [pc, #508]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	4a7e      	ldr	r2, [pc, #504]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c04:	6413      	str	r3, [r2, #64]	; 0x40
 8003c06:	4b7c      	ldr	r3, [pc, #496]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	60bb      	str	r3, [r7, #8]
 8003c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c12:	2301      	movs	r3, #1
 8003c14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b79      	ldr	r3, [pc, #484]	; (8003dfc <HAL_RCC_OscConfig+0x4b0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <HAL_RCC_OscConfig+0x4b0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a75      	ldr	r2, [pc, #468]	; (8003dfc <HAL_RCC_OscConfig+0x4b0>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c2e:	f7fe f84f 	bl	8001cd0 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c36:	f7fe f84b 	bl	8001cd0 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e118      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c48:	4b6c      	ldr	r3, [pc, #432]	; (8003dfc <HAL_RCC_OscConfig+0x4b0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f0      	beq.n	8003c36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d106      	bne.n	8003c6a <HAL_RCC_OscConfig+0x31e>
 8003c5c:	4b66      	ldr	r3, [pc, #408]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c60:	4a65      	ldr	r2, [pc, #404]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6713      	str	r3, [r2, #112]	; 0x70
 8003c68:	e01c      	b.n	8003ca4 <HAL_RCC_OscConfig+0x358>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d10c      	bne.n	8003c8c <HAL_RCC_OscConfig+0x340>
 8003c72:	4b61      	ldr	r3, [pc, #388]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	4a60      	ldr	r2, [pc, #384]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c78:	f043 0304 	orr.w	r3, r3, #4
 8003c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c7e:	4b5e      	ldr	r3, [pc, #376]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c82:	4a5d      	ldr	r2, [pc, #372]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c84:	f043 0301 	orr.w	r3, r3, #1
 8003c88:	6713      	str	r3, [r2, #112]	; 0x70
 8003c8a:	e00b      	b.n	8003ca4 <HAL_RCC_OscConfig+0x358>
 8003c8c:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c90:	4a59      	ldr	r2, [pc, #356]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c92:	f023 0301 	bic.w	r3, r3, #1
 8003c96:	6713      	str	r3, [r2, #112]	; 0x70
 8003c98:	4b57      	ldr	r3, [pc, #348]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9c:	4a56      	ldr	r2, [pc, #344]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003c9e:	f023 0304 	bic.w	r3, r3, #4
 8003ca2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d015      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cac:	f7fe f810 	bl	8001cd0 <HAL_GetTick>
 8003cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb4:	f7fe f80c 	bl	8001cd0 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e0d7      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	4b4b      	ldr	r3, [pc, #300]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0ee      	beq.n	8003cb4 <HAL_RCC_OscConfig+0x368>
 8003cd6:	e014      	b.n	8003d02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd8:	f7fd fffa 	bl	8001cd0 <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ce0:	f7fd fff6 	bl	8001cd0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e0c1      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf6:	4b40      	ldr	r3, [pc, #256]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1ee      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d02:	7dfb      	ldrb	r3, [r7, #23]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d105      	bne.n	8003d14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d08:	4b3b      	ldr	r3, [pc, #236]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	4a3a      	ldr	r2, [pc, #232]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	699b      	ldr	r3, [r3, #24]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80ad 	beq.w	8003e78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d1e:	4b36      	ldr	r3, [pc, #216]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f003 030c 	and.w	r3, r3, #12
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d060      	beq.n	8003dec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d145      	bne.n	8003dbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d32:	4b33      	ldr	r3, [pc, #204]	; (8003e00 <HAL_RCC_OscConfig+0x4b4>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fd ffca 	bl	8001cd0 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d40:	f7fd ffc6 	bl	8001cd0 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e093      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d52:	4b29      	ldr	r3, [pc, #164]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d1f0      	bne.n	8003d40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69da      	ldr	r2, [r3, #28]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	019b      	lsls	r3, r3, #6
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	3b01      	subs	r3, #1
 8003d78:	041b      	lsls	r3, r3, #16
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	431a      	orrs	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d88:	071b      	lsls	r3, r3, #28
 8003d8a:	491b      	ldr	r1, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_RCC_OscConfig+0x4b4>)
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fd ff9b 	bl	8001cd0 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fd ff97 	bl	8001cd0 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e064      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x452>
 8003dbc:	e05c      	b.n	8003e78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <HAL_RCC_OscConfig+0x4b4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc4:	f7fd ff84 	bl	8001cd0 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd ff80 	bl	8001cd0 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04d      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_OscConfig+0x4ac>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x480>
 8003dea:	e045      	b.n	8003e78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d107      	bne.n	8003e04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e040      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40007000 	.word	0x40007000
 8003e00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e04:	4b1f      	ldr	r3, [pc, #124]	; (8003e84 <HAL_RCC_OscConfig+0x538>)
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d030      	beq.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d129      	bne.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d122      	bne.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e34:	4013      	ands	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d119      	bne.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e4a:	085b      	lsrs	r3, r3, #1
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d10f      	bne.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d107      	bne.n	8003e74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e000      	b.n	8003e7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40023800 	.word	0x40023800

08003e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e041      	b.n	8003f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d106      	bne.n	8003eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f7fd fc38 	bl	8001724 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	f000 fa96 	bl	80043f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3708      	adds	r7, #8
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
	...

08003f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d001      	beq.n	8003f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e04e      	b.n	8003fde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68da      	ldr	r2, [r3, #12]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	; (8003fec <HAL_TIM_Base_Start_IT+0xc4>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d022      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6a:	d01d      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a1f      	ldr	r2, [pc, #124]	; (8003ff0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d018      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1e      	ldr	r2, [pc, #120]	; (8003ff4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d013      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a1c      	ldr	r2, [pc, #112]	; (8003ff8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00e      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a1b      	ldr	r2, [pc, #108]	; (8003ffc <HAL_TIM_Base_Start_IT+0xd4>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d009      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a19      	ldr	r2, [pc, #100]	; (8004000 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_TIM_Base_Start_IT+0x80>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a18      	ldr	r2, [pc, #96]	; (8004004 <HAL_TIM_Base_Start_IT+0xdc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d111      	bne.n	8003fcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d010      	beq.n	8003fdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f042 0201 	orr.w	r2, r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	e007      	b.n	8003fdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0201 	orr.w	r2, r2, #1
 8003fda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40010400 	.word	0x40010400
 8004000:	40014000 	.word	0x40014000
 8004004:	40001800 	.word	0x40001800

08004008 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0302 	and.w	r3, r3, #2
 800401a:	2b02      	cmp	r3, #2
 800401c:	d122      	bne.n	8004064 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b02      	cmp	r3, #2
 800402a:	d11b      	bne.n	8004064 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0202 	mvn.w	r2, #2
 8004034:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9b5 	bl	80043ba <HAL_TIM_IC_CaptureCallback>
 8004050:	e005      	b.n	800405e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9a7 	bl	80043a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9b8 	bl	80043ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	2b04      	cmp	r3, #4
 8004070:	d122      	bne.n	80040b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b04      	cmp	r3, #4
 800407e:	d11b      	bne.n	80040b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f06f 0204 	mvn.w	r2, #4
 8004088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	699b      	ldr	r3, [r3, #24]
 8004096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f98b 	bl	80043ba <HAL_TIM_IC_CaptureCallback>
 80040a4:	e005      	b.n	80040b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f97d 	bl	80043a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 f98e 	bl	80043ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d122      	bne.n	800410c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f003 0308 	and.w	r3, r3, #8
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d11b      	bne.n	800410c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f06f 0208 	mvn.w	r2, #8
 80040dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2204      	movs	r2, #4
 80040e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f961 	bl	80043ba <HAL_TIM_IC_CaptureCallback>
 80040f8:	e005      	b.n	8004106 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f953 	bl	80043a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f964 	bl	80043ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b10      	cmp	r3, #16
 8004118:	d122      	bne.n	8004160 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b10      	cmp	r3, #16
 8004126:	d11b      	bne.n	8004160 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0210 	mvn.w	r2, #16
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2208      	movs	r2, #8
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f937 	bl	80043ba <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f929 	bl	80043a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f93a 	bl	80043ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b01      	cmp	r3, #1
 800416c:	d10e      	bne.n	800418c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f003 0301 	and.w	r3, r3, #1
 8004178:	2b01      	cmp	r3, #1
 800417a:	d107      	bne.n	800418c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f06f 0201 	mvn.w	r2, #1
 8004184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fd fa34 	bl	80015f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004196:	2b80      	cmp	r3, #128	; 0x80
 8004198:	d10e      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a4:	2b80      	cmp	r3, #128	; 0x80
 80041a6:	d107      	bne.n	80041b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 fae0 	bl	8004778 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b40      	cmp	r3, #64	; 0x40
 80041c4:	d10e      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d0:	2b40      	cmp	r3, #64	; 0x40
 80041d2:	d107      	bne.n	80041e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8ff 	bl	80043e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0320 	and.w	r3, r3, #32
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d10e      	bne.n	8004210 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d107      	bne.n	8004210 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0220 	mvn.w	r2, #32
 8004208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 faaa 	bl	8004764 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004210:	bf00      	nop
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_ConfigClockSource+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e0b4      	b.n	800439e <HAL_TIM_ConfigClockSource+0x186>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004252:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d03e      	beq.n	80042ec <HAL_TIM_ConfigClockSource+0xd4>
 800426e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004272:	f200 8087 	bhi.w	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427a:	f000 8086 	beq.w	800438a <HAL_TIM_ConfigClockSource+0x172>
 800427e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004282:	d87f      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b70      	cmp	r3, #112	; 0x70
 8004286:	d01a      	beq.n	80042be <HAL_TIM_ConfigClockSource+0xa6>
 8004288:	2b70      	cmp	r3, #112	; 0x70
 800428a:	d87b      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b60      	cmp	r3, #96	; 0x60
 800428e:	d050      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x11a>
 8004290:	2b60      	cmp	r3, #96	; 0x60
 8004292:	d877      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b50      	cmp	r3, #80	; 0x50
 8004296:	d03c      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0xfa>
 8004298:	2b50      	cmp	r3, #80	; 0x50
 800429a:	d873      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b40      	cmp	r3, #64	; 0x40
 800429e:	d058      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x13a>
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d86f      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b30      	cmp	r3, #48	; 0x30
 80042a6:	d064      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042a8:	2b30      	cmp	r3, #48	; 0x30
 80042aa:	d86b      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b20      	cmp	r3, #32
 80042ae:	d060      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042b0:	2b20      	cmp	r3, #32
 80042b2:	d867      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d05c      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042b8:	2b10      	cmp	r3, #16
 80042ba:	d05a      	beq.n	8004372 <HAL_TIM_ConfigClockSource+0x15a>
 80042bc:	e062      	b.n	8004384 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f000 f9ad 	bl	800462c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80042e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	609a      	str	r2, [r3, #8]
      break;
 80042ea:	e04f      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	6899      	ldr	r1, [r3, #8]
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	f000 f996 	bl	800462c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800430e:	609a      	str	r2, [r3, #8]
      break;
 8004310:	e03c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	461a      	mov	r2, r3
 8004320:	f000 f90a 	bl	8004538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2150      	movs	r1, #80	; 0x50
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f963 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004330:	e02c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	461a      	mov	r2, r3
 8004340:	f000 f929 	bl	8004596 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2160      	movs	r1, #96	; 0x60
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f953 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004350:	e01c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6818      	ldr	r0, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	461a      	mov	r2, r3
 8004360:	f000 f8ea 	bl	8004538 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2140      	movs	r1, #64	; 0x40
 800436a:	4618      	mov	r0, r3
 800436c:	f000 f943 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004370:	e00c      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f000 f93a 	bl	80045f6 <TIM_ITRx_SetConfig>
      break;
 8004382:	e003      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	73fb      	strb	r3, [r7, #15]
      break;
 8004388:	e000      	b.n	800438c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800438a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800439c:	7bfb      	ldrb	r3, [r7, #15]
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043ae:	bf00      	nop
 80043b0:	370c      	adds	r7, #12
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr

080043ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ba:	b480      	push	{r7}
 80043bc:	b083      	sub	sp, #12
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043c2:	bf00      	nop
 80043c4:	370c      	adds	r7, #12
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ce:	b480      	push	{r7}
 80043d0:	b083      	sub	sp, #12
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043d6:	bf00      	nop
 80043d8:	370c      	adds	r7, #12
 80043da:	46bd      	mov	sp, r7
 80043dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e0:	4770      	bx	lr

080043e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043e2:	b480      	push	{r7}
 80043e4:	b083      	sub	sp, #12
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ea:	bf00      	nop
 80043ec:	370c      	adds	r7, #12
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
	...

080043f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80043f8:	b480      	push	{r7}
 80043fa:	b085      	sub	sp, #20
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a40      	ldr	r2, [pc, #256]	; (800450c <TIM_Base_SetConfig+0x114>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d013      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004416:	d00f      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a3d      	ldr	r2, [pc, #244]	; (8004510 <TIM_Base_SetConfig+0x118>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d00b      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3c      	ldr	r2, [pc, #240]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d007      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a3b      	ldr	r2, [pc, #236]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d003      	beq.n	8004438 <TIM_Base_SetConfig+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d108      	bne.n	800444a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800443e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a2f      	ldr	r2, [pc, #188]	; (800450c <TIM_Base_SetConfig+0x114>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d02b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004458:	d027      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2c      	ldr	r2, [pc, #176]	; (8004510 <TIM_Base_SetConfig+0x118>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d023      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2b      	ldr	r2, [pc, #172]	; (8004514 <TIM_Base_SetConfig+0x11c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d01f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2a      	ldr	r2, [pc, #168]	; (8004518 <TIM_Base_SetConfig+0x120>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a29      	ldr	r2, [pc, #164]	; (800451c <TIM_Base_SetConfig+0x124>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d017      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a28      	ldr	r2, [pc, #160]	; (8004520 <TIM_Base_SetConfig+0x128>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <TIM_Base_SetConfig+0x12c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d00f      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a26      	ldr	r2, [pc, #152]	; (8004528 <TIM_Base_SetConfig+0x130>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <TIM_Base_SetConfig+0x134>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a24      	ldr	r2, [pc, #144]	; (8004530 <TIM_Base_SetConfig+0x138>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0xb2>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a23      	ldr	r2, [pc, #140]	; (8004534 <TIM_Base_SetConfig+0x13c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a0a      	ldr	r2, [pc, #40]	; (800450c <TIM_Base_SetConfig+0x114>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0xf8>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a0c      	ldr	r2, [pc, #48]	; (800451c <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d103      	bne.n	80044f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	691a      	ldr	r2, [r3, #16]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	615a      	str	r2, [r3, #20]
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40010400 	.word	0x40010400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800
 800452c:	40001800 	.word	0x40001800
 8004530:	40001c00 	.word	0x40001c00
 8004534:	40002000 	.word	0x40002000

08004538 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0201 	bic.w	r2, r3, #1
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	011b      	lsls	r3, r3, #4
 8004568:	693a      	ldr	r2, [r7, #16]
 800456a:	4313      	orrs	r3, r2
 800456c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 030a 	bic.w	r3, r3, #10
 8004574:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	693a      	ldr	r2, [r7, #16]
 8004582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	621a      	str	r2, [r3, #32]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004596:	b480      	push	{r7}
 8004598:	b087      	sub	sp, #28
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	f023 0210 	bic.w	r2, r3, #16
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	031b      	lsls	r3, r3, #12
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b085      	sub	sp, #20
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	f043 0307 	orr.w	r3, r3, #7
 8004618:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	609a      	str	r2, [r3, #8]
}
 8004620:	bf00      	nop
 8004622:	3714      	adds	r7, #20
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr

0800462c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	607a      	str	r2, [r7, #4]
 8004638:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004646:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	431a      	orrs	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	609a      	str	r2, [r3, #8]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800467c:	2b01      	cmp	r3, #1
 800467e:	d101      	bne.n	8004684 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004680:	2302      	movs	r3, #2
 8004682:	e05a      	b.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	4313      	orrs	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a21      	ldr	r2, [pc, #132]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d022      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d01d      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1d      	ldr	r2, [pc, #116]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d018      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a1b      	ldr	r2, [pc, #108]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d013      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a1a      	ldr	r2, [pc, #104]	; (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d00e      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a18      	ldr	r2, [pc, #96]	; (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d009      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a17      	ldr	r2, [pc, #92]	; (800475c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d004      	beq.n	800470e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4a15      	ldr	r2, [pc, #84]	; (8004760 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d10c      	bne.n	8004728 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004714:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	68ba      	ldr	r2, [r7, #8]
 800471c:	4313      	orrs	r3, r2
 800471e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	40010000 	.word	0x40010000
 800474c:	40000400 	.word	0x40000400
 8004750:	40000800 	.word	0x40000800
 8004754:	40000c00 	.word	0x40000c00
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40001800 	.word	0x40001800

08004764 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d101      	bne.n	800479e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e03f      	b.n	800481e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc ffdc 	bl	8001770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2224      	movs	r2, #36	; 0x24
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fae1 	bl	8004d98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	695a      	ldr	r2, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004804:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3708      	adds	r7, #8
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08c      	sub	sp, #48	; 0x30
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b20      	cmp	r3, #32
 8004840:	d165      	bne.n	800490e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <HAL_UART_Transmit_DMA+0x26>
 8004848:	88fb      	ldrh	r3, [r7, #6]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e05e      	b.n	8004910 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_UART_Transmit_DMA+0x38>
 800485c:	2302      	movs	r3, #2
 800485e:	e057      	b.n	8004910 <HAL_UART_Transmit_DMA+0xe8>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	88fa      	ldrh	r2, [r7, #6]
 8004872:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	88fa      	ldrh	r2, [r7, #6]
 8004878:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2221      	movs	r2, #33	; 0x21
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_UART_Transmit_DMA+0xf0>)
 800488e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004894:	4a21      	ldr	r2, [pc, #132]	; (800491c <HAL_UART_Transmit_DMA+0xf4>)
 8004896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489c:	4a20      	ldr	r2, [pc, #128]	; (8004920 <HAL_UART_Transmit_DMA+0xf8>)
 800489e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a4:	2200      	movs	r2, #0
 80048a6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80048a8:	f107 0308 	add.w	r3, r7, #8
 80048ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	6819      	ldr	r1, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	3304      	adds	r3, #4
 80048bc:	461a      	mov	r2, r3
 80048be:	88fb      	ldrh	r3, [r7, #6]
 80048c0:	f7fd ffc4 	bl	800284c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	617b      	str	r3, [r7, #20]
   return(result);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048f6:	627a      	str	r2, [r7, #36]	; 0x24
 80048f8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	6a39      	ldr	r1, [r7, #32]
 80048fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048fe:	e841 2300 	strex	r3, r2, [r1]
 8004902:	61fb      	str	r3, [r7, #28]
   return(result);
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1e5      	bne.n	80048d6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e000      	b.n	8004910 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	3730      	adds	r7, #48	; 0x30
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	08004b37 	.word	0x08004b37
 800491c:	08004bd1 	.word	0x08004bd1
 8004920:	08004bed 	.word	0x08004bed

08004924 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b0a0      	sub	sp, #128	; 0x80
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800493c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800493e:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8004942:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800494c:	66ba      	str	r2, [r7, #104]	; 0x68
 800494e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004952:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800495a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <HAL_UART_Abort+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	67bb      	str	r3, [r7, #120]	; 0x78
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004980:	657a      	str	r2, [r7, #84]	; 0x54
 8004982:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004986:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800498e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <HAL_UART_Abort+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d119      	bne.n	80049d0 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ae:	f023 0310 	bic.w	r3, r3, #16
 80049b2:	677b      	str	r3, [r7, #116]	; 0x74
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80049bc:	643a      	str	r2, [r7, #64]	; 0x40
 80049be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <HAL_UART_Abort+0x78>
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b80      	cmp	r3, #128	; 0x80
 80049dc:	d136      	bne.n	8004a4c <HAL_UART_Abort+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049f4:	673b      	str	r3, [r7, #112]	; 0x70
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3314      	adds	r3, #20
 80049fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80049fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <HAL_UART_Abort+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	2200      	movs	r2, #0
 8004a20:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fd ff68 	bl	80028fc <HAL_DMA_Abort>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00c      	beq.n	8004a4c <HAL_UART_Abort+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe f95a 	bl	8002cf0 <HAL_DMA_GetError>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b20      	cmp	r3, #32
 8004a40:	d104      	bne.n	8004a4c <HAL_UART_Abort+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2210      	movs	r2, #16
 8004a46:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e052      	b.n	8004af2 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d136      	bne.n	8004ac8 <HAL_UART_Abort+0x1a4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	e853 3f00 	ldrex	r3, [r3]
 8004a68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a70:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	3314      	adds	r3, #20
 8004a78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a7a:	61ba      	str	r2, [r7, #24]
 8004a7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6979      	ldr	r1, [r7, #20]
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	613b      	str	r3, [r7, #16]
   return(result);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e5      	bne.n	8004a5a <HAL_UART_Abort+0x136>

    /* Abort the UART DMA Rx stream: use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d018      	beq.n	8004ac8 <HAL_UART_Abort+0x1a4>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fd ff2a 	bl	80028fc <HAL_DMA_Abort>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_UART_Abort+0x1a4>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe f91c 	bl	8002cf0 <HAL_DMA_GetError>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d104      	bne.n	8004ac8 <HAL_UART_Abort+0x1a4>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2210      	movs	r2, #16
 8004ac2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e014      	b.n	8004af2 <HAL_UART_Abort+0x1ce>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0x00U;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Restore huart->RxState and huart->gState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->gState = HAL_UART_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3780      	adds	r7, #128	; 0x80
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b02:	bf00      	nop
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr

08004b0e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b36:	b580      	push	{r7, lr}
 8004b38:	b090      	sub	sp, #64	; 0x40
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d137      	bne.n	8004bc2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b54:	2200      	movs	r2, #0
 8004b56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	e853 3f00 	ldrex	r3, [r3]
 8004b66:	623b      	str	r3, [r7, #32]
   return(result);
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b78:	633a      	str	r2, [r7, #48]	; 0x30
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b80:	e841 2300 	strex	r3, r2, [r1]
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e5      	bne.n	8004b58 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bac:	61fa      	str	r2, [r7, #28]
 8004bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69b9      	ldr	r1, [r7, #24]
 8004bb2:	69fa      	ldr	r2, [r7, #28]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bc0:	e002      	b.n	8004bc8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004bc2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004bc4:	f7ff ff99 	bl	8004afa <HAL_UART_TxCpltCallback>
}
 8004bc8:	bf00      	nop
 8004bca:	3740      	adds	r7, #64	; 0x40
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bde:	68f8      	ldr	r0, [r7, #12]
 8004be0:	f7ff ff95 	bl	8004b0e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004be4:	bf00      	nop
 8004be6:	3710      	adds	r7, #16
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c08:	2b80      	cmp	r3, #128	; 0x80
 8004c0a:	bf0c      	ite	eq
 8004c0c:	2301      	moveq	r3, #1
 8004c0e:	2300      	movne	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b21      	cmp	r3, #33	; 0x21
 8004c1e:	d108      	bne.n	8004c32 <UART_DMAError+0x46>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d005      	beq.n	8004c32 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c2c:	68b8      	ldr	r0, [r7, #8]
 8004c2e:	f000 f827 	bl	8004c80 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3c:	2b40      	cmp	r3, #64	; 0x40
 8004c3e:	bf0c      	ite	eq
 8004c40:	2301      	moveq	r3, #1
 8004c42:	2300      	movne	r3, #0
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b22      	cmp	r3, #34	; 0x22
 8004c52:	d108      	bne.n	8004c66 <UART_DMAError+0x7a>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c60:	68b8      	ldr	r0, [r7, #8]
 8004c62:	f000 f835 	bl	8004cd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6a:	f043 0210 	orr.w	r2, r3, #16
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c72:	68b8      	ldr	r0, [r7, #8]
 8004c74:	f7ff ff55 	bl	8004b22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c78:	bf00      	nop
 8004c7a:	3710      	adds	r7, #16
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	e853 3f00 	ldrex	r3, [r3]
 8004c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	61ba      	str	r2, [r7, #24]
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cac:	6979      	ldr	r1, [r7, #20]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	e841 2300 	strex	r3, r2, [r1]
 8004cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d1e5      	bne.n	8004c88 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004cc4:	bf00      	nop
 8004cc6:	3724      	adds	r7, #36	; 0x24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b095      	sub	sp, #84	; 0x54
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	330c      	adds	r3, #12
 8004cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004cf8:	643a      	str	r2, [r7, #64]	; 0x40
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004cfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d00:	e841 2300 	strex	r3, r2, [r1]
 8004d04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1e5      	bne.n	8004cd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d14:	6a3b      	ldr	r3, [r7, #32]
 8004d16:	e853 3f00 	ldrex	r3, [r3]
 8004d1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	f023 0301 	bic.w	r3, r3, #1
 8004d22:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3314      	adds	r3, #20
 8004d2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d34:	e841 2300 	strex	r3, r2, [r1]
 8004d38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e5      	bne.n	8004d0c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d119      	bne.n	8004d7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	e853 3f00 	ldrex	r3, [r3]
 8004d56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f023 0310 	bic.w	r3, r3, #16
 8004d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	330c      	adds	r3, #12
 8004d66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d68:	61ba      	str	r2, [r7, #24]
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d6c:	6979      	ldr	r1, [r7, #20]
 8004d6e:	69ba      	ldr	r2, [r7, #24]
 8004d70:	e841 2300 	strex	r3, r2, [r1]
 8004d74:	613b      	str	r3, [r7, #16]
   return(result);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d1e5      	bne.n	8004d48 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d8a:	bf00      	nop
 8004d8c:	3754      	adds	r7, #84	; 0x54
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b0c0      	sub	sp, #256	; 0x100
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004db4:	68d9      	ldr	r1, [r3, #12]
 8004db6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	ea40 0301 	orr.w	r3, r0, r1
 8004dc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004df0:	f021 010c 	bic.w	r1, r1, #12
 8004df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004dfe:	430b      	orrs	r3, r1
 8004e00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695b      	ldr	r3, [r3, #20]
 8004e0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e12:	6999      	ldr	r1, [r3, #24]
 8004e14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	ea40 0301 	orr.w	r3, r0, r1
 8004e1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	4b8f      	ldr	r3, [pc, #572]	; (8005064 <UART_SetConfig+0x2cc>)
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d005      	beq.n	8004e38 <UART_SetConfig+0xa0>
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b8d      	ldr	r3, [pc, #564]	; (8005068 <UART_SetConfig+0x2d0>)
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d104      	bne.n	8004e42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fe fb12 	bl	8003460 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004e40:	e003      	b.n	8004e4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e42:	f7fe faf9 	bl	8003438 <HAL_RCC_GetPCLK1Freq>
 8004e46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	69db      	ldr	r3, [r3, #28]
 8004e50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e54:	f040 810c 	bne.w	8005070 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004e62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004e66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004e6a:	4622      	mov	r2, r4
 8004e6c:	462b      	mov	r3, r5
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	65b9      	str	r1, [r7, #88]	; 0x58
 8004e72:	415b      	adcs	r3, r3
 8004e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	eb12 0801 	adds.w	r8, r2, r1
 8004e80:	4629      	mov	r1, r5
 8004e82:	eb43 0901 	adc.w	r9, r3, r1
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e9a:	4690      	mov	r8, r2
 8004e9c:	4699      	mov	r9, r3
 8004e9e:	4623      	mov	r3, r4
 8004ea0:	eb18 0303 	adds.w	r3, r8, r3
 8004ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004ea8:	462b      	mov	r3, r5
 8004eaa:	eb49 0303 	adc.w	r3, r9, r3
 8004eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004ebe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004ec2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	18db      	adds	r3, r3, r3
 8004eca:	653b      	str	r3, [r7, #80]	; 0x50
 8004ecc:	4613      	mov	r3, r2
 8004ece:	eb42 0303 	adc.w	r3, r2, r3
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ed4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ed8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004edc:	f7fb fed4 	bl	8000c88 <__aeabi_uldivmod>
 8004ee0:	4602      	mov	r2, r0
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	4b61      	ldr	r3, [pc, #388]	; (800506c <UART_SetConfig+0x2d4>)
 8004ee6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eea:	095b      	lsrs	r3, r3, #5
 8004eec:	011c      	lsls	r4, r3, #4
 8004eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ef8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004efc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004f00:	4642      	mov	r2, r8
 8004f02:	464b      	mov	r3, r9
 8004f04:	1891      	adds	r1, r2, r2
 8004f06:	64b9      	str	r1, [r7, #72]	; 0x48
 8004f08:	415b      	adcs	r3, r3
 8004f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004f10:	4641      	mov	r1, r8
 8004f12:	eb12 0a01 	adds.w	sl, r2, r1
 8004f16:	4649      	mov	r1, r9
 8004f18:	eb43 0b01 	adc.w	fp, r3, r1
 8004f1c:	f04f 0200 	mov.w	r2, #0
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f30:	4692      	mov	sl, r2
 8004f32:	469b      	mov	fp, r3
 8004f34:	4643      	mov	r3, r8
 8004f36:	eb1a 0303 	adds.w	r3, sl, r3
 8004f3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	eb4b 0303 	adc.w	r3, fp, r3
 8004f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004f58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	18db      	adds	r3, r3, r3
 8004f60:	643b      	str	r3, [r7, #64]	; 0x40
 8004f62:	4613      	mov	r3, r2
 8004f64:	eb42 0303 	adc.w	r3, r2, r3
 8004f68:	647b      	str	r3, [r7, #68]	; 0x44
 8004f6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004f6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004f72:	f7fb fe89 	bl	8000c88 <__aeabi_uldivmod>
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	4611      	mov	r1, r2
 8004f7c:	4b3b      	ldr	r3, [pc, #236]	; (800506c <UART_SetConfig+0x2d4>)
 8004f7e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f82:	095b      	lsrs	r3, r3, #5
 8004f84:	2264      	movs	r2, #100	; 0x64
 8004f86:	fb02 f303 	mul.w	r3, r2, r3
 8004f8a:	1acb      	subs	r3, r1, r3
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004f92:	4b36      	ldr	r3, [pc, #216]	; (800506c <UART_SetConfig+0x2d4>)
 8004f94:	fba3 2302 	umull	r2, r3, r3, r2
 8004f98:	095b      	lsrs	r3, r3, #5
 8004f9a:	005b      	lsls	r3, r3, #1
 8004f9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004fa0:	441c      	add	r4, r3
 8004fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004fb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	464b      	mov	r3, r9
 8004fb8:	1891      	adds	r1, r2, r2
 8004fba:	63b9      	str	r1, [r7, #56]	; 0x38
 8004fbc:	415b      	adcs	r3, r3
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004fc4:	4641      	mov	r1, r8
 8004fc6:	1851      	adds	r1, r2, r1
 8004fc8:	6339      	str	r1, [r7, #48]	; 0x30
 8004fca:	4649      	mov	r1, r9
 8004fcc:	414b      	adcs	r3, r1
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	f04f 0300 	mov.w	r3, #0
 8004fd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004fdc:	4659      	mov	r1, fp
 8004fde:	00cb      	lsls	r3, r1, #3
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fe6:	4651      	mov	r1, sl
 8004fe8:	00ca      	lsls	r2, r1, #3
 8004fea:	4610      	mov	r0, r2
 8004fec:	4619      	mov	r1, r3
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4642      	mov	r2, r8
 8004ff2:	189b      	adds	r3, r3, r2
 8004ff4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ff8:	464b      	mov	r3, r9
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	eb42 0303 	adc.w	r3, r2, r3
 8005000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005010:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005014:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005018:	460b      	mov	r3, r1
 800501a:	18db      	adds	r3, r3, r3
 800501c:	62bb      	str	r3, [r7, #40]	; 0x28
 800501e:	4613      	mov	r3, r2
 8005020:	eb42 0303 	adc.w	r3, r2, r3
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800502a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800502e:	f7fb fe2b 	bl	8000c88 <__aeabi_uldivmod>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4b0d      	ldr	r3, [pc, #52]	; (800506c <UART_SetConfig+0x2d4>)
 8005038:	fba3 1302 	umull	r1, r3, r3, r2
 800503c:	095b      	lsrs	r3, r3, #5
 800503e:	2164      	movs	r1, #100	; 0x64
 8005040:	fb01 f303 	mul.w	r3, r1, r3
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	3332      	adds	r3, #50	; 0x32
 800504a:	4a08      	ldr	r2, [pc, #32]	; (800506c <UART_SetConfig+0x2d4>)
 800504c:	fba2 2303 	umull	r2, r3, r2, r3
 8005050:	095b      	lsrs	r3, r3, #5
 8005052:	f003 0207 	and.w	r2, r3, #7
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4422      	add	r2, r4
 800505e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005060:	e105      	b.n	800526e <UART_SetConfig+0x4d6>
 8005062:	bf00      	nop
 8005064:	40011000 	.word	0x40011000
 8005068:	40011400 	.word	0x40011400
 800506c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800507a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800507e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005082:	4642      	mov	r2, r8
 8005084:	464b      	mov	r3, r9
 8005086:	1891      	adds	r1, r2, r2
 8005088:	6239      	str	r1, [r7, #32]
 800508a:	415b      	adcs	r3, r3
 800508c:	627b      	str	r3, [r7, #36]	; 0x24
 800508e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005092:	4641      	mov	r1, r8
 8005094:	1854      	adds	r4, r2, r1
 8005096:	4649      	mov	r1, r9
 8005098:	eb43 0501 	adc.w	r5, r3, r1
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	00eb      	lsls	r3, r5, #3
 80050a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	4614      	mov	r4, r2
 80050ae:	461d      	mov	r5, r3
 80050b0:	4643      	mov	r3, r8
 80050b2:	18e3      	adds	r3, r4, r3
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80050b8:	464b      	mov	r3, r9
 80050ba:	eb45 0303 	adc.w	r3, r5, r3
 80050be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80050c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80050ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80050d2:	f04f 0200 	mov.w	r2, #0
 80050d6:	f04f 0300 	mov.w	r3, #0
 80050da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80050de:	4629      	mov	r1, r5
 80050e0:	008b      	lsls	r3, r1, #2
 80050e2:	4621      	mov	r1, r4
 80050e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050e8:	4621      	mov	r1, r4
 80050ea:	008a      	lsls	r2, r1, #2
 80050ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80050f0:	f7fb fdca 	bl	8000c88 <__aeabi_uldivmod>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4b60      	ldr	r3, [pc, #384]	; (800527c <UART_SetConfig+0x4e4>)
 80050fa:	fba3 2302 	umull	r2, r3, r3, r2
 80050fe:	095b      	lsrs	r3, r3, #5
 8005100:	011c      	lsls	r4, r3, #4
 8005102:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005106:	2200      	movs	r2, #0
 8005108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800510c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005110:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005114:	4642      	mov	r2, r8
 8005116:	464b      	mov	r3, r9
 8005118:	1891      	adds	r1, r2, r2
 800511a:	61b9      	str	r1, [r7, #24]
 800511c:	415b      	adcs	r3, r3
 800511e:	61fb      	str	r3, [r7, #28]
 8005120:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005124:	4641      	mov	r1, r8
 8005126:	1851      	adds	r1, r2, r1
 8005128:	6139      	str	r1, [r7, #16]
 800512a:	4649      	mov	r1, r9
 800512c:	414b      	adcs	r3, r1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800513c:	4659      	mov	r1, fp
 800513e:	00cb      	lsls	r3, r1, #3
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005146:	4651      	mov	r1, sl
 8005148:	00ca      	lsls	r2, r1, #3
 800514a:	4610      	mov	r0, r2
 800514c:	4619      	mov	r1, r3
 800514e:	4603      	mov	r3, r0
 8005150:	4642      	mov	r2, r8
 8005152:	189b      	adds	r3, r3, r2
 8005154:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005158:	464b      	mov	r3, r9
 800515a:	460a      	mov	r2, r1
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	67bb      	str	r3, [r7, #120]	; 0x78
 800516e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800517c:	4649      	mov	r1, r9
 800517e:	008b      	lsls	r3, r1, #2
 8005180:	4641      	mov	r1, r8
 8005182:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005186:	4641      	mov	r1, r8
 8005188:	008a      	lsls	r2, r1, #2
 800518a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800518e:	f7fb fd7b 	bl	8000c88 <__aeabi_uldivmod>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4b39      	ldr	r3, [pc, #228]	; (800527c <UART_SetConfig+0x4e4>)
 8005198:	fba3 1302 	umull	r1, r3, r3, r2
 800519c:	095b      	lsrs	r3, r3, #5
 800519e:	2164      	movs	r1, #100	; 0x64
 80051a0:	fb01 f303 	mul.w	r3, r1, r3
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	3332      	adds	r3, #50	; 0x32
 80051aa:	4a34      	ldr	r2, [pc, #208]	; (800527c <UART_SetConfig+0x4e4>)
 80051ac:	fba2 2303 	umull	r2, r3, r2, r3
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b6:	441c      	add	r4, r3
 80051b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051bc:	2200      	movs	r2, #0
 80051be:	673b      	str	r3, [r7, #112]	; 0x70
 80051c0:	677a      	str	r2, [r7, #116]	; 0x74
 80051c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80051c6:	4642      	mov	r2, r8
 80051c8:	464b      	mov	r3, r9
 80051ca:	1891      	adds	r1, r2, r2
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	415b      	adcs	r3, r3
 80051d0:	60fb      	str	r3, [r7, #12]
 80051d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051d6:	4641      	mov	r1, r8
 80051d8:	1851      	adds	r1, r2, r1
 80051da:	6039      	str	r1, [r7, #0]
 80051dc:	4649      	mov	r1, r9
 80051de:	414b      	adcs	r3, r1
 80051e0:	607b      	str	r3, [r7, #4]
 80051e2:	f04f 0200 	mov.w	r2, #0
 80051e6:	f04f 0300 	mov.w	r3, #0
 80051ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80051ee:	4659      	mov	r1, fp
 80051f0:	00cb      	lsls	r3, r1, #3
 80051f2:	4651      	mov	r1, sl
 80051f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051f8:	4651      	mov	r1, sl
 80051fa:	00ca      	lsls	r2, r1, #3
 80051fc:	4610      	mov	r0, r2
 80051fe:	4619      	mov	r1, r3
 8005200:	4603      	mov	r3, r0
 8005202:	4642      	mov	r2, r8
 8005204:	189b      	adds	r3, r3, r2
 8005206:	66bb      	str	r3, [r7, #104]	; 0x68
 8005208:	464b      	mov	r3, r9
 800520a:	460a      	mov	r2, r1
 800520c:	eb42 0303 	adc.w	r3, r2, r3
 8005210:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	663b      	str	r3, [r7, #96]	; 0x60
 800521c:	667a      	str	r2, [r7, #100]	; 0x64
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800522a:	4649      	mov	r1, r9
 800522c:	008b      	lsls	r3, r1, #2
 800522e:	4641      	mov	r1, r8
 8005230:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005234:	4641      	mov	r1, r8
 8005236:	008a      	lsls	r2, r1, #2
 8005238:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800523c:	f7fb fd24 	bl	8000c88 <__aeabi_uldivmod>
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	4b0d      	ldr	r3, [pc, #52]	; (800527c <UART_SetConfig+0x4e4>)
 8005246:	fba3 1302 	umull	r1, r3, r3, r2
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2164      	movs	r1, #100	; 0x64
 800524e:	fb01 f303 	mul.w	r3, r1, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	011b      	lsls	r3, r3, #4
 8005256:	3332      	adds	r3, #50	; 0x32
 8005258:	4a08      	ldr	r2, [pc, #32]	; (800527c <UART_SetConfig+0x4e4>)
 800525a:	fba2 2303 	umull	r2, r3, r2, r3
 800525e:	095b      	lsrs	r3, r3, #5
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4422      	add	r2, r4
 800526c:	609a      	str	r2, [r3, #8]
}
 800526e:	bf00      	nop
 8005270:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005274:	46bd      	mov	sp, r7
 8005276:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800527a:	bf00      	nop
 800527c:	51eb851f 	.word	0x51eb851f

08005280 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800528a:	2300      	movs	r3, #0
 800528c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800528e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005292:	2b84      	cmp	r3, #132	; 0x84
 8005294:	d005      	beq.n	80052a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005296:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	3303      	adds	r3, #3
 80052a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80052a2:	68fb      	ldr	r3, [r7, #12]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80052b4:	f000 faf6 	bl	80058a4 <vTaskStartScheduler>
  
  return osOK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	bd80      	pop	{r7, pc}

080052be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80052be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052c0:	b089      	sub	sp, #36	; 0x24
 80052c2:	af04      	add	r7, sp, #16
 80052c4:	6078      	str	r0, [r7, #4]
 80052c6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d020      	beq.n	8005312 <osThreadCreate+0x54>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d01c      	beq.n	8005312 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685c      	ldr	r4, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681d      	ldr	r5, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691e      	ldr	r6, [r3, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7ff ffc8 	bl	8005280 <makeFreeRtosPriority>
 80052f0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80052fa:	9202      	str	r2, [sp, #8]
 80052fc:	9301      	str	r3, [sp, #4]
 80052fe:	9100      	str	r1, [sp, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	4632      	mov	r2, r6
 8005304:	4629      	mov	r1, r5
 8005306:	4620      	mov	r0, r4
 8005308:	f000 f8ed 	bl	80054e6 <xTaskCreateStatic>
 800530c:	4603      	mov	r3, r0
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e01c      	b.n	800534c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685c      	ldr	r4, [r3, #4]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800531e:	b29e      	uxth	r6, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f7ff ffaa 	bl	8005280 <makeFreeRtosPriority>
 800532c:	4602      	mov	r2, r0
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	9200      	str	r2, [sp, #0]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	4632      	mov	r2, r6
 800533a:	4629      	mov	r1, r5
 800533c:	4620      	mov	r0, r4
 800533e:	f000 f92f 	bl	80055a0 <xTaskCreate>
 8005342:	4603      	mov	r3, r0
 8005344:	2b01      	cmp	r3, #1
 8005346:	d001      	beq.n	800534c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005348:	2300      	movs	r3, #0
 800534a:	e000      	b.n	800534e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800534c:	68fb      	ldr	r3, [r7, #12]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3714      	adds	r7, #20
 8005352:	46bd      	mov	sp, r7
 8005354:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005356 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d001      	beq.n	800536c <osDelay+0x16>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	e000      	b.n	800536e <osDelay+0x18>
 800536c:	2301      	movs	r3, #1
 800536e:	4618      	mov	r0, r3
 8005370:	f000 fa64 	bl	800583c <vTaskDelay>
  
  return osOK;
 8005374:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f103 0208 	add.w	r2, r3, #8
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f04f 32ff 	mov.w	r2, #4294967295
 8005396:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 0208 	add.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f103 0208 	add.w	r2, r3, #8
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	601a      	str	r2, [r3, #0]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d103      	bne.n	8005440 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e00c      	b.n	800545a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	3308      	adds	r3, #8
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e002      	b.n	800544e <vListInsert+0x2e>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68ba      	ldr	r2, [r7, #8]
 8005456:	429a      	cmp	r2, r3
 8005458:	d2f6      	bcs.n	8005448 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	685a      	ldr	r2, [r3, #4]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	1c5a      	adds	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	601a      	str	r2, [r3, #0]
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005492:	b480      	push	{r7}
 8005494:	b085      	sub	sp, #20
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6892      	ldr	r2, [r2, #8]
 80054a8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6852      	ldr	r2, [r2, #4]
 80054b2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d103      	bne.n	80054c6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689a      	ldr	r2, [r3, #8]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1e5a      	subs	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr

080054e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b08e      	sub	sp, #56	; 0x38
 80054ea:	af04      	add	r7, sp, #16
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	60b9      	str	r1, [r7, #8]
 80054f0:	607a      	str	r2, [r7, #4]
 80054f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10a      	bne.n	8005510 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fe:	f383 8811 	msr	BASEPRI, r3
 8005502:	f3bf 8f6f 	isb	sy
 8005506:	f3bf 8f4f 	dsb	sy
 800550a:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800550c:	bf00      	nop
 800550e:	e7fe      	b.n	800550e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	2b00      	cmp	r3, #0
 8005514:	d10a      	bne.n	800552c <xTaskCreateStatic+0x46>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	61fb      	str	r3, [r7, #28]
}
 8005528:	bf00      	nop
 800552a:	e7fe      	b.n	800552a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800552c:	23b4      	movs	r3, #180	; 0xb4
 800552e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	2bb4      	cmp	r3, #180	; 0xb4
 8005534:	d00a      	beq.n	800554c <xTaskCreateStatic+0x66>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	61bb      	str	r3, [r7, #24]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800554c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800554e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005550:	2b00      	cmp	r3, #0
 8005552:	d01e      	beq.n	8005592 <xTaskCreateStatic+0xac>
 8005554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005556:	2b00      	cmp	r3, #0
 8005558:	d01b      	beq.n	8005592 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800555e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005562:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	2202      	movs	r2, #2
 8005568:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800556c:	2300      	movs	r3, #0
 800556e:	9303      	str	r3, [sp, #12]
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f000 f851 	bl	800562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800558a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800558c:	f000 f8ec 	bl	8005768 <prvAddNewTaskToReadyList>
 8005590:	e001      	b.n	8005596 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005596:	697b      	ldr	r3, [r7, #20]
	}
 8005598:	4618      	mov	r0, r3
 800559a:	3728      	adds	r7, #40	; 0x28
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08c      	sub	sp, #48	; 0x30
 80055a4:	af04      	add	r7, sp, #16
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80055b0:	88fb      	ldrh	r3, [r7, #6]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 feef 	bl	8006398 <pvPortMalloc>
 80055ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00e      	beq.n	80055e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80055c2:	20b4      	movs	r0, #180	; 0xb4
 80055c4:	f000 fee8 	bl	8006398 <pvPortMalloc>
 80055c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d003      	beq.n	80055d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
 80055d6:	e005      	b.n	80055e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055d8:	6978      	ldr	r0, [r7, #20]
 80055da:	f000 ffa9 	bl	8006530 <vPortFree>
 80055de:	e001      	b.n	80055e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d017      	beq.n	800561a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055f2:	88fa      	ldrh	r2, [r7, #6]
 80055f4:	2300      	movs	r3, #0
 80055f6:	9303      	str	r3, [sp, #12]
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	9302      	str	r3, [sp, #8]
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	9301      	str	r3, [sp, #4]
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f000 f80f 	bl	800562c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800560e:	69f8      	ldr	r0, [r7, #28]
 8005610:	f000 f8aa 	bl	8005768 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005614:	2301      	movs	r3, #1
 8005616:	61bb      	str	r3, [r7, #24]
 8005618:	e002      	b.n	8005620 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005620:	69bb      	ldr	r3, [r7, #24]
	}
 8005622:	4618      	mov	r0, r3
 8005624:	3720      	adds	r7, #32
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
 8005638:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800563a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005644:	3b01      	subs	r3, #1
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	4413      	add	r3, r2
 800564a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	f023 0307 	bic.w	r3, r3, #7
 8005652:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <prvInitialiseNewTask+0x48>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	617b      	str	r3, [r7, #20]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d01f      	beq.n	80056ba <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800567a:	2300      	movs	r3, #0
 800567c:	61fb      	str	r3, [r7, #28]
 800567e:	e012      	b.n	80056a6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	4413      	add	r3, r2
 8005686:	7819      	ldrb	r1, [r3, #0]
 8005688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800568a:	69fb      	ldr	r3, [r7, #28]
 800568c:	4413      	add	r3, r2
 800568e:	3334      	adds	r3, #52	; 0x34
 8005690:	460a      	mov	r2, r1
 8005692:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	4413      	add	r3, r2
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	3301      	adds	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	2b0f      	cmp	r3, #15
 80056aa:	d9e9      	bls.n	8005680 <prvInitialiseNewTask+0x54>
 80056ac:	e000      	b.n	80056b0 <prvInitialiseNewTask+0x84>
			{
				break;
 80056ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056b8:	e003      	b.n	80056c2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	2b06      	cmp	r3, #6
 80056c6:	d901      	bls.n	80056cc <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80056c8:	2306      	movs	r3, #6
 80056ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80056d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056d6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056da:	2200      	movs	r2, #0
 80056dc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056e0:	3304      	adds	r3, #4
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fe6b 	bl	80053be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ea:	3318      	adds	r3, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7ff fe66 	bl	80053be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fa:	f1c3 0207 	rsb	r2, r3, #7
 80056fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005700:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005706:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005712:	2200      	movs	r2, #0
 8005714:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	334c      	adds	r3, #76	; 0x4c
 800571c:	2260      	movs	r2, #96	; 0x60
 800571e:	2100      	movs	r1, #0
 8005720:	4618      	mov	r0, r3
 8005722:	f001 f954 	bl	80069ce <memset>
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	4a0c      	ldr	r2, [pc, #48]	; (800575c <prvInitialiseNewTask+0x130>)
 800572a:	651a      	str	r2, [r3, #80]	; 0x50
 800572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572e:	4a0c      	ldr	r2, [pc, #48]	; (8005760 <prvInitialiseNewTask+0x134>)
 8005730:	655a      	str	r2, [r3, #84]	; 0x54
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <prvInitialiseNewTask+0x138>)
 8005736:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	69b8      	ldr	r0, [r7, #24]
 800573e:	f000 fc1f 	bl	8005f80 <pxPortInitialiseStack>
 8005742:	4602      	mov	r2, r0
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574a:	2b00      	cmp	r3, #0
 800574c:	d002      	beq.n	8005754 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005752:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08009730 	.word	0x08009730
 8005760:	08009750 	.word	0x08009750
 8005764:	08009710 	.word	0x08009710

08005768 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005770:	f000 fd30 	bl	80061d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	4a29      	ldr	r2, [pc, #164]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 800577c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800577e:	4b29      	ldr	r3, [pc, #164]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d109      	bne.n	800579a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005786:	4a27      	ldr	r2, [pc, #156]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800578c:	4b24      	ldr	r3, [pc, #144]	; (8005820 <prvAddNewTaskToReadyList+0xb8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d110      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005794:	f000 facc 	bl	8005d30 <prvInitialiseTaskLists>
 8005798:	e00d      	b.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800579a:	4b23      	ldr	r3, [pc, #140]	; (8005828 <prvAddNewTaskToReadyList+0xc0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d802      	bhi.n	80057b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80057b6:	4b1d      	ldr	r3, [pc, #116]	; (800582c <prvAddNewTaskToReadyList+0xc4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	3301      	adds	r3, #1
 80057bc:	4a1b      	ldr	r2, [pc, #108]	; (800582c <prvAddNewTaskToReadyList+0xc4>)
 80057be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	4b19      	ldr	r3, [pc, #100]	; (8005830 <prvAddNewTaskToReadyList+0xc8>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <prvAddNewTaskToReadyList+0xc8>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4613      	mov	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <prvAddNewTaskToReadyList+0xcc>)
 80057e0:	441a      	add	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3304      	adds	r3, #4
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7ff fdf5 	bl	80053d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80057ee:	f000 fd21 	bl	8006234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80057f2:	4b0d      	ldr	r3, [pc, #52]	; (8005828 <prvAddNewTaskToReadyList+0xc0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80057fa:	4b0a      	ldr	r3, [pc, #40]	; (8005824 <prvAddNewTaskToReadyList+0xbc>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	429a      	cmp	r2, r3
 8005806:	d207      	bcs.n	8005818 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <prvAddNewTaskToReadyList+0xd0>)
 800580a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005818:	bf00      	nop
 800581a:	3708      	adds	r7, #8
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000808 	.word	0x20000808
 8005824:	20000708 	.word	0x20000708
 8005828:	20000814 	.word	0x20000814
 800582c:	20000824 	.word	0x20000824
 8005830:	20000810 	.word	0x20000810
 8005834:	2000070c 	.word	0x2000070c
 8005838:	e000ed04 	.word	0xe000ed04

0800583c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005844:	2300      	movs	r3, #0
 8005846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800584e:	4b13      	ldr	r3, [pc, #76]	; (800589c <vTaskDelay+0x60>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <vTaskDelay+0x30>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60bb      	str	r3, [r7, #8]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800586c:	f000 f884 	bl	8005978 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005870:	2100      	movs	r1, #0
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fb1e 	bl	8005eb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005878:	f000 f88c 	bl	8005994 <xTaskResumeAll>
 800587c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d107      	bne.n	8005894 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005884:	4b06      	ldr	r3, [pc, #24]	; (80058a0 <vTaskDelay+0x64>)
 8005886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000830 	.word	0x20000830
 80058a0:	e000ed04 	.word	0xe000ed04

080058a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08a      	sub	sp, #40	; 0x28
 80058a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80058aa:	2300      	movs	r3, #0
 80058ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80058b2:	463a      	mov	r2, r7
 80058b4:	1d39      	adds	r1, r7, #4
 80058b6:	f107 0308 	add.w	r3, r7, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fb fb66 	bl	8000f8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80058c0:	6839      	ldr	r1, [r7, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	9202      	str	r2, [sp, #8]
 80058c8:	9301      	str	r3, [sp, #4]
 80058ca:	2300      	movs	r3, #0
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	2300      	movs	r3, #0
 80058d0:	460a      	mov	r2, r1
 80058d2:	4921      	ldr	r1, [pc, #132]	; (8005958 <vTaskStartScheduler+0xb4>)
 80058d4:	4821      	ldr	r0, [pc, #132]	; (800595c <vTaskStartScheduler+0xb8>)
 80058d6:	f7ff fe06 	bl	80054e6 <xTaskCreateStatic>
 80058da:	4603      	mov	r3, r0
 80058dc:	4a20      	ldr	r2, [pc, #128]	; (8005960 <vTaskStartScheduler+0xbc>)
 80058de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80058e0:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <vTaskStartScheduler+0xbc>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80058e8:	2301      	movs	r3, #1
 80058ea:	617b      	str	r3, [r7, #20]
 80058ec:	e001      	b.n	80058f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80058ee:	2300      	movs	r3, #0
 80058f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d11b      	bne.n	8005930 <vTaskStartScheduler+0x8c>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	613b      	str	r3, [r7, #16]
}
 800590a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <vTaskStartScheduler+0xc0>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	334c      	adds	r3, #76	; 0x4c
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <vTaskStartScheduler+0xc4>)
 8005914:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <vTaskStartScheduler+0xc8>)
 8005918:	f04f 32ff 	mov.w	r2, #4294967295
 800591c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800591e:	4b14      	ldr	r3, [pc, #80]	; (8005970 <vTaskStartScheduler+0xcc>)
 8005920:	2201      	movs	r2, #1
 8005922:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005924:	4b13      	ldr	r3, [pc, #76]	; (8005974 <vTaskStartScheduler+0xd0>)
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800592a:	f000 fbb1 	bl	8006090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800592e:	e00e      	b.n	800594e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005936:	d10a      	bne.n	800594e <vTaskStartScheduler+0xaa>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <vTaskStartScheduler+0xa8>
}
 800594e:	bf00      	nop
 8005950:	3718      	adds	r7, #24
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	080096e8 	.word	0x080096e8
 800595c:	08005d01 	.word	0x08005d01
 8005960:	2000082c 	.word	0x2000082c
 8005964:	20000708 	.word	0x20000708
 8005968:	20000010 	.word	0x20000010
 800596c:	20000828 	.word	0x20000828
 8005970:	20000814 	.word	0x20000814
 8005974:	2000080c 	.word	0x2000080c

08005978 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800597c:	4b04      	ldr	r3, [pc, #16]	; (8005990 <vTaskSuspendAll+0x18>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	4a03      	ldr	r2, [pc, #12]	; (8005990 <vTaskSuspendAll+0x18>)
 8005984:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005986:	bf00      	nop
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	20000830 	.word	0x20000830

08005994 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800599e:	2300      	movs	r3, #0
 80059a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80059a2:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <xTaskResumeAll+0x114>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <xTaskResumeAll+0x2c>
	__asm volatile
 80059aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ae:	f383 8811 	msr	BASEPRI, r3
 80059b2:	f3bf 8f6f 	isb	sy
 80059b6:	f3bf 8f4f 	dsb	sy
 80059ba:	603b      	str	r3, [r7, #0]
}
 80059bc:	bf00      	nop
 80059be:	e7fe      	b.n	80059be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80059c0:	f000 fc08 	bl	80061d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80059c4:	4b38      	ldr	r3, [pc, #224]	; (8005aa8 <xTaskResumeAll+0x114>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3b01      	subs	r3, #1
 80059ca:	4a37      	ldr	r2, [pc, #220]	; (8005aa8 <xTaskResumeAll+0x114>)
 80059cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059ce:	4b36      	ldr	r3, [pc, #216]	; (8005aa8 <xTaskResumeAll+0x114>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d161      	bne.n	8005a9a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80059d6:	4b35      	ldr	r3, [pc, #212]	; (8005aac <xTaskResumeAll+0x118>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d05d      	beq.n	8005a9a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059de:	e02e      	b.n	8005a3e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <xTaskResumeAll+0x11c>)
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	68db      	ldr	r3, [r3, #12]
 80059e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	3318      	adds	r3, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff fd50 	bl	8005492 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff fd4b 	bl	8005492 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a00:	2201      	movs	r2, #1
 8005a02:	409a      	lsls	r2, r3
 8005a04:	4b2b      	ldr	r3, [pc, #172]	; (8005ab4 <xTaskResumeAll+0x120>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	4a2a      	ldr	r2, [pc, #168]	; (8005ab4 <xTaskResumeAll+0x120>)
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4a27      	ldr	r2, [pc, #156]	; (8005ab8 <xTaskResumeAll+0x124>)
 8005a1c:	441a      	add	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7ff fcd7 	bl	80053d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2e:	4b23      	ldr	r3, [pc, #140]	; (8005abc <xTaskResumeAll+0x128>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d302      	bcc.n	8005a3e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005a38:	4b21      	ldr	r3, [pc, #132]	; (8005ac0 <xTaskResumeAll+0x12c>)
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a3e:	4b1c      	ldr	r3, [pc, #112]	; (8005ab0 <xTaskResumeAll+0x11c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1cc      	bne.n	80059e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005a4c:	f000 fa12 	bl	8005e74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005a50:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <xTaskResumeAll+0x130>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d010      	beq.n	8005a7e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005a5c:	f000 f836 	bl	8005acc <xTaskIncrementTick>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8005a66:	4b16      	ldr	r3, [pc, #88]	; (8005ac0 <xTaskResumeAll+0x12c>)
 8005a68:	2201      	movs	r2, #1
 8005a6a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d1f1      	bne.n	8005a5c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a78:	4b12      	ldr	r3, [pc, #72]	; (8005ac4 <xTaskResumeAll+0x130>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <xTaskResumeAll+0x12c>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d009      	beq.n	8005a9a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a86:	2301      	movs	r3, #1
 8005a88:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ac8 <xTaskResumeAll+0x134>)
 8005a8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a90:	601a      	str	r2, [r3, #0]
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a9a:	f000 fbcb 	bl	8006234 <vPortExitCritical>

	return xAlreadyYielded;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000830 	.word	0x20000830
 8005aac:	20000808 	.word	0x20000808
 8005ab0:	200007c8 	.word	0x200007c8
 8005ab4:	20000810 	.word	0x20000810
 8005ab8:	2000070c 	.word	0x2000070c
 8005abc:	20000708 	.word	0x20000708
 8005ac0:	2000081c 	.word	0x2000081c
 8005ac4:	20000818 	.word	0x20000818
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ad6:	4b4e      	ldr	r3, [pc, #312]	; (8005c10 <xTaskIncrementTick+0x144>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f040 808e 	bne.w	8005bfc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ae0:	4b4c      	ldr	r3, [pc, #304]	; (8005c14 <xTaskIncrementTick+0x148>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ae8:	4a4a      	ldr	r2, [pc, #296]	; (8005c14 <xTaskIncrementTick+0x148>)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d120      	bne.n	8005b36 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005af4:	4b48      	ldr	r3, [pc, #288]	; (8005c18 <xTaskIncrementTick+0x14c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00a      	beq.n	8005b14 <xTaskIncrementTick+0x48>
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	603b      	str	r3, [r7, #0]
}
 8005b10:	bf00      	nop
 8005b12:	e7fe      	b.n	8005b12 <xTaskIncrementTick+0x46>
 8005b14:	4b40      	ldr	r3, [pc, #256]	; (8005c18 <xTaskIncrementTick+0x14c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	60fb      	str	r3, [r7, #12]
 8005b1a:	4b40      	ldr	r3, [pc, #256]	; (8005c1c <xTaskIncrementTick+0x150>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a3e      	ldr	r2, [pc, #248]	; (8005c18 <xTaskIncrementTick+0x14c>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	4a3e      	ldr	r2, [pc, #248]	; (8005c1c <xTaskIncrementTick+0x150>)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <xTaskIncrementTick+0x154>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	4a3c      	ldr	r2, [pc, #240]	; (8005c20 <xTaskIncrementTick+0x154>)
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	f000 f99f 	bl	8005e74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005b36:	4b3b      	ldr	r3, [pc, #236]	; (8005c24 <xTaskIncrementTick+0x158>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d348      	bcc.n	8005bd2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b40:	4b35      	ldr	r3, [pc, #212]	; (8005c18 <xTaskIncrementTick+0x14c>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d104      	bne.n	8005b54 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4a:	4b36      	ldr	r3, [pc, #216]	; (8005c24 <xTaskIncrementTick+0x158>)
 8005b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b50:	601a      	str	r2, [r3, #0]
					break;
 8005b52:	e03e      	b.n	8005bd2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b54:	4b30      	ldr	r3, [pc, #192]	; (8005c18 <xTaskIncrementTick+0x14c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005b64:	693a      	ldr	r2, [r7, #16]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d203      	bcs.n	8005b74 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005b6c:	4a2d      	ldr	r2, [pc, #180]	; (8005c24 <xTaskIncrementTick+0x158>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005b72:	e02e      	b.n	8005bd2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff fc8a 	bl	8005492 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	3318      	adds	r3, #24
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f7ff fc81 	bl	8005492 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b94:	2201      	movs	r2, #1
 8005b96:	409a      	lsls	r2, r3
 8005b98:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <xTaskIncrementTick+0x15c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	4a22      	ldr	r2, [pc, #136]	; (8005c28 <xTaskIncrementTick+0x15c>)
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4a1f      	ldr	r2, [pc, #124]	; (8005c2c <xTaskIncrementTick+0x160>)
 8005bb0:	441a      	add	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	4610      	mov	r0, r2
 8005bba:	f7ff fc0d 	bl	80053d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc2:	4b1b      	ldr	r3, [pc, #108]	; (8005c30 <xTaskIncrementTick+0x164>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d3b9      	bcc.n	8005b40 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bd0:	e7b6      	b.n	8005b40 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005bd2:	4b17      	ldr	r3, [pc, #92]	; (8005c30 <xTaskIncrementTick+0x164>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd8:	4914      	ldr	r1, [pc, #80]	; (8005c2c <xTaskIncrementTick+0x160>)
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	440b      	add	r3, r1
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d901      	bls.n	8005bee <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005bea:	2301      	movs	r3, #1
 8005bec:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005bee:	4b11      	ldr	r3, [pc, #68]	; (8005c34 <xTaskIncrementTick+0x168>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
 8005bfa:	e004      	b.n	8005c06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005bfc:	4b0e      	ldr	r3, [pc, #56]	; (8005c38 <xTaskIncrementTick+0x16c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	4a0d      	ldr	r2, [pc, #52]	; (8005c38 <xTaskIncrementTick+0x16c>)
 8005c04:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20000830 	.word	0x20000830
 8005c14:	2000080c 	.word	0x2000080c
 8005c18:	200007c0 	.word	0x200007c0
 8005c1c:	200007c4 	.word	0x200007c4
 8005c20:	20000820 	.word	0x20000820
 8005c24:	20000828 	.word	0x20000828
 8005c28:	20000810 	.word	0x20000810
 8005c2c:	2000070c 	.word	0x2000070c
 8005c30:	20000708 	.word	0x20000708
 8005c34:	2000081c 	.word	0x2000081c
 8005c38:	20000818 	.word	0x20000818

08005c3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b087      	sub	sp, #28
 8005c40:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005c42:	4b29      	ldr	r3, [pc, #164]	; (8005ce8 <vTaskSwitchContext+0xac>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d003      	beq.n	8005c52 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005c4a:	4b28      	ldr	r3, [pc, #160]	; (8005cec <vTaskSwitchContext+0xb0>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005c50:	e044      	b.n	8005cdc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8005c52:	4b26      	ldr	r3, [pc, #152]	; (8005cec <vTaskSwitchContext+0xb0>)
 8005c54:	2200      	movs	r2, #0
 8005c56:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c58:	4b25      	ldr	r3, [pc, #148]	; (8005cf0 <vTaskSwitchContext+0xb4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	fab3 f383 	clz	r3, r3
 8005c64:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005c66:	7afb      	ldrb	r3, [r7, #11]
 8005c68:	f1c3 031f 	rsb	r3, r3, #31
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	4921      	ldr	r1, [pc, #132]	; (8005cf4 <vTaskSwitchContext+0xb8>)
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d10a      	bne.n	8005c98 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c86:	f383 8811 	msr	BASEPRI, r3
 8005c8a:	f3bf 8f6f 	isb	sy
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	607b      	str	r3, [r7, #4]
}
 8005c94:	bf00      	nop
 8005c96:	e7fe      	b.n	8005c96 <vTaskSwitchContext+0x5a>
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	4413      	add	r3, r2
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	4a14      	ldr	r2, [pc, #80]	; (8005cf4 <vTaskSwitchContext+0xb8>)
 8005ca4:	4413      	add	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	605a      	str	r2, [r3, #4]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	685a      	ldr	r2, [r3, #4]
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	3308      	adds	r3, #8
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d104      	bne.n	8005cc8 <vTaskSwitchContext+0x8c>
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	605a      	str	r2, [r3, #4]
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <vTaskSwitchContext+0xbc>)
 8005cd0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005cd2:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <vTaskSwitchContext+0xbc>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	334c      	adds	r3, #76	; 0x4c
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <vTaskSwitchContext+0xc0>)
 8005cda:	6013      	str	r3, [r2, #0]
}
 8005cdc:	bf00      	nop
 8005cde:	371c      	adds	r7, #28
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr
 8005ce8:	20000830 	.word	0x20000830
 8005cec:	2000081c 	.word	0x2000081c
 8005cf0:	20000810 	.word	0x20000810
 8005cf4:	2000070c 	.word	0x2000070c
 8005cf8:	20000708 	.word	0x20000708
 8005cfc:	20000010 	.word	0x20000010

08005d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d08:	f000 f852 	bl	8005db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d0c:	4b06      	ldr	r3, [pc, #24]	; (8005d28 <prvIdleTask+0x28>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d9f9      	bls.n	8005d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d14:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <prvIdleTask+0x2c>)
 8005d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d24:	e7f0      	b.n	8005d08 <prvIdleTask+0x8>
 8005d26:	bf00      	nop
 8005d28:	2000070c 	.word	0x2000070c
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d36:	2300      	movs	r3, #0
 8005d38:	607b      	str	r3, [r7, #4]
 8005d3a:	e00c      	b.n	8005d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <prvInitialiseTaskLists+0x60>)
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fb17 	bl	800537e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3301      	adds	r3, #1
 8005d54:	607b      	str	r3, [r7, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b06      	cmp	r3, #6
 8005d5a:	d9ef      	bls.n	8005d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005d5c:	480d      	ldr	r0, [pc, #52]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d5e:	f7ff fb0e 	bl	800537e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005d62:	480d      	ldr	r0, [pc, #52]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d64:	f7ff fb0b 	bl	800537e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d68:	480c      	ldr	r0, [pc, #48]	; (8005d9c <prvInitialiseTaskLists+0x6c>)
 8005d6a:	f7ff fb08 	bl	800537e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d6e:	480c      	ldr	r0, [pc, #48]	; (8005da0 <prvInitialiseTaskLists+0x70>)
 8005d70:	f7ff fb05 	bl	800537e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d74:	480b      	ldr	r0, [pc, #44]	; (8005da4 <prvInitialiseTaskLists+0x74>)
 8005d76:	f7ff fb02 	bl	800537e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	; (8005da8 <prvInitialiseTaskLists+0x78>)
 8005d7c:	4a05      	ldr	r2, [pc, #20]	; (8005d94 <prvInitialiseTaskLists+0x64>)
 8005d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <prvInitialiseTaskLists+0x7c>)
 8005d82:	4a05      	ldr	r2, [pc, #20]	; (8005d98 <prvInitialiseTaskLists+0x68>)
 8005d84:	601a      	str	r2, [r3, #0]
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	2000070c 	.word	0x2000070c
 8005d94:	20000798 	.word	0x20000798
 8005d98:	200007ac 	.word	0x200007ac
 8005d9c:	200007c8 	.word	0x200007c8
 8005da0:	200007dc 	.word	0x200007dc
 8005da4:	200007f4 	.word	0x200007f4
 8005da8:	200007c0 	.word	0x200007c0
 8005dac:	200007c4 	.word	0x200007c4

08005db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005db6:	e019      	b.n	8005dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005db8:	f000 fa0c 	bl	80061d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dbc:	4b10      	ldr	r3, [pc, #64]	; (8005e00 <prvCheckTasksWaitingTermination+0x50>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7ff fb62 	bl	8005492 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005dce:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <prvCheckTasksWaitingTermination+0x54>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	4a0b      	ldr	r2, [pc, #44]	; (8005e04 <prvCheckTasksWaitingTermination+0x54>)
 8005dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005dd8:	4b0b      	ldr	r3, [pc, #44]	; (8005e08 <prvCheckTasksWaitingTermination+0x58>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <prvCheckTasksWaitingTermination+0x58>)
 8005de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005de2:	f000 fa27 	bl	8006234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 f810 	bl	8005e0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005dec:	4b06      	ldr	r3, [pc, #24]	; (8005e08 <prvCheckTasksWaitingTermination+0x58>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e1      	bne.n	8005db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200007dc 	.word	0x200007dc
 8005e04:	20000808 	.word	0x20000808
 8005e08:	200007f0 	.word	0x200007f0

08005e0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	334c      	adds	r3, #76	; 0x4c
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f001 faed 	bl	80073f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d108      	bne.n	8005e3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fb7f 	bl	8006530 <vPortFree>
				vPortFree( pxTCB );
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb7c 	bl	8006530 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e38:	e018      	b.n	8005e6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d103      	bne.n	8005e4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fb73 	bl	8006530 <vPortFree>
	}
 8005e4a:	e00f      	b.n	8005e6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005e52:	2b02      	cmp	r3, #2
 8005e54:	d00a      	beq.n	8005e6c <prvDeleteTCB+0x60>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	e7fe      	b.n	8005e6a <prvDeleteTCB+0x5e>
	}
 8005e6c:	bf00      	nop
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e7a:	4b0c      	ldr	r3, [pc, #48]	; (8005eac <prvResetNextTaskUnblockTime+0x38>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d104      	bne.n	8005e8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e84:	4b0a      	ldr	r3, [pc, #40]	; (8005eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e8c:	e008      	b.n	8005ea0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <prvResetNextTaskUnblockTime+0x38>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4a04      	ldr	r2, [pc, #16]	; (8005eb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005e9e:	6013      	str	r3, [r2, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	200007c0 	.word	0x200007c0
 8005eb0:	20000828 	.word	0x20000828

08005eb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4b29      	ldr	r3, [pc, #164]	; (8005f64 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ec4:	4b28      	ldr	r3, [pc, #160]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f7ff fae1 	bl	8005492 <uxListRemove>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005ed6:	4b24      	ldr	r3, [pc, #144]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	2201      	movs	r2, #1
 8005ede:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee2:	43da      	mvns	r2, r3
 8005ee4:	4b21      	ldr	r3, [pc, #132]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4013      	ands	r3, r2
 8005eea:	4a20      	ldr	r2, [pc, #128]	; (8005f6c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005eec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef4:	d10a      	bne.n	8005f0c <prvAddCurrentTaskToDelayedList+0x58>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005efc:	4b1a      	ldr	r3, [pc, #104]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	3304      	adds	r3, #4
 8005f02:	4619      	mov	r1, r3
 8005f04:	481a      	ldr	r0, [pc, #104]	; (8005f70 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005f06:	f7ff fa67 	bl	80053d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f0a:	e026      	b.n	8005f5a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4413      	add	r3, r2
 8005f12:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f14:	4b14      	ldr	r3, [pc, #80]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d209      	bcs.n	8005f38 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7ff fa75 	bl	8005420 <vListInsert>
}
 8005f36:	e010      	b.n	8005f5a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f38:	4b0f      	ldr	r3, [pc, #60]	; (8005f78 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	4b0a      	ldr	r3, [pc, #40]	; (8005f68 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4619      	mov	r1, r3
 8005f44:	4610      	mov	r0, r2
 8005f46:	f7ff fa6b 	bl	8005420 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d202      	bcs.n	8005f5a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005f54:	4a09      	ldr	r2, [pc, #36]	; (8005f7c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	6013      	str	r3, [r2, #0]
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	2000080c 	.word	0x2000080c
 8005f68:	20000708 	.word	0x20000708
 8005f6c:	20000810 	.word	0x20000810
 8005f70:	200007f4 	.word	0x200007f4
 8005f74:	200007c4 	.word	0x200007c4
 8005f78:	200007c0 	.word	0x200007c0
 8005f7c:	20000828 	.word	0x20000828

08005f80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	3b04      	subs	r3, #4
 8005f90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005f98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	3b04      	subs	r3, #4
 8005f9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f023 0201 	bic.w	r2, r3, #1
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3b04      	subs	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <pxPortInitialiseStack+0x64>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b14      	subs	r3, #20
 8005fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3b04      	subs	r3, #4
 8005fc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f06f 0202 	mvn.w	r2, #2
 8005fce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3b20      	subs	r3, #32
 8005fd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3714      	adds	r7, #20
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	08005fe9 	.word	0x08005fe9

08005fe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ff2:	4b12      	ldr	r3, [pc, #72]	; (800603c <prvTaskExitError+0x54>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ffa:	d00a      	beq.n	8006012 <prvTaskExitError+0x2a>
	__asm volatile
 8005ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	60fb      	str	r3, [r7, #12]
}
 800600e:	bf00      	nop
 8006010:	e7fe      	b.n	8006010 <prvTaskExitError+0x28>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	60bb      	str	r3, [r7, #8]
}
 8006024:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006026:	bf00      	nop
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d0fc      	beq.n	8006028 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	2000000c 	.word	0x2000000c

08006040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006040:	4b07      	ldr	r3, [pc, #28]	; (8006060 <pxCurrentTCBConst2>)
 8006042:	6819      	ldr	r1, [r3, #0]
 8006044:	6808      	ldr	r0, [r1, #0]
 8006046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800604a:	f380 8809 	msr	PSP, r0
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f04f 0000 	mov.w	r0, #0
 8006056:	f380 8811 	msr	BASEPRI, r0
 800605a:	4770      	bx	lr
 800605c:	f3af 8000 	nop.w

08006060 <pxCurrentTCBConst2>:
 8006060:	20000708 	.word	0x20000708
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006064:	bf00      	nop
 8006066:	bf00      	nop

08006068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006068:	4808      	ldr	r0, [pc, #32]	; (800608c <prvPortStartFirstTask+0x24>)
 800606a:	6800      	ldr	r0, [r0, #0]
 800606c:	6800      	ldr	r0, [r0, #0]
 800606e:	f380 8808 	msr	MSP, r0
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8814 	msr	CONTROL, r0
 800607a:	b662      	cpsie	i
 800607c:	b661      	cpsie	f
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	df00      	svc	0
 8006088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800608a:	bf00      	nop
 800608c:	e000ed08 	.word	0xe000ed08

08006090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006096:	4b46      	ldr	r3, [pc, #280]	; (80061b0 <xPortStartScheduler+0x120>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a46      	ldr	r2, [pc, #280]	; (80061b4 <xPortStartScheduler+0x124>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d10a      	bne.n	80060b6 <xPortStartScheduler+0x26>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	613b      	str	r3, [r7, #16]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060b6:	4b3e      	ldr	r3, [pc, #248]	; (80061b0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3f      	ldr	r2, [pc, #252]	; (80061b8 <xPortStartScheduler+0x128>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x46>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060d6:	4b39      	ldr	r3, [pc, #228]	; (80061bc <xPortStartScheduler+0x12c>)
 80060d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	781b      	ldrb	r3, [r3, #0]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80060f0:	78fb      	ldrb	r3, [r7, #3]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	4b31      	ldr	r3, [pc, #196]	; (80061c0 <xPortStartScheduler+0x130>)
 80060fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80060fe:	4b31      	ldr	r3, [pc, #196]	; (80061c4 <xPortStartScheduler+0x134>)
 8006100:	2207      	movs	r2, #7
 8006102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006104:	e009      	b.n	800611a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006106:	4b2f      	ldr	r3, [pc, #188]	; (80061c4 <xPortStartScheduler+0x134>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3b01      	subs	r3, #1
 800610c:	4a2d      	ldr	r2, [pc, #180]	; (80061c4 <xPortStartScheduler+0x134>)
 800610e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	005b      	lsls	r3, r3, #1
 8006116:	b2db      	uxtb	r3, r3
 8006118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	b2db      	uxtb	r3, r3
 800611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006122:	2b80      	cmp	r3, #128	; 0x80
 8006124:	d0ef      	beq.n	8006106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1c3 0307 	rsb	r3, r3, #7
 800612e:	2b04      	cmp	r3, #4
 8006130:	d00a      	beq.n	8006148 <xPortStartScheduler+0xb8>
	__asm volatile
 8006132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006136:	f383 8811 	msr	BASEPRI, r3
 800613a:	f3bf 8f6f 	isb	sy
 800613e:	f3bf 8f4f 	dsb	sy
 8006142:	60bb      	str	r3, [r7, #8]
}
 8006144:	bf00      	nop
 8006146:	e7fe      	b.n	8006146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006148:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <xPortStartScheduler+0x134>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <xPortStartScheduler+0x134>)
 8006150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <xPortStartScheduler+0x134>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800615a:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <xPortStartScheduler+0x134>)
 800615c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	b2da      	uxtb	r2, r3
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006166:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <xPortStartScheduler+0x138>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a17      	ldr	r2, [pc, #92]	; (80061c8 <xPortStartScheduler+0x138>)
 800616c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <xPortStartScheduler+0x138>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <xPortStartScheduler+0x138>)
 8006178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800617c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800617e:	f000 f8dd 	bl	800633c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006182:	4b12      	ldr	r3, [pc, #72]	; (80061cc <xPortStartScheduler+0x13c>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006188:	f000 f8fc 	bl	8006384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800618c:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <xPortStartScheduler+0x140>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0f      	ldr	r2, [pc, #60]	; (80061d0 <xPortStartScheduler+0x140>)
 8006192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006198:	f7ff ff66 	bl	8006068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800619c:	f7ff fd4e 	bl	8005c3c <vTaskSwitchContext>
	prvTaskExitError();
 80061a0:	f7ff ff22 	bl	8005fe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	e000ed00 	.word	0xe000ed00
 80061b4:	410fc271 	.word	0x410fc271
 80061b8:	410fc270 	.word	0x410fc270
 80061bc:	e000e400 	.word	0xe000e400
 80061c0:	20000834 	.word	0x20000834
 80061c4:	20000838 	.word	0x20000838
 80061c8:	e000ed20 	.word	0xe000ed20
 80061cc:	2000000c 	.word	0x2000000c
 80061d0:	e000ef34 	.word	0xe000ef34

080061d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061d4:	b480      	push	{r7}
 80061d6:	b083      	sub	sp, #12
 80061d8:	af00      	add	r7, sp, #0
	__asm volatile
 80061da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061de:	f383 8811 	msr	BASEPRI, r3
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	f3bf 8f4f 	dsb	sy
 80061ea:	607b      	str	r3, [r7, #4]
}
 80061ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80061ee:	4b0f      	ldr	r3, [pc, #60]	; (800622c <vPortEnterCritical+0x58>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	4a0d      	ldr	r2, [pc, #52]	; (800622c <vPortEnterCritical+0x58>)
 80061f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80061f8:	4b0c      	ldr	r3, [pc, #48]	; (800622c <vPortEnterCritical+0x58>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10f      	bne.n	8006220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <vPortEnterCritical+0x5c>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <vPortEnterCritical+0x4c>
	__asm volatile
 800620a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620e:	f383 8811 	msr	BASEPRI, r3
 8006212:	f3bf 8f6f 	isb	sy
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	603b      	str	r3, [r7, #0]
}
 800621c:	bf00      	nop
 800621e:	e7fe      	b.n	800621e <vPortEnterCritical+0x4a>
	}
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr
 800622c:	2000000c 	.word	0x2000000c
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800623a:	4b12      	ldr	r3, [pc, #72]	; (8006284 <vPortExitCritical+0x50>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10a      	bne.n	8006258 <vPortExitCritical+0x24>
	__asm volatile
 8006242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006246:	f383 8811 	msr	BASEPRI, r3
 800624a:	f3bf 8f6f 	isb	sy
 800624e:	f3bf 8f4f 	dsb	sy
 8006252:	607b      	str	r3, [r7, #4]
}
 8006254:	bf00      	nop
 8006256:	e7fe      	b.n	8006256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006258:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <vPortExitCritical+0x50>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3b01      	subs	r3, #1
 800625e:	4a09      	ldr	r2, [pc, #36]	; (8006284 <vPortExitCritical+0x50>)
 8006260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006262:	4b08      	ldr	r3, [pc, #32]	; (8006284 <vPortExitCritical+0x50>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d105      	bne.n	8006276 <vPortExitCritical+0x42>
 800626a:	2300      	movs	r3, #0
 800626c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	2000000c 	.word	0x2000000c
	...

08006290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006290:	f3ef 8009 	mrs	r0, PSP
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	4b15      	ldr	r3, [pc, #84]	; (80062f0 <pxCurrentTCBConst>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	f01e 0f10 	tst.w	lr, #16
 80062a0:	bf08      	it	eq
 80062a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062aa:	6010      	str	r0, [r2, #0]
 80062ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062b4:	f380 8811 	msr	BASEPRI, r0
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
 80062c0:	f7ff fcbc 	bl	8005c3c <vTaskSwitchContext>
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f380 8811 	msr	BASEPRI, r0
 80062cc:	bc09      	pop	{r0, r3}
 80062ce:	6819      	ldr	r1, [r3, #0]
 80062d0:	6808      	ldr	r0, [r1, #0]
 80062d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d6:	f01e 0f10 	tst.w	lr, #16
 80062da:	bf08      	it	eq
 80062dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80062e0:	f380 8809 	msr	PSP, r0
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w

080062f0 <pxCurrentTCBConst>:
 80062f0:	20000708 	.word	0x20000708
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80062f4:	bf00      	nop
 80062f6:	bf00      	nop

080062f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	607b      	str	r3, [r7, #4]
}
 8006310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006312:	f7ff fbdb 	bl	8005acc <xTaskIncrementTick>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800631c:	4b06      	ldr	r3, [pc, #24]	; (8006338 <SysTick_Handler+0x40>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	2300      	movs	r3, #0
 8006326:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	f383 8811 	msr	BASEPRI, r3
}
 800632e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006330:	bf00      	nop
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	e000ed04 	.word	0xe000ed04

0800633c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <vPortSetupTimerInterrupt+0x34>)
 8006342:	2200      	movs	r2, #0
 8006344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <vPortSetupTimerInterrupt+0x38>)
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <vPortSetupTimerInterrupt+0x3c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <vPortSetupTimerInterrupt+0x40>)
 8006352:	fba2 2303 	umull	r2, r3, r2, r3
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <vPortSetupTimerInterrupt+0x44>)
 800635a:	3b01      	subs	r3, #1
 800635c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800635e:	4b04      	ldr	r3, [pc, #16]	; (8006370 <vPortSetupTimerInterrupt+0x34>)
 8006360:	2207      	movs	r2, #7
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	e000e010 	.word	0xe000e010
 8006374:	e000e018 	.word	0xe000e018
 8006378:	20000000 	.word	0x20000000
 800637c:	10624dd3 	.word	0x10624dd3
 8006380:	e000e014 	.word	0xe000e014

08006384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006394 <vPortEnableVFP+0x10>
 8006388:	6801      	ldr	r1, [r0, #0]
 800638a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800638e:	6001      	str	r1, [r0, #0]
 8006390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006392:	bf00      	nop
 8006394:	e000ed88 	.word	0xe000ed88

08006398 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80063a0:	2300      	movs	r3, #0
 80063a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80063a4:	f7ff fae8 	bl	8005978 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80063a8:	4b5b      	ldr	r3, [pc, #364]	; (8006518 <pvPortMalloc+0x180>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80063b0:	f000 f920 	bl	80065f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80063b4:	4b59      	ldr	r3, [pc, #356]	; (800651c <pvPortMalloc+0x184>)
 80063b6:	681a      	ldr	r2, [r3, #0]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4013      	ands	r3, r2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 8093 	bne.w	80064e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d01d      	beq.n	8006404 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80063c8:	2208      	movs	r2, #8
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4413      	add	r3, r2
 80063ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d014      	beq.n	8006404 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	3308      	adds	r3, #8
 80063e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f003 0307 	and.w	r3, r3, #7
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00a      	beq.n	8006404 <pvPortMalloc+0x6c>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	617b      	str	r3, [r7, #20]
}
 8006400:	bf00      	nop
 8006402:	e7fe      	b.n	8006402 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d06e      	beq.n	80064e8 <pvPortMalloc+0x150>
 800640a:	4b45      	ldr	r3, [pc, #276]	; (8006520 <pvPortMalloc+0x188>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	429a      	cmp	r2, r3
 8006412:	d869      	bhi.n	80064e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006414:	4b43      	ldr	r3, [pc, #268]	; (8006524 <pvPortMalloc+0x18c>)
 8006416:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006418:	4b42      	ldr	r3, [pc, #264]	; (8006524 <pvPortMalloc+0x18c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800641e:	e004      	b.n	800642a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	429a      	cmp	r2, r3
 8006432:	d903      	bls.n	800643c <pvPortMalloc+0xa4>
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1f1      	bne.n	8006420 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800643c:	4b36      	ldr	r3, [pc, #216]	; (8006518 <pvPortMalloc+0x180>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006442:	429a      	cmp	r2, r3
 8006444:	d050      	beq.n	80064e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006446:	6a3b      	ldr	r3, [r7, #32]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2208      	movs	r2, #8
 800644c:	4413      	add	r3, r2
 800644e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	1ad2      	subs	r2, r2, r3
 8006460:	2308      	movs	r3, #8
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	429a      	cmp	r2, r3
 8006466:	d91f      	bls.n	80064a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006470:	69bb      	ldr	r3, [r7, #24]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00a      	beq.n	8006490 <pvPortMalloc+0xf8>
	__asm volatile
 800647a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647e:	f383 8811 	msr	BASEPRI, r3
 8006482:	f3bf 8f6f 	isb	sy
 8006486:	f3bf 8f4f 	dsb	sy
 800648a:	613b      	str	r3, [r7, #16]
}
 800648c:	bf00      	nop
 800648e:	e7fe      	b.n	800648e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	687a      	ldr	r2, [r7, #4]
 80064a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80064a2:	69b8      	ldr	r0, [r7, #24]
 80064a4:	f000 f908 	bl	80066b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80064a8:	4b1d      	ldr	r3, [pc, #116]	; (8006520 <pvPortMalloc+0x188>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	4a1b      	ldr	r2, [pc, #108]	; (8006520 <pvPortMalloc+0x188>)
 80064b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <pvPortMalloc+0x188>)
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <pvPortMalloc+0x190>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d203      	bcs.n	80064ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80064c2:	4b17      	ldr	r3, [pc, #92]	; (8006520 <pvPortMalloc+0x188>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a18      	ldr	r2, [pc, #96]	; (8006528 <pvPortMalloc+0x190>)
 80064c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685a      	ldr	r2, [r3, #4]
 80064ce:	4b13      	ldr	r3, [pc, #76]	; (800651c <pvPortMalloc+0x184>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	431a      	orrs	r2, r3
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80064d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80064de:	4b13      	ldr	r3, [pc, #76]	; (800652c <pvPortMalloc+0x194>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	3301      	adds	r3, #1
 80064e4:	4a11      	ldr	r2, [pc, #68]	; (800652c <pvPortMalloc+0x194>)
 80064e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80064e8:	f7ff fa54 	bl	8005994 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <pvPortMalloc+0x174>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	60fb      	str	r3, [r7, #12]
}
 8006508:	bf00      	nop
 800650a:	e7fe      	b.n	800650a <pvPortMalloc+0x172>
	return pvReturn;
 800650c:	69fb      	ldr	r3, [r7, #28]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20004444 	.word	0x20004444
 800651c:	20004458 	.word	0x20004458
 8006520:	20004448 	.word	0x20004448
 8006524:	2000443c 	.word	0x2000443c
 8006528:	2000444c 	.word	0x2000444c
 800652c:	20004450 	.word	0x20004450

08006530 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04d      	beq.n	80065de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006542:	2308      	movs	r3, #8
 8006544:	425b      	negs	r3, r3
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	4413      	add	r3, r2
 800654a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	4b24      	ldr	r3, [pc, #144]	; (80065e8 <vPortFree+0xb8>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	4013      	ands	r3, r2
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10a      	bne.n	8006574 <vPortFree+0x44>
	__asm volatile
 800655e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006562:	f383 8811 	msr	BASEPRI, r3
 8006566:	f3bf 8f6f 	isb	sy
 800656a:	f3bf 8f4f 	dsb	sy
 800656e:	60fb      	str	r3, [r7, #12]
}
 8006570:	bf00      	nop
 8006572:	e7fe      	b.n	8006572 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00a      	beq.n	8006592 <vPortFree+0x62>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60bb      	str	r3, [r7, #8]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	4b14      	ldr	r3, [pc, #80]	; (80065e8 <vPortFree+0xb8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4013      	ands	r3, r2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d01e      	beq.n	80065de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d11a      	bne.n	80065de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	4b0e      	ldr	r3, [pc, #56]	; (80065e8 <vPortFree+0xb8>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	401a      	ands	r2, r3
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80065b8:	f7ff f9de 	bl	8005978 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	685a      	ldr	r2, [r3, #4]
 80065c0:	4b0a      	ldr	r3, [pc, #40]	; (80065ec <vPortFree+0xbc>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4413      	add	r3, r2
 80065c6:	4a09      	ldr	r2, [pc, #36]	; (80065ec <vPortFree+0xbc>)
 80065c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80065ca:	6938      	ldr	r0, [r7, #16]
 80065cc:	f000 f874 	bl	80066b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80065d0:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <vPortFree+0xc0>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3301      	adds	r3, #1
 80065d6:	4a06      	ldr	r2, [pc, #24]	; (80065f0 <vPortFree+0xc0>)
 80065d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80065da:	f7ff f9db 	bl	8005994 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80065de:	bf00      	nop
 80065e0:	3718      	adds	r7, #24
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20004458 	.word	0x20004458
 80065ec:	20004448 	.word	0x20004448
 80065f0:	20004454 	.word	0x20004454

080065f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80065fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80065fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006600:	4b27      	ldr	r3, [pc, #156]	; (80066a0 <prvHeapInit+0xac>)
 8006602:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f003 0307 	and.w	r3, r3, #7
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00c      	beq.n	8006628 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	3307      	adds	r3, #7
 8006612:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0307 	bic.w	r3, r3, #7
 800661a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800661c:	68ba      	ldr	r2, [r7, #8]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	4a1f      	ldr	r2, [pc, #124]	; (80066a0 <prvHeapInit+0xac>)
 8006624:	4413      	add	r3, r2
 8006626:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800662c:	4a1d      	ldr	r2, [pc, #116]	; (80066a4 <prvHeapInit+0xb0>)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006632:	4b1c      	ldr	r3, [pc, #112]	; (80066a4 <prvHeapInit+0xb0>)
 8006634:	2200      	movs	r2, #0
 8006636:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	68ba      	ldr	r2, [r7, #8]
 800663c:	4413      	add	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006640:	2208      	movs	r2, #8
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1a9b      	subs	r3, r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f023 0307 	bic.w	r3, r3, #7
 800664e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvHeapInit+0xb4>)
 8006654:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <prvHeapInit+0xb4>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800665e:	4b12      	ldr	r3, [pc, #72]	; (80066a8 <prvHeapInit+0xb4>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	1ad2      	subs	r2, r2, r3
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006674:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <prvHeapInit+0xb4>)
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	4a0a      	ldr	r2, [pc, #40]	; (80066ac <prvHeapInit+0xb8>)
 8006682:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	4a09      	ldr	r2, [pc, #36]	; (80066b0 <prvHeapInit+0xbc>)
 800668a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800668c:	4b09      	ldr	r3, [pc, #36]	; (80066b4 <prvHeapInit+0xc0>)
 800668e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006692:	601a      	str	r2, [r3, #0]
}
 8006694:	bf00      	nop
 8006696:	3714      	adds	r7, #20
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	2000083c 	.word	0x2000083c
 80066a4:	2000443c 	.word	0x2000443c
 80066a8:	20004444 	.word	0x20004444
 80066ac:	2000444c 	.word	0x2000444c
 80066b0:	20004448 	.word	0x20004448
 80066b4:	20004458 	.word	0x20004458

080066b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <prvInsertBlockIntoFreeList+0xac>)
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	e002      	b.n	80066cc <prvInsertBlockIntoFreeList+0x14>
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60fb      	str	r3, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d8f7      	bhi.n	80066c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	4413      	add	r3, r2
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d108      	bne.n	80066fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	441a      	add	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	441a      	add	r2, r3
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d118      	bne.n	8006740 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	4b15      	ldr	r3, [pc, #84]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	429a      	cmp	r2, r3
 8006718:	d00d      	beq.n	8006736 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	685a      	ldr	r2, [r3, #4]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	441a      	add	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	e008      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006736:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <prvInsertBlockIntoFreeList+0xb0>)
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e003      	b.n	8006748 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d002      	beq.n	8006756 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006756:	bf00      	nop
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	2000443c 	.word	0x2000443c
 8006768:	20004444 	.word	0x20004444

0800676c <__errno>:
 800676c:	4b01      	ldr	r3, [pc, #4]	; (8006774 <__errno+0x8>)
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	4770      	bx	lr
 8006772:	bf00      	nop
 8006774:	20000010 	.word	0x20000010

08006778 <std>:
 8006778:	2300      	movs	r3, #0
 800677a:	b510      	push	{r4, lr}
 800677c:	4604      	mov	r4, r0
 800677e:	e9c0 3300 	strd	r3, r3, [r0]
 8006782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006786:	6083      	str	r3, [r0, #8]
 8006788:	8181      	strh	r1, [r0, #12]
 800678a:	6643      	str	r3, [r0, #100]	; 0x64
 800678c:	81c2      	strh	r2, [r0, #14]
 800678e:	6183      	str	r3, [r0, #24]
 8006790:	4619      	mov	r1, r3
 8006792:	2208      	movs	r2, #8
 8006794:	305c      	adds	r0, #92	; 0x5c
 8006796:	f000 f91a 	bl	80069ce <memset>
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <std+0x38>)
 800679c:	6263      	str	r3, [r4, #36]	; 0x24
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <std+0x3c>)
 80067a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <std+0x40>)
 80067a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <std+0x44>)
 80067a8:	6224      	str	r4, [r4, #32]
 80067aa:	6323      	str	r3, [r4, #48]	; 0x30
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	bf00      	nop
 80067b0:	08007511 	.word	0x08007511
 80067b4:	08007533 	.word	0x08007533
 80067b8:	0800756b 	.word	0x0800756b
 80067bc:	0800758f 	.word	0x0800758f

080067c0 <_cleanup_r>:
 80067c0:	4901      	ldr	r1, [pc, #4]	; (80067c8 <_cleanup_r+0x8>)
 80067c2:	f000 b8af 	b.w	8006924 <_fwalk_reent>
 80067c6:	bf00      	nop
 80067c8:	080083e1 	.word	0x080083e1

080067cc <__sfmoreglue>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	2268      	movs	r2, #104	; 0x68
 80067d0:	1e4d      	subs	r5, r1, #1
 80067d2:	4355      	muls	r5, r2
 80067d4:	460e      	mov	r6, r1
 80067d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067da:	f000 f921 	bl	8006a20 <_malloc_r>
 80067de:	4604      	mov	r4, r0
 80067e0:	b140      	cbz	r0, 80067f4 <__sfmoreglue+0x28>
 80067e2:	2100      	movs	r1, #0
 80067e4:	e9c0 1600 	strd	r1, r6, [r0]
 80067e8:	300c      	adds	r0, #12
 80067ea:	60a0      	str	r0, [r4, #8]
 80067ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067f0:	f000 f8ed 	bl	80069ce <memset>
 80067f4:	4620      	mov	r0, r4
 80067f6:	bd70      	pop	{r4, r5, r6, pc}

080067f8 <__sfp_lock_acquire>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__sfp_lock_acquire+0x8>)
 80067fa:	f000 b8d8 	b.w	80069ae <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	2000445d 	.word	0x2000445d

08006804 <__sfp_lock_release>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sfp_lock_release+0x8>)
 8006806:	f000 b8d3 	b.w	80069b0 <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	2000445d 	.word	0x2000445d

08006810 <__sinit_lock_acquire>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sinit_lock_acquire+0x8>)
 8006812:	f000 b8cc 	b.w	80069ae <__retarget_lock_acquire_recursive>
 8006816:	bf00      	nop
 8006818:	2000445e 	.word	0x2000445e

0800681c <__sinit_lock_release>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sinit_lock_release+0x8>)
 800681e:	f000 b8c7 	b.w	80069b0 <__retarget_lock_release_recursive>
 8006822:	bf00      	nop
 8006824:	2000445e 	.word	0x2000445e

08006828 <__sinit>:
 8006828:	b510      	push	{r4, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	f7ff fff0 	bl	8006810 <__sinit_lock_acquire>
 8006830:	69a3      	ldr	r3, [r4, #24]
 8006832:	b11b      	cbz	r3, 800683c <__sinit+0x14>
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f7ff bff0 	b.w	800681c <__sinit_lock_release>
 800683c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006840:	6523      	str	r3, [r4, #80]	; 0x50
 8006842:	4b13      	ldr	r3, [pc, #76]	; (8006890 <__sinit+0x68>)
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <__sinit+0x6c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	62a2      	str	r2, [r4, #40]	; 0x28
 800684a:	42a3      	cmp	r3, r4
 800684c:	bf04      	itt	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	61a3      	streq	r3, [r4, #24]
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f820 	bl	8006898 <__sfp>
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f81c 	bl	8006898 <__sfp>
 8006860:	60a0      	str	r0, [r4, #8]
 8006862:	4620      	mov	r0, r4
 8006864:	f000 f818 	bl	8006898 <__sfp>
 8006868:	2200      	movs	r2, #0
 800686a:	60e0      	str	r0, [r4, #12]
 800686c:	2104      	movs	r1, #4
 800686e:	6860      	ldr	r0, [r4, #4]
 8006870:	f7ff ff82 	bl	8006778 <std>
 8006874:	68a0      	ldr	r0, [r4, #8]
 8006876:	2201      	movs	r2, #1
 8006878:	2109      	movs	r1, #9
 800687a:	f7ff ff7d 	bl	8006778 <std>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	2202      	movs	r2, #2
 8006882:	2112      	movs	r1, #18
 8006884:	f7ff ff78 	bl	8006778 <std>
 8006888:	2301      	movs	r3, #1
 800688a:	61a3      	str	r3, [r4, #24]
 800688c:	e7d2      	b.n	8006834 <__sinit+0xc>
 800688e:	bf00      	nop
 8006890:	08009770 	.word	0x08009770
 8006894:	080067c1 	.word	0x080067c1

08006898 <__sfp>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	4607      	mov	r7, r0
 800689c:	f7ff ffac 	bl	80067f8 <__sfp_lock_acquire>
 80068a0:	4b1e      	ldr	r3, [pc, #120]	; (800691c <__sfp+0x84>)
 80068a2:	681e      	ldr	r6, [r3, #0]
 80068a4:	69b3      	ldr	r3, [r6, #24]
 80068a6:	b913      	cbnz	r3, 80068ae <__sfp+0x16>
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ffbd 	bl	8006828 <__sinit>
 80068ae:	3648      	adds	r6, #72	; 0x48
 80068b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	d503      	bpl.n	80068c0 <__sfp+0x28>
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	b30b      	cbz	r3, 8006900 <__sfp+0x68>
 80068bc:	6836      	ldr	r6, [r6, #0]
 80068be:	e7f7      	b.n	80068b0 <__sfp+0x18>
 80068c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068c4:	b9d5      	cbnz	r5, 80068fc <__sfp+0x64>
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <__sfp+0x88>)
 80068c8:	60e3      	str	r3, [r4, #12]
 80068ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ce:	6665      	str	r5, [r4, #100]	; 0x64
 80068d0:	f000 f86c 	bl	80069ac <__retarget_lock_init_recursive>
 80068d4:	f7ff ff96 	bl	8006804 <__sfp_lock_release>
 80068d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068e0:	6025      	str	r5, [r4, #0]
 80068e2:	61a5      	str	r5, [r4, #24]
 80068e4:	2208      	movs	r2, #8
 80068e6:	4629      	mov	r1, r5
 80068e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068ec:	f000 f86f 	bl	80069ce <memset>
 80068f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068f8:	4620      	mov	r0, r4
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fc:	3468      	adds	r4, #104	; 0x68
 80068fe:	e7d9      	b.n	80068b4 <__sfp+0x1c>
 8006900:	2104      	movs	r1, #4
 8006902:	4638      	mov	r0, r7
 8006904:	f7ff ff62 	bl	80067cc <__sfmoreglue>
 8006908:	4604      	mov	r4, r0
 800690a:	6030      	str	r0, [r6, #0]
 800690c:	2800      	cmp	r0, #0
 800690e:	d1d5      	bne.n	80068bc <__sfp+0x24>
 8006910:	f7ff ff78 	bl	8006804 <__sfp_lock_release>
 8006914:	230c      	movs	r3, #12
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	e7ee      	b.n	80068f8 <__sfp+0x60>
 800691a:	bf00      	nop
 800691c:	08009770 	.word	0x08009770
 8006920:	ffff0001 	.word	0xffff0001

08006924 <_fwalk_reent>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	4606      	mov	r6, r0
 800692a:	4688      	mov	r8, r1
 800692c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006930:	2700      	movs	r7, #0
 8006932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006936:	f1b9 0901 	subs.w	r9, r9, #1
 800693a:	d505      	bpl.n	8006948 <_fwalk_reent+0x24>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	2c00      	cmp	r4, #0
 8006940:	d1f7      	bne.n	8006932 <_fwalk_reent+0xe>
 8006942:	4638      	mov	r0, r7
 8006944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006948:	89ab      	ldrh	r3, [r5, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d907      	bls.n	800695e <_fwalk_reent+0x3a>
 800694e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006952:	3301      	adds	r3, #1
 8006954:	d003      	beq.n	800695e <_fwalk_reent+0x3a>
 8006956:	4629      	mov	r1, r5
 8006958:	4630      	mov	r0, r6
 800695a:	47c0      	blx	r8
 800695c:	4307      	orrs	r7, r0
 800695e:	3568      	adds	r5, #104	; 0x68
 8006960:	e7e9      	b.n	8006936 <_fwalk_reent+0x12>
	...

08006964 <__libc_init_array>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	4d0d      	ldr	r5, [pc, #52]	; (800699c <__libc_init_array+0x38>)
 8006968:	4c0d      	ldr	r4, [pc, #52]	; (80069a0 <__libc_init_array+0x3c>)
 800696a:	1b64      	subs	r4, r4, r5
 800696c:	10a4      	asrs	r4, r4, #2
 800696e:	2600      	movs	r6, #0
 8006970:	42a6      	cmp	r6, r4
 8006972:	d109      	bne.n	8006988 <__libc_init_array+0x24>
 8006974:	4d0b      	ldr	r5, [pc, #44]	; (80069a4 <__libc_init_array+0x40>)
 8006976:	4c0c      	ldr	r4, [pc, #48]	; (80069a8 <__libc_init_array+0x44>)
 8006978:	f002 fe78 	bl	800966c <_init>
 800697c:	1b64      	subs	r4, r4, r5
 800697e:	10a4      	asrs	r4, r4, #2
 8006980:	2600      	movs	r6, #0
 8006982:	42a6      	cmp	r6, r4
 8006984:	d105      	bne.n	8006992 <__libc_init_array+0x2e>
 8006986:	bd70      	pop	{r4, r5, r6, pc}
 8006988:	f855 3b04 	ldr.w	r3, [r5], #4
 800698c:	4798      	blx	r3
 800698e:	3601      	adds	r6, #1
 8006990:	e7ee      	b.n	8006970 <__libc_init_array+0xc>
 8006992:	f855 3b04 	ldr.w	r3, [r5], #4
 8006996:	4798      	blx	r3
 8006998:	3601      	adds	r6, #1
 800699a:	e7f2      	b.n	8006982 <__libc_init_array+0x1e>
 800699c:	08009af4 	.word	0x08009af4
 80069a0:	08009af4 	.word	0x08009af4
 80069a4:	08009af4 	.word	0x08009af4
 80069a8:	08009af8 	.word	0x08009af8

080069ac <__retarget_lock_init_recursive>:
 80069ac:	4770      	bx	lr

080069ae <__retarget_lock_acquire_recursive>:
 80069ae:	4770      	bx	lr

080069b0 <__retarget_lock_release_recursive>:
 80069b0:	4770      	bx	lr

080069b2 <memcpy>:
 80069b2:	440a      	add	r2, r1
 80069b4:	4291      	cmp	r1, r2
 80069b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ba:	d100      	bne.n	80069be <memcpy+0xc>
 80069bc:	4770      	bx	lr
 80069be:	b510      	push	{r4, lr}
 80069c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069c8:	4291      	cmp	r1, r2
 80069ca:	d1f9      	bne.n	80069c0 <memcpy+0xe>
 80069cc:	bd10      	pop	{r4, pc}

080069ce <memset>:
 80069ce:	4402      	add	r2, r0
 80069d0:	4603      	mov	r3, r0
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d100      	bne.n	80069d8 <memset+0xa>
 80069d6:	4770      	bx	lr
 80069d8:	f803 1b01 	strb.w	r1, [r3], #1
 80069dc:	e7f9      	b.n	80069d2 <memset+0x4>
	...

080069e0 <sbrk_aligned>:
 80069e0:	b570      	push	{r4, r5, r6, lr}
 80069e2:	4e0e      	ldr	r6, [pc, #56]	; (8006a1c <sbrk_aligned+0x3c>)
 80069e4:	460c      	mov	r4, r1
 80069e6:	6831      	ldr	r1, [r6, #0]
 80069e8:	4605      	mov	r5, r0
 80069ea:	b911      	cbnz	r1, 80069f2 <sbrk_aligned+0x12>
 80069ec:	f000 fd60 	bl	80074b0 <_sbrk_r>
 80069f0:	6030      	str	r0, [r6, #0]
 80069f2:	4621      	mov	r1, r4
 80069f4:	4628      	mov	r0, r5
 80069f6:	f000 fd5b 	bl	80074b0 <_sbrk_r>
 80069fa:	1c43      	adds	r3, r0, #1
 80069fc:	d00a      	beq.n	8006a14 <sbrk_aligned+0x34>
 80069fe:	1cc4      	adds	r4, r0, #3
 8006a00:	f024 0403 	bic.w	r4, r4, #3
 8006a04:	42a0      	cmp	r0, r4
 8006a06:	d007      	beq.n	8006a18 <sbrk_aligned+0x38>
 8006a08:	1a21      	subs	r1, r4, r0
 8006a0a:	4628      	mov	r0, r5
 8006a0c:	f000 fd50 	bl	80074b0 <_sbrk_r>
 8006a10:	3001      	adds	r0, #1
 8006a12:	d101      	bne.n	8006a18 <sbrk_aligned+0x38>
 8006a14:	f04f 34ff 	mov.w	r4, #4294967295
 8006a18:	4620      	mov	r0, r4
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	20004464 	.word	0x20004464

08006a20 <_malloc_r>:
 8006a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a24:	1ccd      	adds	r5, r1, #3
 8006a26:	f025 0503 	bic.w	r5, r5, #3
 8006a2a:	3508      	adds	r5, #8
 8006a2c:	2d0c      	cmp	r5, #12
 8006a2e:	bf38      	it	cc
 8006a30:	250c      	movcc	r5, #12
 8006a32:	2d00      	cmp	r5, #0
 8006a34:	4607      	mov	r7, r0
 8006a36:	db01      	blt.n	8006a3c <_malloc_r+0x1c>
 8006a38:	42a9      	cmp	r1, r5
 8006a3a:	d905      	bls.n	8006a48 <_malloc_r+0x28>
 8006a3c:	230c      	movs	r3, #12
 8006a3e:	603b      	str	r3, [r7, #0]
 8006a40:	2600      	movs	r6, #0
 8006a42:	4630      	mov	r0, r6
 8006a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a48:	4e2e      	ldr	r6, [pc, #184]	; (8006b04 <_malloc_r+0xe4>)
 8006a4a:	f001 fd23 	bl	8008494 <__malloc_lock>
 8006a4e:	6833      	ldr	r3, [r6, #0]
 8006a50:	461c      	mov	r4, r3
 8006a52:	bb34      	cbnz	r4, 8006aa2 <_malloc_r+0x82>
 8006a54:	4629      	mov	r1, r5
 8006a56:	4638      	mov	r0, r7
 8006a58:	f7ff ffc2 	bl	80069e0 <sbrk_aligned>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	4604      	mov	r4, r0
 8006a60:	d14d      	bne.n	8006afe <_malloc_r+0xde>
 8006a62:	6834      	ldr	r4, [r6, #0]
 8006a64:	4626      	mov	r6, r4
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	d140      	bne.n	8006aec <_malloc_r+0xcc>
 8006a6a:	6823      	ldr	r3, [r4, #0]
 8006a6c:	4631      	mov	r1, r6
 8006a6e:	4638      	mov	r0, r7
 8006a70:	eb04 0803 	add.w	r8, r4, r3
 8006a74:	f000 fd1c 	bl	80074b0 <_sbrk_r>
 8006a78:	4580      	cmp	r8, r0
 8006a7a:	d13a      	bne.n	8006af2 <_malloc_r+0xd2>
 8006a7c:	6821      	ldr	r1, [r4, #0]
 8006a7e:	3503      	adds	r5, #3
 8006a80:	1a6d      	subs	r5, r5, r1
 8006a82:	f025 0503 	bic.w	r5, r5, #3
 8006a86:	3508      	adds	r5, #8
 8006a88:	2d0c      	cmp	r5, #12
 8006a8a:	bf38      	it	cc
 8006a8c:	250c      	movcc	r5, #12
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff ffa5 	bl	80069e0 <sbrk_aligned>
 8006a96:	3001      	adds	r0, #1
 8006a98:	d02b      	beq.n	8006af2 <_malloc_r+0xd2>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	442b      	add	r3, r5
 8006a9e:	6023      	str	r3, [r4, #0]
 8006aa0:	e00e      	b.n	8006ac0 <_malloc_r+0xa0>
 8006aa2:	6822      	ldr	r2, [r4, #0]
 8006aa4:	1b52      	subs	r2, r2, r5
 8006aa6:	d41e      	bmi.n	8006ae6 <_malloc_r+0xc6>
 8006aa8:	2a0b      	cmp	r2, #11
 8006aaa:	d916      	bls.n	8006ada <_malloc_r+0xba>
 8006aac:	1961      	adds	r1, r4, r5
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	6025      	str	r5, [r4, #0]
 8006ab2:	bf18      	it	ne
 8006ab4:	6059      	strne	r1, [r3, #4]
 8006ab6:	6863      	ldr	r3, [r4, #4]
 8006ab8:	bf08      	it	eq
 8006aba:	6031      	streq	r1, [r6, #0]
 8006abc:	5162      	str	r2, [r4, r5]
 8006abe:	604b      	str	r3, [r1, #4]
 8006ac0:	4638      	mov	r0, r7
 8006ac2:	f104 060b 	add.w	r6, r4, #11
 8006ac6:	f001 fceb 	bl	80084a0 <__malloc_unlock>
 8006aca:	f026 0607 	bic.w	r6, r6, #7
 8006ace:	1d23      	adds	r3, r4, #4
 8006ad0:	1af2      	subs	r2, r6, r3
 8006ad2:	d0b6      	beq.n	8006a42 <_malloc_r+0x22>
 8006ad4:	1b9b      	subs	r3, r3, r6
 8006ad6:	50a3      	str	r3, [r4, r2]
 8006ad8:	e7b3      	b.n	8006a42 <_malloc_r+0x22>
 8006ada:	6862      	ldr	r2, [r4, #4]
 8006adc:	42a3      	cmp	r3, r4
 8006ade:	bf0c      	ite	eq
 8006ae0:	6032      	streq	r2, [r6, #0]
 8006ae2:	605a      	strne	r2, [r3, #4]
 8006ae4:	e7ec      	b.n	8006ac0 <_malloc_r+0xa0>
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	6864      	ldr	r4, [r4, #4]
 8006aea:	e7b2      	b.n	8006a52 <_malloc_r+0x32>
 8006aec:	4634      	mov	r4, r6
 8006aee:	6876      	ldr	r6, [r6, #4]
 8006af0:	e7b9      	b.n	8006a66 <_malloc_r+0x46>
 8006af2:	230c      	movs	r3, #12
 8006af4:	603b      	str	r3, [r7, #0]
 8006af6:	4638      	mov	r0, r7
 8006af8:	f001 fcd2 	bl	80084a0 <__malloc_unlock>
 8006afc:	e7a1      	b.n	8006a42 <_malloc_r+0x22>
 8006afe:	6025      	str	r5, [r4, #0]
 8006b00:	e7de      	b.n	8006ac0 <_malloc_r+0xa0>
 8006b02:	bf00      	nop
 8006b04:	20004460 	.word	0x20004460

08006b08 <__cvt>:
 8006b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	ec55 4b10 	vmov	r4, r5, d0
 8006b10:	2d00      	cmp	r5, #0
 8006b12:	460e      	mov	r6, r1
 8006b14:	4619      	mov	r1, r3
 8006b16:	462b      	mov	r3, r5
 8006b18:	bfbb      	ittet	lt
 8006b1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006b1e:	461d      	movlt	r5, r3
 8006b20:	2300      	movge	r3, #0
 8006b22:	232d      	movlt	r3, #45	; 0x2d
 8006b24:	700b      	strb	r3, [r1, #0]
 8006b26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006b2c:	4691      	mov	r9, r2
 8006b2e:	f023 0820 	bic.w	r8, r3, #32
 8006b32:	bfbc      	itt	lt
 8006b34:	4622      	movlt	r2, r4
 8006b36:	4614      	movlt	r4, r2
 8006b38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b3c:	d005      	beq.n	8006b4a <__cvt+0x42>
 8006b3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006b42:	d100      	bne.n	8006b46 <__cvt+0x3e>
 8006b44:	3601      	adds	r6, #1
 8006b46:	2102      	movs	r1, #2
 8006b48:	e000      	b.n	8006b4c <__cvt+0x44>
 8006b4a:	2103      	movs	r1, #3
 8006b4c:	ab03      	add	r3, sp, #12
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	ab02      	add	r3, sp, #8
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	ec45 4b10 	vmov	d0, r4, r5
 8006b58:	4653      	mov	r3, sl
 8006b5a:	4632      	mov	r2, r6
 8006b5c:	f000 fdcc 	bl	80076f8 <_dtoa_r>
 8006b60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006b64:	4607      	mov	r7, r0
 8006b66:	d102      	bne.n	8006b6e <__cvt+0x66>
 8006b68:	f019 0f01 	tst.w	r9, #1
 8006b6c:	d022      	beq.n	8006bb4 <__cvt+0xac>
 8006b6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006b72:	eb07 0906 	add.w	r9, r7, r6
 8006b76:	d110      	bne.n	8006b9a <__cvt+0x92>
 8006b78:	783b      	ldrb	r3, [r7, #0]
 8006b7a:	2b30      	cmp	r3, #48	; 0x30
 8006b7c:	d10a      	bne.n	8006b94 <__cvt+0x8c>
 8006b7e:	2200      	movs	r2, #0
 8006b80:	2300      	movs	r3, #0
 8006b82:	4620      	mov	r0, r4
 8006b84:	4629      	mov	r1, r5
 8006b86:	f7f9 ffbf 	bl	8000b08 <__aeabi_dcmpeq>
 8006b8a:	b918      	cbnz	r0, 8006b94 <__cvt+0x8c>
 8006b8c:	f1c6 0601 	rsb	r6, r6, #1
 8006b90:	f8ca 6000 	str.w	r6, [sl]
 8006b94:	f8da 3000 	ldr.w	r3, [sl]
 8006b98:	4499      	add	r9, r3
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	f7f9 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 8006ba6:	b108      	cbz	r0, 8006bac <__cvt+0xa4>
 8006ba8:	f8cd 900c 	str.w	r9, [sp, #12]
 8006bac:	2230      	movs	r2, #48	; 0x30
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	454b      	cmp	r3, r9
 8006bb2:	d307      	bcc.n	8006bc4 <__cvt+0xbc>
 8006bb4:	9b03      	ldr	r3, [sp, #12]
 8006bb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006bb8:	1bdb      	subs	r3, r3, r7
 8006bba:	4638      	mov	r0, r7
 8006bbc:	6013      	str	r3, [r2, #0]
 8006bbe:	b004      	add	sp, #16
 8006bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc4:	1c59      	adds	r1, r3, #1
 8006bc6:	9103      	str	r1, [sp, #12]
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	e7f0      	b.n	8006bae <__cvt+0xa6>

08006bcc <__exponent>:
 8006bcc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2900      	cmp	r1, #0
 8006bd2:	bfb8      	it	lt
 8006bd4:	4249      	neglt	r1, r1
 8006bd6:	f803 2b02 	strb.w	r2, [r3], #2
 8006bda:	bfb4      	ite	lt
 8006bdc:	222d      	movlt	r2, #45	; 0x2d
 8006bde:	222b      	movge	r2, #43	; 0x2b
 8006be0:	2909      	cmp	r1, #9
 8006be2:	7042      	strb	r2, [r0, #1]
 8006be4:	dd2a      	ble.n	8006c3c <__exponent+0x70>
 8006be6:	f10d 0407 	add.w	r4, sp, #7
 8006bea:	46a4      	mov	ip, r4
 8006bec:	270a      	movs	r7, #10
 8006bee:	46a6      	mov	lr, r4
 8006bf0:	460a      	mov	r2, r1
 8006bf2:	fb91 f6f7 	sdiv	r6, r1, r7
 8006bf6:	fb07 1516 	mls	r5, r7, r6, r1
 8006bfa:	3530      	adds	r5, #48	; 0x30
 8006bfc:	2a63      	cmp	r2, #99	; 0x63
 8006bfe:	f104 34ff 	add.w	r4, r4, #4294967295
 8006c02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006c06:	4631      	mov	r1, r6
 8006c08:	dcf1      	bgt.n	8006bee <__exponent+0x22>
 8006c0a:	3130      	adds	r1, #48	; 0x30
 8006c0c:	f1ae 0502 	sub.w	r5, lr, #2
 8006c10:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006c14:	1c44      	adds	r4, r0, #1
 8006c16:	4629      	mov	r1, r5
 8006c18:	4561      	cmp	r1, ip
 8006c1a:	d30a      	bcc.n	8006c32 <__exponent+0x66>
 8006c1c:	f10d 0209 	add.w	r2, sp, #9
 8006c20:	eba2 020e 	sub.w	r2, r2, lr
 8006c24:	4565      	cmp	r5, ip
 8006c26:	bf88      	it	hi
 8006c28:	2200      	movhi	r2, #0
 8006c2a:	4413      	add	r3, r2
 8006c2c:	1a18      	subs	r0, r3, r0
 8006c2e:	b003      	add	sp, #12
 8006c30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c36:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006c3a:	e7ed      	b.n	8006c18 <__exponent+0x4c>
 8006c3c:	2330      	movs	r3, #48	; 0x30
 8006c3e:	3130      	adds	r1, #48	; 0x30
 8006c40:	7083      	strb	r3, [r0, #2]
 8006c42:	70c1      	strb	r1, [r0, #3]
 8006c44:	1d03      	adds	r3, r0, #4
 8006c46:	e7f1      	b.n	8006c2c <__exponent+0x60>

08006c48 <_printf_float>:
 8006c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	ed2d 8b02 	vpush	{d8}
 8006c50:	b08d      	sub	sp, #52	; 0x34
 8006c52:	460c      	mov	r4, r1
 8006c54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006c58:	4616      	mov	r6, r2
 8006c5a:	461f      	mov	r7, r3
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	f001 fbfb 	bl	8008458 <_localeconv_r>
 8006c62:	f8d0 a000 	ldr.w	sl, [r0]
 8006c66:	4650      	mov	r0, sl
 8006c68:	f7f9 fad2 	bl	8000210 <strlen>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	9305      	str	r3, [sp, #20]
 8006c74:	f8d8 3000 	ldr.w	r3, [r8]
 8006c78:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006c7c:	3307      	adds	r3, #7
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	f103 0208 	add.w	r2, r3, #8
 8006c86:	f8c8 2000 	str.w	r2, [r8]
 8006c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006c92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006c96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006c9a:	9307      	str	r3, [sp, #28]
 8006c9c:	f8cd 8018 	str.w	r8, [sp, #24]
 8006ca0:	ee08 0a10 	vmov	s16, r0
 8006ca4:	4b9f      	ldr	r3, [pc, #636]	; (8006f24 <_printf_float+0x2dc>)
 8006ca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006caa:	f04f 32ff 	mov.w	r2, #4294967295
 8006cae:	f7f9 ff5d 	bl	8000b6c <__aeabi_dcmpun>
 8006cb2:	bb88      	cbnz	r0, 8006d18 <_printf_float+0xd0>
 8006cb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006cb8:	4b9a      	ldr	r3, [pc, #616]	; (8006f24 <_printf_float+0x2dc>)
 8006cba:	f04f 32ff 	mov.w	r2, #4294967295
 8006cbe:	f7f9 ff37 	bl	8000b30 <__aeabi_dcmple>
 8006cc2:	bb48      	cbnz	r0, 8006d18 <_printf_float+0xd0>
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4649      	mov	r1, r9
 8006ccc:	f7f9 ff26 	bl	8000b1c <__aeabi_dcmplt>
 8006cd0:	b110      	cbz	r0, 8006cd8 <_printf_float+0x90>
 8006cd2:	232d      	movs	r3, #45	; 0x2d
 8006cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cd8:	4b93      	ldr	r3, [pc, #588]	; (8006f28 <_printf_float+0x2e0>)
 8006cda:	4894      	ldr	r0, [pc, #592]	; (8006f2c <_printf_float+0x2e4>)
 8006cdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006ce0:	bf94      	ite	ls
 8006ce2:	4698      	movls	r8, r3
 8006ce4:	4680      	movhi	r8, r0
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	6123      	str	r3, [r4, #16]
 8006cea:	9b05      	ldr	r3, [sp, #20]
 8006cec:	f023 0204 	bic.w	r2, r3, #4
 8006cf0:	6022      	str	r2, [r4, #0]
 8006cf2:	f04f 0900 	mov.w	r9, #0
 8006cf6:	9700      	str	r7, [sp, #0]
 8006cf8:	4633      	mov	r3, r6
 8006cfa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	4628      	mov	r0, r5
 8006d00:	f000 f9d8 	bl	80070b4 <_printf_common>
 8006d04:	3001      	adds	r0, #1
 8006d06:	f040 8090 	bne.w	8006e2a <_printf_float+0x1e2>
 8006d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0e:	b00d      	add	sp, #52	; 0x34
 8006d10:	ecbd 8b02 	vpop	{d8}
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	4640      	mov	r0, r8
 8006d1e:	4649      	mov	r1, r9
 8006d20:	f7f9 ff24 	bl	8000b6c <__aeabi_dcmpun>
 8006d24:	b140      	cbz	r0, 8006d38 <_printf_float+0xf0>
 8006d26:	464b      	mov	r3, r9
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbc      	itt	lt
 8006d2c:	232d      	movlt	r3, #45	; 0x2d
 8006d2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006d32:	487f      	ldr	r0, [pc, #508]	; (8006f30 <_printf_float+0x2e8>)
 8006d34:	4b7f      	ldr	r3, [pc, #508]	; (8006f34 <_printf_float+0x2ec>)
 8006d36:	e7d1      	b.n	8006cdc <_printf_float+0x94>
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006d3e:	9206      	str	r2, [sp, #24]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	d13f      	bne.n	8006dc4 <_printf_float+0x17c>
 8006d44:	2306      	movs	r3, #6
 8006d46:	6063      	str	r3, [r4, #4]
 8006d48:	9b05      	ldr	r3, [sp, #20]
 8006d4a:	6861      	ldr	r1, [r4, #4]
 8006d4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006d50:	2300      	movs	r3, #0
 8006d52:	9303      	str	r3, [sp, #12]
 8006d54:	ab0a      	add	r3, sp, #40	; 0x28
 8006d56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006d5a:	ab09      	add	r3, sp, #36	; 0x24
 8006d5c:	ec49 8b10 	vmov	d0, r8, r9
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	6022      	str	r2, [r4, #0]
 8006d64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff fecd 	bl	8006b08 <__cvt>
 8006d6e:	9b06      	ldr	r3, [sp, #24]
 8006d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d72:	2b47      	cmp	r3, #71	; 0x47
 8006d74:	4680      	mov	r8, r0
 8006d76:	d108      	bne.n	8006d8a <_printf_float+0x142>
 8006d78:	1cc8      	adds	r0, r1, #3
 8006d7a:	db02      	blt.n	8006d82 <_printf_float+0x13a>
 8006d7c:	6863      	ldr	r3, [r4, #4]
 8006d7e:	4299      	cmp	r1, r3
 8006d80:	dd41      	ble.n	8006e06 <_printf_float+0x1be>
 8006d82:	f1ab 0b02 	sub.w	fp, fp, #2
 8006d86:	fa5f fb8b 	uxtb.w	fp, fp
 8006d8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006d8e:	d820      	bhi.n	8006dd2 <_printf_float+0x18a>
 8006d90:	3901      	subs	r1, #1
 8006d92:	465a      	mov	r2, fp
 8006d94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006d98:	9109      	str	r1, [sp, #36]	; 0x24
 8006d9a:	f7ff ff17 	bl	8006bcc <__exponent>
 8006d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da0:	1813      	adds	r3, r2, r0
 8006da2:	2a01      	cmp	r2, #1
 8006da4:	4681      	mov	r9, r0
 8006da6:	6123      	str	r3, [r4, #16]
 8006da8:	dc02      	bgt.n	8006db0 <_printf_float+0x168>
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	07d2      	lsls	r2, r2, #31
 8006dae:	d501      	bpl.n	8006db4 <_printf_float+0x16c>
 8006db0:	3301      	adds	r3, #1
 8006db2:	6123      	str	r3, [r4, #16]
 8006db4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d09c      	beq.n	8006cf6 <_printf_float+0xae>
 8006dbc:	232d      	movs	r3, #45	; 0x2d
 8006dbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc2:	e798      	b.n	8006cf6 <_printf_float+0xae>
 8006dc4:	9a06      	ldr	r2, [sp, #24]
 8006dc6:	2a47      	cmp	r2, #71	; 0x47
 8006dc8:	d1be      	bne.n	8006d48 <_printf_float+0x100>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d1bc      	bne.n	8006d48 <_printf_float+0x100>
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e7b9      	b.n	8006d46 <_printf_float+0xfe>
 8006dd2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006dd6:	d118      	bne.n	8006e0a <_printf_float+0x1c2>
 8006dd8:	2900      	cmp	r1, #0
 8006dda:	6863      	ldr	r3, [r4, #4]
 8006ddc:	dd0b      	ble.n	8006df6 <_printf_float+0x1ae>
 8006dde:	6121      	str	r1, [r4, #16]
 8006de0:	b913      	cbnz	r3, 8006de8 <_printf_float+0x1a0>
 8006de2:	6822      	ldr	r2, [r4, #0]
 8006de4:	07d0      	lsls	r0, r2, #31
 8006de6:	d502      	bpl.n	8006dee <_printf_float+0x1a6>
 8006de8:	3301      	adds	r3, #1
 8006dea:	440b      	add	r3, r1
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	65a1      	str	r1, [r4, #88]	; 0x58
 8006df0:	f04f 0900 	mov.w	r9, #0
 8006df4:	e7de      	b.n	8006db4 <_printf_float+0x16c>
 8006df6:	b913      	cbnz	r3, 8006dfe <_printf_float+0x1b6>
 8006df8:	6822      	ldr	r2, [r4, #0]
 8006dfa:	07d2      	lsls	r2, r2, #31
 8006dfc:	d501      	bpl.n	8006e02 <_printf_float+0x1ba>
 8006dfe:	3302      	adds	r3, #2
 8006e00:	e7f4      	b.n	8006dec <_printf_float+0x1a4>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7f2      	b.n	8006dec <_printf_float+0x1a4>
 8006e06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	db05      	blt.n	8006e1c <_printf_float+0x1d4>
 8006e10:	6823      	ldr	r3, [r4, #0]
 8006e12:	6121      	str	r1, [r4, #16]
 8006e14:	07d8      	lsls	r0, r3, #31
 8006e16:	d5ea      	bpl.n	8006dee <_printf_float+0x1a6>
 8006e18:	1c4b      	adds	r3, r1, #1
 8006e1a:	e7e7      	b.n	8006dec <_printf_float+0x1a4>
 8006e1c:	2900      	cmp	r1, #0
 8006e1e:	bfd4      	ite	le
 8006e20:	f1c1 0202 	rsble	r2, r1, #2
 8006e24:	2201      	movgt	r2, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	e7e0      	b.n	8006dec <_printf_float+0x1a4>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	055a      	lsls	r2, r3, #21
 8006e2e:	d407      	bmi.n	8006e40 <_printf_float+0x1f8>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	4642      	mov	r2, r8
 8006e34:	4631      	mov	r1, r6
 8006e36:	4628      	mov	r0, r5
 8006e38:	47b8      	blx	r7
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	d12c      	bne.n	8006e98 <_printf_float+0x250>
 8006e3e:	e764      	b.n	8006d0a <_printf_float+0xc2>
 8006e40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006e44:	f240 80e0 	bls.w	8007008 <_printf_float+0x3c0>
 8006e48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f7f9 fe5a 	bl	8000b08 <__aeabi_dcmpeq>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	d034      	beq.n	8006ec2 <_printf_float+0x27a>
 8006e58:	4a37      	ldr	r2, [pc, #220]	; (8006f38 <_printf_float+0x2f0>)
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4631      	mov	r1, r6
 8006e5e:	4628      	mov	r0, r5
 8006e60:	47b8      	blx	r7
 8006e62:	3001      	adds	r0, #1
 8006e64:	f43f af51 	beq.w	8006d0a <_printf_float+0xc2>
 8006e68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	db02      	blt.n	8006e76 <_printf_float+0x22e>
 8006e70:	6823      	ldr	r3, [r4, #0]
 8006e72:	07d8      	lsls	r0, r3, #31
 8006e74:	d510      	bpl.n	8006e98 <_printf_float+0x250>
 8006e76:	ee18 3a10 	vmov	r3, s16
 8006e7a:	4652      	mov	r2, sl
 8006e7c:	4631      	mov	r1, r6
 8006e7e:	4628      	mov	r0, r5
 8006e80:	47b8      	blx	r7
 8006e82:	3001      	adds	r0, #1
 8006e84:	f43f af41 	beq.w	8006d0a <_printf_float+0xc2>
 8006e88:	f04f 0800 	mov.w	r8, #0
 8006e8c:	f104 091a 	add.w	r9, r4, #26
 8006e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e92:	3b01      	subs	r3, #1
 8006e94:	4543      	cmp	r3, r8
 8006e96:	dc09      	bgt.n	8006eac <_printf_float+0x264>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	079b      	lsls	r3, r3, #30
 8006e9c:	f100 8105 	bmi.w	80070aa <_printf_float+0x462>
 8006ea0:	68e0      	ldr	r0, [r4, #12]
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea4:	4298      	cmp	r0, r3
 8006ea6:	bfb8      	it	lt
 8006ea8:	4618      	movlt	r0, r3
 8006eaa:	e730      	b.n	8006d0e <_printf_float+0xc6>
 8006eac:	2301      	movs	r3, #1
 8006eae:	464a      	mov	r2, r9
 8006eb0:	4631      	mov	r1, r6
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b8      	blx	r7
 8006eb6:	3001      	adds	r0, #1
 8006eb8:	f43f af27 	beq.w	8006d0a <_printf_float+0xc2>
 8006ebc:	f108 0801 	add.w	r8, r8, #1
 8006ec0:	e7e6      	b.n	8006e90 <_printf_float+0x248>
 8006ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	dc39      	bgt.n	8006f3c <_printf_float+0x2f4>
 8006ec8:	4a1b      	ldr	r2, [pc, #108]	; (8006f38 <_printf_float+0x2f0>)
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4631      	mov	r1, r6
 8006ece:	4628      	mov	r0, r5
 8006ed0:	47b8      	blx	r7
 8006ed2:	3001      	adds	r0, #1
 8006ed4:	f43f af19 	beq.w	8006d0a <_printf_float+0xc2>
 8006ed8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006edc:	4313      	orrs	r3, r2
 8006ede:	d102      	bne.n	8006ee6 <_printf_float+0x29e>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	07d9      	lsls	r1, r3, #31
 8006ee4:	d5d8      	bpl.n	8006e98 <_printf_float+0x250>
 8006ee6:	ee18 3a10 	vmov	r3, s16
 8006eea:	4652      	mov	r2, sl
 8006eec:	4631      	mov	r1, r6
 8006eee:	4628      	mov	r0, r5
 8006ef0:	47b8      	blx	r7
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	f43f af09 	beq.w	8006d0a <_printf_float+0xc2>
 8006ef8:	f04f 0900 	mov.w	r9, #0
 8006efc:	f104 0a1a 	add.w	sl, r4, #26
 8006f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f02:	425b      	negs	r3, r3
 8006f04:	454b      	cmp	r3, r9
 8006f06:	dc01      	bgt.n	8006f0c <_printf_float+0x2c4>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	e792      	b.n	8006e32 <_printf_float+0x1ea>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	4652      	mov	r2, sl
 8006f10:	4631      	mov	r1, r6
 8006f12:	4628      	mov	r0, r5
 8006f14:	47b8      	blx	r7
 8006f16:	3001      	adds	r0, #1
 8006f18:	f43f aef7 	beq.w	8006d0a <_printf_float+0xc2>
 8006f1c:	f109 0901 	add.w	r9, r9, #1
 8006f20:	e7ee      	b.n	8006f00 <_printf_float+0x2b8>
 8006f22:	bf00      	nop
 8006f24:	7fefffff 	.word	0x7fefffff
 8006f28:	08009774 	.word	0x08009774
 8006f2c:	08009778 	.word	0x08009778
 8006f30:	08009780 	.word	0x08009780
 8006f34:	0800977c 	.word	0x0800977c
 8006f38:	08009784 	.word	0x08009784
 8006f3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f40:	429a      	cmp	r2, r3
 8006f42:	bfa8      	it	ge
 8006f44:	461a      	movge	r2, r3
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	4691      	mov	r9, r2
 8006f4a:	dc37      	bgt.n	8006fbc <_printf_float+0x374>
 8006f4c:	f04f 0b00 	mov.w	fp, #0
 8006f50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f54:	f104 021a 	add.w	r2, r4, #26
 8006f58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006f5a:	9305      	str	r3, [sp, #20]
 8006f5c:	eba3 0309 	sub.w	r3, r3, r9
 8006f60:	455b      	cmp	r3, fp
 8006f62:	dc33      	bgt.n	8006fcc <_printf_float+0x384>
 8006f64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	db3b      	blt.n	8006fe4 <_printf_float+0x39c>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	07da      	lsls	r2, r3, #31
 8006f70:	d438      	bmi.n	8006fe4 <_printf_float+0x39c>
 8006f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f74:	9a05      	ldr	r2, [sp, #20]
 8006f76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f78:	1a9a      	subs	r2, r3, r2
 8006f7a:	eba3 0901 	sub.w	r9, r3, r1
 8006f7e:	4591      	cmp	r9, r2
 8006f80:	bfa8      	it	ge
 8006f82:	4691      	movge	r9, r2
 8006f84:	f1b9 0f00 	cmp.w	r9, #0
 8006f88:	dc35      	bgt.n	8006ff6 <_printf_float+0x3ae>
 8006f8a:	f04f 0800 	mov.w	r8, #0
 8006f8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f92:	f104 0a1a 	add.w	sl, r4, #26
 8006f96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006f9a:	1a9b      	subs	r3, r3, r2
 8006f9c:	eba3 0309 	sub.w	r3, r3, r9
 8006fa0:	4543      	cmp	r3, r8
 8006fa2:	f77f af79 	ble.w	8006e98 <_printf_float+0x250>
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	4652      	mov	r2, sl
 8006faa:	4631      	mov	r1, r6
 8006fac:	4628      	mov	r0, r5
 8006fae:	47b8      	blx	r7
 8006fb0:	3001      	adds	r0, #1
 8006fb2:	f43f aeaa 	beq.w	8006d0a <_printf_float+0xc2>
 8006fb6:	f108 0801 	add.w	r8, r8, #1
 8006fba:	e7ec      	b.n	8006f96 <_printf_float+0x34e>
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	4631      	mov	r1, r6
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	47b8      	blx	r7
 8006fc6:	3001      	adds	r0, #1
 8006fc8:	d1c0      	bne.n	8006f4c <_printf_float+0x304>
 8006fca:	e69e      	b.n	8006d0a <_printf_float+0xc2>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	4631      	mov	r1, r6
 8006fd0:	4628      	mov	r0, r5
 8006fd2:	9205      	str	r2, [sp, #20]
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f43f ae97 	beq.w	8006d0a <_printf_float+0xc2>
 8006fdc:	9a05      	ldr	r2, [sp, #20]
 8006fde:	f10b 0b01 	add.w	fp, fp, #1
 8006fe2:	e7b9      	b.n	8006f58 <_printf_float+0x310>
 8006fe4:	ee18 3a10 	vmov	r3, s16
 8006fe8:	4652      	mov	r2, sl
 8006fea:	4631      	mov	r1, r6
 8006fec:	4628      	mov	r0, r5
 8006fee:	47b8      	blx	r7
 8006ff0:	3001      	adds	r0, #1
 8006ff2:	d1be      	bne.n	8006f72 <_printf_float+0x32a>
 8006ff4:	e689      	b.n	8006d0a <_printf_float+0xc2>
 8006ff6:	9a05      	ldr	r2, [sp, #20]
 8006ff8:	464b      	mov	r3, r9
 8006ffa:	4442      	add	r2, r8
 8006ffc:	4631      	mov	r1, r6
 8006ffe:	4628      	mov	r0, r5
 8007000:	47b8      	blx	r7
 8007002:	3001      	adds	r0, #1
 8007004:	d1c1      	bne.n	8006f8a <_printf_float+0x342>
 8007006:	e680      	b.n	8006d0a <_printf_float+0xc2>
 8007008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800700a:	2a01      	cmp	r2, #1
 800700c:	dc01      	bgt.n	8007012 <_printf_float+0x3ca>
 800700e:	07db      	lsls	r3, r3, #31
 8007010:	d538      	bpl.n	8007084 <_printf_float+0x43c>
 8007012:	2301      	movs	r3, #1
 8007014:	4642      	mov	r2, r8
 8007016:	4631      	mov	r1, r6
 8007018:	4628      	mov	r0, r5
 800701a:	47b8      	blx	r7
 800701c:	3001      	adds	r0, #1
 800701e:	f43f ae74 	beq.w	8006d0a <_printf_float+0xc2>
 8007022:	ee18 3a10 	vmov	r3, s16
 8007026:	4652      	mov	r2, sl
 8007028:	4631      	mov	r1, r6
 800702a:	4628      	mov	r0, r5
 800702c:	47b8      	blx	r7
 800702e:	3001      	adds	r0, #1
 8007030:	f43f ae6b 	beq.w	8006d0a <_printf_float+0xc2>
 8007034:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007038:	2200      	movs	r2, #0
 800703a:	2300      	movs	r3, #0
 800703c:	f7f9 fd64 	bl	8000b08 <__aeabi_dcmpeq>
 8007040:	b9d8      	cbnz	r0, 800707a <_printf_float+0x432>
 8007042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007044:	f108 0201 	add.w	r2, r8, #1
 8007048:	3b01      	subs	r3, #1
 800704a:	4631      	mov	r1, r6
 800704c:	4628      	mov	r0, r5
 800704e:	47b8      	blx	r7
 8007050:	3001      	adds	r0, #1
 8007052:	d10e      	bne.n	8007072 <_printf_float+0x42a>
 8007054:	e659      	b.n	8006d0a <_printf_float+0xc2>
 8007056:	2301      	movs	r3, #1
 8007058:	4652      	mov	r2, sl
 800705a:	4631      	mov	r1, r6
 800705c:	4628      	mov	r0, r5
 800705e:	47b8      	blx	r7
 8007060:	3001      	adds	r0, #1
 8007062:	f43f ae52 	beq.w	8006d0a <_printf_float+0xc2>
 8007066:	f108 0801 	add.w	r8, r8, #1
 800706a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800706c:	3b01      	subs	r3, #1
 800706e:	4543      	cmp	r3, r8
 8007070:	dcf1      	bgt.n	8007056 <_printf_float+0x40e>
 8007072:	464b      	mov	r3, r9
 8007074:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007078:	e6dc      	b.n	8006e34 <_printf_float+0x1ec>
 800707a:	f04f 0800 	mov.w	r8, #0
 800707e:	f104 0a1a 	add.w	sl, r4, #26
 8007082:	e7f2      	b.n	800706a <_printf_float+0x422>
 8007084:	2301      	movs	r3, #1
 8007086:	4642      	mov	r2, r8
 8007088:	e7df      	b.n	800704a <_printf_float+0x402>
 800708a:	2301      	movs	r3, #1
 800708c:	464a      	mov	r2, r9
 800708e:	4631      	mov	r1, r6
 8007090:	4628      	mov	r0, r5
 8007092:	47b8      	blx	r7
 8007094:	3001      	adds	r0, #1
 8007096:	f43f ae38 	beq.w	8006d0a <_printf_float+0xc2>
 800709a:	f108 0801 	add.w	r8, r8, #1
 800709e:	68e3      	ldr	r3, [r4, #12]
 80070a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80070a2:	1a5b      	subs	r3, r3, r1
 80070a4:	4543      	cmp	r3, r8
 80070a6:	dcf0      	bgt.n	800708a <_printf_float+0x442>
 80070a8:	e6fa      	b.n	8006ea0 <_printf_float+0x258>
 80070aa:	f04f 0800 	mov.w	r8, #0
 80070ae:	f104 0919 	add.w	r9, r4, #25
 80070b2:	e7f4      	b.n	800709e <_printf_float+0x456>

080070b4 <_printf_common>:
 80070b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070b8:	4616      	mov	r6, r2
 80070ba:	4699      	mov	r9, r3
 80070bc:	688a      	ldr	r2, [r1, #8]
 80070be:	690b      	ldr	r3, [r1, #16]
 80070c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bfb8      	it	lt
 80070c8:	4613      	movlt	r3, r2
 80070ca:	6033      	str	r3, [r6, #0]
 80070cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070d0:	4607      	mov	r7, r0
 80070d2:	460c      	mov	r4, r1
 80070d4:	b10a      	cbz	r2, 80070da <_printf_common+0x26>
 80070d6:	3301      	adds	r3, #1
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	6823      	ldr	r3, [r4, #0]
 80070dc:	0699      	lsls	r1, r3, #26
 80070de:	bf42      	ittt	mi
 80070e0:	6833      	ldrmi	r3, [r6, #0]
 80070e2:	3302      	addmi	r3, #2
 80070e4:	6033      	strmi	r3, [r6, #0]
 80070e6:	6825      	ldr	r5, [r4, #0]
 80070e8:	f015 0506 	ands.w	r5, r5, #6
 80070ec:	d106      	bne.n	80070fc <_printf_common+0x48>
 80070ee:	f104 0a19 	add.w	sl, r4, #25
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	6832      	ldr	r2, [r6, #0]
 80070f6:	1a9b      	subs	r3, r3, r2
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dc26      	bgt.n	800714a <_printf_common+0x96>
 80070fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007100:	1e13      	subs	r3, r2, #0
 8007102:	6822      	ldr	r2, [r4, #0]
 8007104:	bf18      	it	ne
 8007106:	2301      	movne	r3, #1
 8007108:	0692      	lsls	r2, r2, #26
 800710a:	d42b      	bmi.n	8007164 <_printf_common+0xb0>
 800710c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007110:	4649      	mov	r1, r9
 8007112:	4638      	mov	r0, r7
 8007114:	47c0      	blx	r8
 8007116:	3001      	adds	r0, #1
 8007118:	d01e      	beq.n	8007158 <_printf_common+0xa4>
 800711a:	6823      	ldr	r3, [r4, #0]
 800711c:	68e5      	ldr	r5, [r4, #12]
 800711e:	6832      	ldr	r2, [r6, #0]
 8007120:	f003 0306 	and.w	r3, r3, #6
 8007124:	2b04      	cmp	r3, #4
 8007126:	bf08      	it	eq
 8007128:	1aad      	subeq	r5, r5, r2
 800712a:	68a3      	ldr	r3, [r4, #8]
 800712c:	6922      	ldr	r2, [r4, #16]
 800712e:	bf0c      	ite	eq
 8007130:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007134:	2500      	movne	r5, #0
 8007136:	4293      	cmp	r3, r2
 8007138:	bfc4      	itt	gt
 800713a:	1a9b      	subgt	r3, r3, r2
 800713c:	18ed      	addgt	r5, r5, r3
 800713e:	2600      	movs	r6, #0
 8007140:	341a      	adds	r4, #26
 8007142:	42b5      	cmp	r5, r6
 8007144:	d11a      	bne.n	800717c <_printf_common+0xc8>
 8007146:	2000      	movs	r0, #0
 8007148:	e008      	b.n	800715c <_printf_common+0xa8>
 800714a:	2301      	movs	r3, #1
 800714c:	4652      	mov	r2, sl
 800714e:	4649      	mov	r1, r9
 8007150:	4638      	mov	r0, r7
 8007152:	47c0      	blx	r8
 8007154:	3001      	adds	r0, #1
 8007156:	d103      	bne.n	8007160 <_printf_common+0xac>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007160:	3501      	adds	r5, #1
 8007162:	e7c6      	b.n	80070f2 <_printf_common+0x3e>
 8007164:	18e1      	adds	r1, r4, r3
 8007166:	1c5a      	adds	r2, r3, #1
 8007168:	2030      	movs	r0, #48	; 0x30
 800716a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800716e:	4422      	add	r2, r4
 8007170:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007174:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007178:	3302      	adds	r3, #2
 800717a:	e7c7      	b.n	800710c <_printf_common+0x58>
 800717c:	2301      	movs	r3, #1
 800717e:	4622      	mov	r2, r4
 8007180:	4649      	mov	r1, r9
 8007182:	4638      	mov	r0, r7
 8007184:	47c0      	blx	r8
 8007186:	3001      	adds	r0, #1
 8007188:	d0e6      	beq.n	8007158 <_printf_common+0xa4>
 800718a:	3601      	adds	r6, #1
 800718c:	e7d9      	b.n	8007142 <_printf_common+0x8e>
	...

08007190 <_printf_i>:
 8007190:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007194:	7e0f      	ldrb	r7, [r1, #24]
 8007196:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007198:	2f78      	cmp	r7, #120	; 0x78
 800719a:	4691      	mov	r9, r2
 800719c:	4680      	mov	r8, r0
 800719e:	460c      	mov	r4, r1
 80071a0:	469a      	mov	sl, r3
 80071a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80071a6:	d807      	bhi.n	80071b8 <_printf_i+0x28>
 80071a8:	2f62      	cmp	r7, #98	; 0x62
 80071aa:	d80a      	bhi.n	80071c2 <_printf_i+0x32>
 80071ac:	2f00      	cmp	r7, #0
 80071ae:	f000 80d8 	beq.w	8007362 <_printf_i+0x1d2>
 80071b2:	2f58      	cmp	r7, #88	; 0x58
 80071b4:	f000 80a3 	beq.w	80072fe <_printf_i+0x16e>
 80071b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80071c0:	e03a      	b.n	8007238 <_printf_i+0xa8>
 80071c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80071c6:	2b15      	cmp	r3, #21
 80071c8:	d8f6      	bhi.n	80071b8 <_printf_i+0x28>
 80071ca:	a101      	add	r1, pc, #4	; (adr r1, 80071d0 <_printf_i+0x40>)
 80071cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80071d0:	08007229 	.word	0x08007229
 80071d4:	0800723d 	.word	0x0800723d
 80071d8:	080071b9 	.word	0x080071b9
 80071dc:	080071b9 	.word	0x080071b9
 80071e0:	080071b9 	.word	0x080071b9
 80071e4:	080071b9 	.word	0x080071b9
 80071e8:	0800723d 	.word	0x0800723d
 80071ec:	080071b9 	.word	0x080071b9
 80071f0:	080071b9 	.word	0x080071b9
 80071f4:	080071b9 	.word	0x080071b9
 80071f8:	080071b9 	.word	0x080071b9
 80071fc:	08007349 	.word	0x08007349
 8007200:	0800726d 	.word	0x0800726d
 8007204:	0800732b 	.word	0x0800732b
 8007208:	080071b9 	.word	0x080071b9
 800720c:	080071b9 	.word	0x080071b9
 8007210:	0800736b 	.word	0x0800736b
 8007214:	080071b9 	.word	0x080071b9
 8007218:	0800726d 	.word	0x0800726d
 800721c:	080071b9 	.word	0x080071b9
 8007220:	080071b9 	.word	0x080071b9
 8007224:	08007333 	.word	0x08007333
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	1d1a      	adds	r2, r3, #4
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	602a      	str	r2, [r5, #0]
 8007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007234:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007238:	2301      	movs	r3, #1
 800723a:	e0a3      	b.n	8007384 <_printf_i+0x1f4>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	6829      	ldr	r1, [r5, #0]
 8007240:	0606      	lsls	r6, r0, #24
 8007242:	f101 0304 	add.w	r3, r1, #4
 8007246:	d50a      	bpl.n	800725e <_printf_i+0xce>
 8007248:	680e      	ldr	r6, [r1, #0]
 800724a:	602b      	str	r3, [r5, #0]
 800724c:	2e00      	cmp	r6, #0
 800724e:	da03      	bge.n	8007258 <_printf_i+0xc8>
 8007250:	232d      	movs	r3, #45	; 0x2d
 8007252:	4276      	negs	r6, r6
 8007254:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007258:	485e      	ldr	r0, [pc, #376]	; (80073d4 <_printf_i+0x244>)
 800725a:	230a      	movs	r3, #10
 800725c:	e019      	b.n	8007292 <_printf_i+0x102>
 800725e:	680e      	ldr	r6, [r1, #0]
 8007260:	602b      	str	r3, [r5, #0]
 8007262:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007266:	bf18      	it	ne
 8007268:	b236      	sxthne	r6, r6
 800726a:	e7ef      	b.n	800724c <_printf_i+0xbc>
 800726c:	682b      	ldr	r3, [r5, #0]
 800726e:	6820      	ldr	r0, [r4, #0]
 8007270:	1d19      	adds	r1, r3, #4
 8007272:	6029      	str	r1, [r5, #0]
 8007274:	0601      	lsls	r1, r0, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0xec>
 8007278:	681e      	ldr	r6, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0xf2>
 800727c:	0646      	lsls	r6, r0, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0xe8>
 8007280:	881e      	ldrh	r6, [r3, #0]
 8007282:	4854      	ldr	r0, [pc, #336]	; (80073d4 <_printf_i+0x244>)
 8007284:	2f6f      	cmp	r7, #111	; 0x6f
 8007286:	bf0c      	ite	eq
 8007288:	2308      	moveq	r3, #8
 800728a:	230a      	movne	r3, #10
 800728c:	2100      	movs	r1, #0
 800728e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007292:	6865      	ldr	r5, [r4, #4]
 8007294:	60a5      	str	r5, [r4, #8]
 8007296:	2d00      	cmp	r5, #0
 8007298:	bfa2      	ittt	ge
 800729a:	6821      	ldrge	r1, [r4, #0]
 800729c:	f021 0104 	bicge.w	r1, r1, #4
 80072a0:	6021      	strge	r1, [r4, #0]
 80072a2:	b90e      	cbnz	r6, 80072a8 <_printf_i+0x118>
 80072a4:	2d00      	cmp	r5, #0
 80072a6:	d04d      	beq.n	8007344 <_printf_i+0x1b4>
 80072a8:	4615      	mov	r5, r2
 80072aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80072ae:	fb03 6711 	mls	r7, r3, r1, r6
 80072b2:	5dc7      	ldrb	r7, [r0, r7]
 80072b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80072b8:	4637      	mov	r7, r6
 80072ba:	42bb      	cmp	r3, r7
 80072bc:	460e      	mov	r6, r1
 80072be:	d9f4      	bls.n	80072aa <_printf_i+0x11a>
 80072c0:	2b08      	cmp	r3, #8
 80072c2:	d10b      	bne.n	80072dc <_printf_i+0x14c>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	07de      	lsls	r6, r3, #31
 80072c8:	d508      	bpl.n	80072dc <_printf_i+0x14c>
 80072ca:	6923      	ldr	r3, [r4, #16]
 80072cc:	6861      	ldr	r1, [r4, #4]
 80072ce:	4299      	cmp	r1, r3
 80072d0:	bfde      	ittt	le
 80072d2:	2330      	movle	r3, #48	; 0x30
 80072d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80072d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80072dc:	1b52      	subs	r2, r2, r5
 80072de:	6122      	str	r2, [r4, #16]
 80072e0:	f8cd a000 	str.w	sl, [sp]
 80072e4:	464b      	mov	r3, r9
 80072e6:	aa03      	add	r2, sp, #12
 80072e8:	4621      	mov	r1, r4
 80072ea:	4640      	mov	r0, r8
 80072ec:	f7ff fee2 	bl	80070b4 <_printf_common>
 80072f0:	3001      	adds	r0, #1
 80072f2:	d14c      	bne.n	800738e <_printf_i+0x1fe>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	b004      	add	sp, #16
 80072fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fe:	4835      	ldr	r0, [pc, #212]	; (80073d4 <_printf_i+0x244>)
 8007300:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007304:	6829      	ldr	r1, [r5, #0]
 8007306:	6823      	ldr	r3, [r4, #0]
 8007308:	f851 6b04 	ldr.w	r6, [r1], #4
 800730c:	6029      	str	r1, [r5, #0]
 800730e:	061d      	lsls	r5, r3, #24
 8007310:	d514      	bpl.n	800733c <_printf_i+0x1ac>
 8007312:	07df      	lsls	r7, r3, #31
 8007314:	bf44      	itt	mi
 8007316:	f043 0320 	orrmi.w	r3, r3, #32
 800731a:	6023      	strmi	r3, [r4, #0]
 800731c:	b91e      	cbnz	r6, 8007326 <_printf_i+0x196>
 800731e:	6823      	ldr	r3, [r4, #0]
 8007320:	f023 0320 	bic.w	r3, r3, #32
 8007324:	6023      	str	r3, [r4, #0]
 8007326:	2310      	movs	r3, #16
 8007328:	e7b0      	b.n	800728c <_printf_i+0xfc>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	f043 0320 	orr.w	r3, r3, #32
 8007330:	6023      	str	r3, [r4, #0]
 8007332:	2378      	movs	r3, #120	; 0x78
 8007334:	4828      	ldr	r0, [pc, #160]	; (80073d8 <_printf_i+0x248>)
 8007336:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800733a:	e7e3      	b.n	8007304 <_printf_i+0x174>
 800733c:	0659      	lsls	r1, r3, #25
 800733e:	bf48      	it	mi
 8007340:	b2b6      	uxthmi	r6, r6
 8007342:	e7e6      	b.n	8007312 <_printf_i+0x182>
 8007344:	4615      	mov	r5, r2
 8007346:	e7bb      	b.n	80072c0 <_printf_i+0x130>
 8007348:	682b      	ldr	r3, [r5, #0]
 800734a:	6826      	ldr	r6, [r4, #0]
 800734c:	6961      	ldr	r1, [r4, #20]
 800734e:	1d18      	adds	r0, r3, #4
 8007350:	6028      	str	r0, [r5, #0]
 8007352:	0635      	lsls	r5, r6, #24
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	d501      	bpl.n	800735c <_printf_i+0x1cc>
 8007358:	6019      	str	r1, [r3, #0]
 800735a:	e002      	b.n	8007362 <_printf_i+0x1d2>
 800735c:	0670      	lsls	r0, r6, #25
 800735e:	d5fb      	bpl.n	8007358 <_printf_i+0x1c8>
 8007360:	8019      	strh	r1, [r3, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	4615      	mov	r5, r2
 8007368:	e7ba      	b.n	80072e0 <_printf_i+0x150>
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	602a      	str	r2, [r5, #0]
 8007370:	681d      	ldr	r5, [r3, #0]
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	2100      	movs	r1, #0
 8007376:	4628      	mov	r0, r5
 8007378:	f7f8 ff52 	bl	8000220 <memchr>
 800737c:	b108      	cbz	r0, 8007382 <_printf_i+0x1f2>
 800737e:	1b40      	subs	r0, r0, r5
 8007380:	6060      	str	r0, [r4, #4]
 8007382:	6863      	ldr	r3, [r4, #4]
 8007384:	6123      	str	r3, [r4, #16]
 8007386:	2300      	movs	r3, #0
 8007388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800738c:	e7a8      	b.n	80072e0 <_printf_i+0x150>
 800738e:	6923      	ldr	r3, [r4, #16]
 8007390:	462a      	mov	r2, r5
 8007392:	4649      	mov	r1, r9
 8007394:	4640      	mov	r0, r8
 8007396:	47d0      	blx	sl
 8007398:	3001      	adds	r0, #1
 800739a:	d0ab      	beq.n	80072f4 <_printf_i+0x164>
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	079b      	lsls	r3, r3, #30
 80073a0:	d413      	bmi.n	80073ca <_printf_i+0x23a>
 80073a2:	68e0      	ldr	r0, [r4, #12]
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	4298      	cmp	r0, r3
 80073a8:	bfb8      	it	lt
 80073aa:	4618      	movlt	r0, r3
 80073ac:	e7a4      	b.n	80072f8 <_printf_i+0x168>
 80073ae:	2301      	movs	r3, #1
 80073b0:	4632      	mov	r2, r6
 80073b2:	4649      	mov	r1, r9
 80073b4:	4640      	mov	r0, r8
 80073b6:	47d0      	blx	sl
 80073b8:	3001      	adds	r0, #1
 80073ba:	d09b      	beq.n	80072f4 <_printf_i+0x164>
 80073bc:	3501      	adds	r5, #1
 80073be:	68e3      	ldr	r3, [r4, #12]
 80073c0:	9903      	ldr	r1, [sp, #12]
 80073c2:	1a5b      	subs	r3, r3, r1
 80073c4:	42ab      	cmp	r3, r5
 80073c6:	dcf2      	bgt.n	80073ae <_printf_i+0x21e>
 80073c8:	e7eb      	b.n	80073a2 <_printf_i+0x212>
 80073ca:	2500      	movs	r5, #0
 80073cc:	f104 0619 	add.w	r6, r4, #25
 80073d0:	e7f5      	b.n	80073be <_printf_i+0x22e>
 80073d2:	bf00      	nop
 80073d4:	08009786 	.word	0x08009786
 80073d8:	08009797 	.word	0x08009797

080073dc <cleanup_glue>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	460c      	mov	r4, r1
 80073e0:	6809      	ldr	r1, [r1, #0]
 80073e2:	4605      	mov	r5, r0
 80073e4:	b109      	cbz	r1, 80073ea <cleanup_glue+0xe>
 80073e6:	f7ff fff9 	bl	80073dc <cleanup_glue>
 80073ea:	4621      	mov	r1, r4
 80073ec:	4628      	mov	r0, r5
 80073ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f2:	f001 bbf5 	b.w	8008be0 <_free_r>
	...

080073f8 <_reclaim_reent>:
 80073f8:	4b2c      	ldr	r3, [pc, #176]	; (80074ac <_reclaim_reent+0xb4>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4283      	cmp	r3, r0
 80073fe:	b570      	push	{r4, r5, r6, lr}
 8007400:	4604      	mov	r4, r0
 8007402:	d051      	beq.n	80074a8 <_reclaim_reent+0xb0>
 8007404:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007406:	b143      	cbz	r3, 800741a <_reclaim_reent+0x22>
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d14a      	bne.n	80074a4 <_reclaim_reent+0xac>
 800740e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007410:	6819      	ldr	r1, [r3, #0]
 8007412:	b111      	cbz	r1, 800741a <_reclaim_reent+0x22>
 8007414:	4620      	mov	r0, r4
 8007416:	f001 fbe3 	bl	8008be0 <_free_r>
 800741a:	6961      	ldr	r1, [r4, #20]
 800741c:	b111      	cbz	r1, 8007424 <_reclaim_reent+0x2c>
 800741e:	4620      	mov	r0, r4
 8007420:	f001 fbde 	bl	8008be0 <_free_r>
 8007424:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007426:	b111      	cbz	r1, 800742e <_reclaim_reent+0x36>
 8007428:	4620      	mov	r0, r4
 800742a:	f001 fbd9 	bl	8008be0 <_free_r>
 800742e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007430:	b111      	cbz	r1, 8007438 <_reclaim_reent+0x40>
 8007432:	4620      	mov	r0, r4
 8007434:	f001 fbd4 	bl	8008be0 <_free_r>
 8007438:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800743a:	b111      	cbz	r1, 8007442 <_reclaim_reent+0x4a>
 800743c:	4620      	mov	r0, r4
 800743e:	f001 fbcf 	bl	8008be0 <_free_r>
 8007442:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007444:	b111      	cbz	r1, 800744c <_reclaim_reent+0x54>
 8007446:	4620      	mov	r0, r4
 8007448:	f001 fbca 	bl	8008be0 <_free_r>
 800744c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800744e:	b111      	cbz	r1, 8007456 <_reclaim_reent+0x5e>
 8007450:	4620      	mov	r0, r4
 8007452:	f001 fbc5 	bl	8008be0 <_free_r>
 8007456:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007458:	b111      	cbz	r1, 8007460 <_reclaim_reent+0x68>
 800745a:	4620      	mov	r0, r4
 800745c:	f001 fbc0 	bl	8008be0 <_free_r>
 8007460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007462:	b111      	cbz	r1, 800746a <_reclaim_reent+0x72>
 8007464:	4620      	mov	r0, r4
 8007466:	f001 fbbb 	bl	8008be0 <_free_r>
 800746a:	69a3      	ldr	r3, [r4, #24]
 800746c:	b1e3      	cbz	r3, 80074a8 <_reclaim_reent+0xb0>
 800746e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007470:	4620      	mov	r0, r4
 8007472:	4798      	blx	r3
 8007474:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007476:	b1b9      	cbz	r1, 80074a8 <_reclaim_reent+0xb0>
 8007478:	4620      	mov	r0, r4
 800747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800747e:	f7ff bfad 	b.w	80073dc <cleanup_glue>
 8007482:	5949      	ldr	r1, [r1, r5]
 8007484:	b941      	cbnz	r1, 8007498 <_reclaim_reent+0xa0>
 8007486:	3504      	adds	r5, #4
 8007488:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800748a:	2d80      	cmp	r5, #128	; 0x80
 800748c:	68d9      	ldr	r1, [r3, #12]
 800748e:	d1f8      	bne.n	8007482 <_reclaim_reent+0x8a>
 8007490:	4620      	mov	r0, r4
 8007492:	f001 fba5 	bl	8008be0 <_free_r>
 8007496:	e7ba      	b.n	800740e <_reclaim_reent+0x16>
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	4620      	mov	r0, r4
 800749c:	f001 fba0 	bl	8008be0 <_free_r>
 80074a0:	4631      	mov	r1, r6
 80074a2:	e7ef      	b.n	8007484 <_reclaim_reent+0x8c>
 80074a4:	2500      	movs	r5, #0
 80074a6:	e7ef      	b.n	8007488 <_reclaim_reent+0x90>
 80074a8:	bd70      	pop	{r4, r5, r6, pc}
 80074aa:	bf00      	nop
 80074ac:	20000010 	.word	0x20000010

080074b0 <_sbrk_r>:
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4d06      	ldr	r5, [pc, #24]	; (80074cc <_sbrk_r+0x1c>)
 80074b4:	2300      	movs	r3, #0
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	602b      	str	r3, [r5, #0]
 80074bc:	f7fa fb60 	bl	8001b80 <_sbrk>
 80074c0:	1c43      	adds	r3, r0, #1
 80074c2:	d102      	bne.n	80074ca <_sbrk_r+0x1a>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	b103      	cbz	r3, 80074ca <_sbrk_r+0x1a>
 80074c8:	6023      	str	r3, [r4, #0]
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	20004468 	.word	0x20004468

080074d0 <siprintf>:
 80074d0:	b40e      	push	{r1, r2, r3}
 80074d2:	b500      	push	{lr}
 80074d4:	b09c      	sub	sp, #112	; 0x70
 80074d6:	ab1d      	add	r3, sp, #116	; 0x74
 80074d8:	9002      	str	r0, [sp, #8]
 80074da:	9006      	str	r0, [sp, #24]
 80074dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074e0:	4809      	ldr	r0, [pc, #36]	; (8007508 <siprintf+0x38>)
 80074e2:	9107      	str	r1, [sp, #28]
 80074e4:	9104      	str	r1, [sp, #16]
 80074e6:	4909      	ldr	r1, [pc, #36]	; (800750c <siprintf+0x3c>)
 80074e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ec:	9105      	str	r1, [sp, #20]
 80074ee:	6800      	ldr	r0, [r0, #0]
 80074f0:	9301      	str	r3, [sp, #4]
 80074f2:	a902      	add	r1, sp, #8
 80074f4:	f001 fc1c 	bl	8008d30 <_svfiprintf_r>
 80074f8:	9b02      	ldr	r3, [sp, #8]
 80074fa:	2200      	movs	r2, #0
 80074fc:	701a      	strb	r2, [r3, #0]
 80074fe:	b01c      	add	sp, #112	; 0x70
 8007500:	f85d eb04 	ldr.w	lr, [sp], #4
 8007504:	b003      	add	sp, #12
 8007506:	4770      	bx	lr
 8007508:	20000010 	.word	0x20000010
 800750c:	ffff0208 	.word	0xffff0208

08007510 <__sread>:
 8007510:	b510      	push	{r4, lr}
 8007512:	460c      	mov	r4, r1
 8007514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007518:	f001 fd0a 	bl	8008f30 <_read_r>
 800751c:	2800      	cmp	r0, #0
 800751e:	bfab      	itete	ge
 8007520:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007522:	89a3      	ldrhlt	r3, [r4, #12]
 8007524:	181b      	addge	r3, r3, r0
 8007526:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800752a:	bfac      	ite	ge
 800752c:	6563      	strge	r3, [r4, #84]	; 0x54
 800752e:	81a3      	strhlt	r3, [r4, #12]
 8007530:	bd10      	pop	{r4, pc}

08007532 <__swrite>:
 8007532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007536:	461f      	mov	r7, r3
 8007538:	898b      	ldrh	r3, [r1, #12]
 800753a:	05db      	lsls	r3, r3, #23
 800753c:	4605      	mov	r5, r0
 800753e:	460c      	mov	r4, r1
 8007540:	4616      	mov	r6, r2
 8007542:	d505      	bpl.n	8007550 <__swrite+0x1e>
 8007544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007548:	2302      	movs	r3, #2
 800754a:	2200      	movs	r2, #0
 800754c:	f000 ff88 	bl	8008460 <_lseek_r>
 8007550:	89a3      	ldrh	r3, [r4, #12]
 8007552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007556:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800755a:	81a3      	strh	r3, [r4, #12]
 800755c:	4632      	mov	r2, r6
 800755e:	463b      	mov	r3, r7
 8007560:	4628      	mov	r0, r5
 8007562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007566:	f000 b817 	b.w	8007598 <_write_r>

0800756a <__sseek>:
 800756a:	b510      	push	{r4, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007572:	f000 ff75 	bl	8008460 <_lseek_r>
 8007576:	1c43      	adds	r3, r0, #1
 8007578:	89a3      	ldrh	r3, [r4, #12]
 800757a:	bf15      	itete	ne
 800757c:	6560      	strne	r0, [r4, #84]	; 0x54
 800757e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007582:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007586:	81a3      	strheq	r3, [r4, #12]
 8007588:	bf18      	it	ne
 800758a:	81a3      	strhne	r3, [r4, #12]
 800758c:	bd10      	pop	{r4, pc}

0800758e <__sclose>:
 800758e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007592:	f000 b813 	b.w	80075bc <_close_r>
	...

08007598 <_write_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	; (80075b8 <_write_r+0x20>)
 800759c:	4604      	mov	r4, r0
 800759e:	4608      	mov	r0, r1
 80075a0:	4611      	mov	r1, r2
 80075a2:	2200      	movs	r2, #0
 80075a4:	602a      	str	r2, [r5, #0]
 80075a6:	461a      	mov	r2, r3
 80075a8:	f7fa fa99 	bl	8001ade <_write>
 80075ac:	1c43      	adds	r3, r0, #1
 80075ae:	d102      	bne.n	80075b6 <_write_r+0x1e>
 80075b0:	682b      	ldr	r3, [r5, #0]
 80075b2:	b103      	cbz	r3, 80075b6 <_write_r+0x1e>
 80075b4:	6023      	str	r3, [r4, #0]
 80075b6:	bd38      	pop	{r3, r4, r5, pc}
 80075b8:	20004468 	.word	0x20004468

080075bc <_close_r>:
 80075bc:	b538      	push	{r3, r4, r5, lr}
 80075be:	4d06      	ldr	r5, [pc, #24]	; (80075d8 <_close_r+0x1c>)
 80075c0:	2300      	movs	r3, #0
 80075c2:	4604      	mov	r4, r0
 80075c4:	4608      	mov	r0, r1
 80075c6:	602b      	str	r3, [r5, #0]
 80075c8:	f7fa faa5 	bl	8001b16 <_close>
 80075cc:	1c43      	adds	r3, r0, #1
 80075ce:	d102      	bne.n	80075d6 <_close_r+0x1a>
 80075d0:	682b      	ldr	r3, [r5, #0]
 80075d2:	b103      	cbz	r3, 80075d6 <_close_r+0x1a>
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	bd38      	pop	{r3, r4, r5, pc}
 80075d8:	20004468 	.word	0x20004468

080075dc <quorem>:
 80075dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	6903      	ldr	r3, [r0, #16]
 80075e2:	690c      	ldr	r4, [r1, #16]
 80075e4:	42a3      	cmp	r3, r4
 80075e6:	4607      	mov	r7, r0
 80075e8:	f2c0 8081 	blt.w	80076ee <quorem+0x112>
 80075ec:	3c01      	subs	r4, #1
 80075ee:	f101 0814 	add.w	r8, r1, #20
 80075f2:	f100 0514 	add.w	r5, r0, #20
 80075f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075fa:	9301      	str	r3, [sp, #4]
 80075fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007600:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007604:	3301      	adds	r3, #1
 8007606:	429a      	cmp	r2, r3
 8007608:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800760c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007610:	fbb2 f6f3 	udiv	r6, r2, r3
 8007614:	d331      	bcc.n	800767a <quorem+0x9e>
 8007616:	f04f 0e00 	mov.w	lr, #0
 800761a:	4640      	mov	r0, r8
 800761c:	46ac      	mov	ip, r5
 800761e:	46f2      	mov	sl, lr
 8007620:	f850 2b04 	ldr.w	r2, [r0], #4
 8007624:	b293      	uxth	r3, r2
 8007626:	fb06 e303 	mla	r3, r6, r3, lr
 800762a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800762e:	b29b      	uxth	r3, r3
 8007630:	ebaa 0303 	sub.w	r3, sl, r3
 8007634:	f8dc a000 	ldr.w	sl, [ip]
 8007638:	0c12      	lsrs	r2, r2, #16
 800763a:	fa13 f38a 	uxtah	r3, r3, sl
 800763e:	fb06 e202 	mla	r2, r6, r2, lr
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	9b00      	ldr	r3, [sp, #0]
 8007646:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800764a:	b292      	uxth	r2, r2
 800764c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007654:	f8bd 3000 	ldrh.w	r3, [sp]
 8007658:	4581      	cmp	r9, r0
 800765a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800765e:	f84c 3b04 	str.w	r3, [ip], #4
 8007662:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007666:	d2db      	bcs.n	8007620 <quorem+0x44>
 8007668:	f855 300b 	ldr.w	r3, [r5, fp]
 800766c:	b92b      	cbnz	r3, 800767a <quorem+0x9e>
 800766e:	9b01      	ldr	r3, [sp, #4]
 8007670:	3b04      	subs	r3, #4
 8007672:	429d      	cmp	r5, r3
 8007674:	461a      	mov	r2, r3
 8007676:	d32e      	bcc.n	80076d6 <quorem+0xfa>
 8007678:	613c      	str	r4, [r7, #16]
 800767a:	4638      	mov	r0, r7
 800767c:	f001 f998 	bl	80089b0 <__mcmp>
 8007680:	2800      	cmp	r0, #0
 8007682:	db24      	blt.n	80076ce <quorem+0xf2>
 8007684:	3601      	adds	r6, #1
 8007686:	4628      	mov	r0, r5
 8007688:	f04f 0c00 	mov.w	ip, #0
 800768c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007690:	f8d0 e000 	ldr.w	lr, [r0]
 8007694:	b293      	uxth	r3, r2
 8007696:	ebac 0303 	sub.w	r3, ip, r3
 800769a:	0c12      	lsrs	r2, r2, #16
 800769c:	fa13 f38e 	uxtah	r3, r3, lr
 80076a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80076a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076ae:	45c1      	cmp	r9, r8
 80076b0:	f840 3b04 	str.w	r3, [r0], #4
 80076b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80076b8:	d2e8      	bcs.n	800768c <quorem+0xb0>
 80076ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076c2:	b922      	cbnz	r2, 80076ce <quorem+0xf2>
 80076c4:	3b04      	subs	r3, #4
 80076c6:	429d      	cmp	r5, r3
 80076c8:	461a      	mov	r2, r3
 80076ca:	d30a      	bcc.n	80076e2 <quorem+0x106>
 80076cc:	613c      	str	r4, [r7, #16]
 80076ce:	4630      	mov	r0, r6
 80076d0:	b003      	add	sp, #12
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	6812      	ldr	r2, [r2, #0]
 80076d8:	3b04      	subs	r3, #4
 80076da:	2a00      	cmp	r2, #0
 80076dc:	d1cc      	bne.n	8007678 <quorem+0x9c>
 80076de:	3c01      	subs	r4, #1
 80076e0:	e7c7      	b.n	8007672 <quorem+0x96>
 80076e2:	6812      	ldr	r2, [r2, #0]
 80076e4:	3b04      	subs	r3, #4
 80076e6:	2a00      	cmp	r2, #0
 80076e8:	d1f0      	bne.n	80076cc <quorem+0xf0>
 80076ea:	3c01      	subs	r4, #1
 80076ec:	e7eb      	b.n	80076c6 <quorem+0xea>
 80076ee:	2000      	movs	r0, #0
 80076f0:	e7ee      	b.n	80076d0 <quorem+0xf4>
 80076f2:	0000      	movs	r0, r0
 80076f4:	0000      	movs	r0, r0
	...

080076f8 <_dtoa_r>:
 80076f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fc:	ed2d 8b04 	vpush	{d8-d9}
 8007700:	ec57 6b10 	vmov	r6, r7, d0
 8007704:	b093      	sub	sp, #76	; 0x4c
 8007706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800770c:	9106      	str	r1, [sp, #24]
 800770e:	ee10 aa10 	vmov	sl, s0
 8007712:	4604      	mov	r4, r0
 8007714:	9209      	str	r2, [sp, #36]	; 0x24
 8007716:	930c      	str	r3, [sp, #48]	; 0x30
 8007718:	46bb      	mov	fp, r7
 800771a:	b975      	cbnz	r5, 800773a <_dtoa_r+0x42>
 800771c:	2010      	movs	r0, #16
 800771e:	f000 feb1 	bl	8008484 <malloc>
 8007722:	4602      	mov	r2, r0
 8007724:	6260      	str	r0, [r4, #36]	; 0x24
 8007726:	b920      	cbnz	r0, 8007732 <_dtoa_r+0x3a>
 8007728:	4ba7      	ldr	r3, [pc, #668]	; (80079c8 <_dtoa_r+0x2d0>)
 800772a:	21ea      	movs	r1, #234	; 0xea
 800772c:	48a7      	ldr	r0, [pc, #668]	; (80079cc <_dtoa_r+0x2d4>)
 800772e:	f001 fc11 	bl	8008f54 <__assert_func>
 8007732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007736:	6005      	str	r5, [r0, #0]
 8007738:	60c5      	str	r5, [r0, #12]
 800773a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800773c:	6819      	ldr	r1, [r3, #0]
 800773e:	b151      	cbz	r1, 8007756 <_dtoa_r+0x5e>
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	604a      	str	r2, [r1, #4]
 8007744:	2301      	movs	r3, #1
 8007746:	4093      	lsls	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
 800774a:	4620      	mov	r0, r4
 800774c:	f000 feee 	bl	800852c <_Bfree>
 8007750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007752:	2200      	movs	r2, #0
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	1e3b      	subs	r3, r7, #0
 8007758:	bfaa      	itet	ge
 800775a:	2300      	movge	r3, #0
 800775c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007760:	f8c8 3000 	strge.w	r3, [r8]
 8007764:	4b9a      	ldr	r3, [pc, #616]	; (80079d0 <_dtoa_r+0x2d8>)
 8007766:	bfbc      	itt	lt
 8007768:	2201      	movlt	r2, #1
 800776a:	f8c8 2000 	strlt.w	r2, [r8]
 800776e:	ea33 030b 	bics.w	r3, r3, fp
 8007772:	d11b      	bne.n	80077ac <_dtoa_r+0xb4>
 8007774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007776:	f242 730f 	movw	r3, #9999	; 0x270f
 800777a:	6013      	str	r3, [r2, #0]
 800777c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007780:	4333      	orrs	r3, r6
 8007782:	f000 8592 	beq.w	80082aa <_dtoa_r+0xbb2>
 8007786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007788:	b963      	cbnz	r3, 80077a4 <_dtoa_r+0xac>
 800778a:	4b92      	ldr	r3, [pc, #584]	; (80079d4 <_dtoa_r+0x2dc>)
 800778c:	e022      	b.n	80077d4 <_dtoa_r+0xdc>
 800778e:	4b92      	ldr	r3, [pc, #584]	; (80079d8 <_dtoa_r+0x2e0>)
 8007790:	9301      	str	r3, [sp, #4]
 8007792:	3308      	adds	r3, #8
 8007794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	9801      	ldr	r0, [sp, #4]
 800779a:	b013      	add	sp, #76	; 0x4c
 800779c:	ecbd 8b04 	vpop	{d8-d9}
 80077a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a4:	4b8b      	ldr	r3, [pc, #556]	; (80079d4 <_dtoa_r+0x2dc>)
 80077a6:	9301      	str	r3, [sp, #4]
 80077a8:	3303      	adds	r3, #3
 80077aa:	e7f3      	b.n	8007794 <_dtoa_r+0x9c>
 80077ac:	2200      	movs	r2, #0
 80077ae:	2300      	movs	r3, #0
 80077b0:	4650      	mov	r0, sl
 80077b2:	4659      	mov	r1, fp
 80077b4:	f7f9 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 80077b8:	ec4b ab19 	vmov	d9, sl, fp
 80077bc:	4680      	mov	r8, r0
 80077be:	b158      	cbz	r0, 80077d8 <_dtoa_r+0xe0>
 80077c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077c2:	2301      	movs	r3, #1
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 856b 	beq.w	80082a4 <_dtoa_r+0xbac>
 80077ce:	4883      	ldr	r0, [pc, #524]	; (80079dc <_dtoa_r+0x2e4>)
 80077d0:	6018      	str	r0, [r3, #0]
 80077d2:	1e43      	subs	r3, r0, #1
 80077d4:	9301      	str	r3, [sp, #4]
 80077d6:	e7df      	b.n	8007798 <_dtoa_r+0xa0>
 80077d8:	ec4b ab10 	vmov	d0, sl, fp
 80077dc:	aa10      	add	r2, sp, #64	; 0x40
 80077de:	a911      	add	r1, sp, #68	; 0x44
 80077e0:	4620      	mov	r0, r4
 80077e2:	f001 f98b 	bl	8008afc <__d2b>
 80077e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80077ea:	ee08 0a10 	vmov	s16, r0
 80077ee:	2d00      	cmp	r5, #0
 80077f0:	f000 8084 	beq.w	80078fc <_dtoa_r+0x204>
 80077f4:	ee19 3a90 	vmov	r3, s19
 80077f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007800:	4656      	mov	r6, sl
 8007802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800780a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800780e:	4b74      	ldr	r3, [pc, #464]	; (80079e0 <_dtoa_r+0x2e8>)
 8007810:	2200      	movs	r2, #0
 8007812:	4630      	mov	r0, r6
 8007814:	4639      	mov	r1, r7
 8007816:	f7f8 fd57 	bl	80002c8 <__aeabi_dsub>
 800781a:	a365      	add	r3, pc, #404	; (adr r3, 80079b0 <_dtoa_r+0x2b8>)
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f7f8 ff0a 	bl	8000638 <__aeabi_dmul>
 8007824:	a364      	add	r3, pc, #400	; (adr r3, 80079b8 <_dtoa_r+0x2c0>)
 8007826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800782a:	f7f8 fd4f 	bl	80002cc <__adddf3>
 800782e:	4606      	mov	r6, r0
 8007830:	4628      	mov	r0, r5
 8007832:	460f      	mov	r7, r1
 8007834:	f7f8 fe96 	bl	8000564 <__aeabi_i2d>
 8007838:	a361      	add	r3, pc, #388	; (adr r3, 80079c0 <_dtoa_r+0x2c8>)
 800783a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783e:	f7f8 fefb 	bl	8000638 <__aeabi_dmul>
 8007842:	4602      	mov	r2, r0
 8007844:	460b      	mov	r3, r1
 8007846:	4630      	mov	r0, r6
 8007848:	4639      	mov	r1, r7
 800784a:	f7f8 fd3f 	bl	80002cc <__adddf3>
 800784e:	4606      	mov	r6, r0
 8007850:	460f      	mov	r7, r1
 8007852:	f7f9 f9a1 	bl	8000b98 <__aeabi_d2iz>
 8007856:	2200      	movs	r2, #0
 8007858:	9000      	str	r0, [sp, #0]
 800785a:	2300      	movs	r3, #0
 800785c:	4630      	mov	r0, r6
 800785e:	4639      	mov	r1, r7
 8007860:	f7f9 f95c 	bl	8000b1c <__aeabi_dcmplt>
 8007864:	b150      	cbz	r0, 800787c <_dtoa_r+0x184>
 8007866:	9800      	ldr	r0, [sp, #0]
 8007868:	f7f8 fe7c 	bl	8000564 <__aeabi_i2d>
 800786c:	4632      	mov	r2, r6
 800786e:	463b      	mov	r3, r7
 8007870:	f7f9 f94a 	bl	8000b08 <__aeabi_dcmpeq>
 8007874:	b910      	cbnz	r0, 800787c <_dtoa_r+0x184>
 8007876:	9b00      	ldr	r3, [sp, #0]
 8007878:	3b01      	subs	r3, #1
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	9b00      	ldr	r3, [sp, #0]
 800787e:	2b16      	cmp	r3, #22
 8007880:	d85a      	bhi.n	8007938 <_dtoa_r+0x240>
 8007882:	9a00      	ldr	r2, [sp, #0]
 8007884:	4b57      	ldr	r3, [pc, #348]	; (80079e4 <_dtoa_r+0x2ec>)
 8007886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800788a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788e:	ec51 0b19 	vmov	r0, r1, d9
 8007892:	f7f9 f943 	bl	8000b1c <__aeabi_dcmplt>
 8007896:	2800      	cmp	r0, #0
 8007898:	d050      	beq.n	800793c <_dtoa_r+0x244>
 800789a:	9b00      	ldr	r3, [sp, #0]
 800789c:	3b01      	subs	r3, #1
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	2300      	movs	r3, #0
 80078a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80078a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80078a6:	1b5d      	subs	r5, r3, r5
 80078a8:	1e6b      	subs	r3, r5, #1
 80078aa:	9305      	str	r3, [sp, #20]
 80078ac:	bf45      	ittet	mi
 80078ae:	f1c5 0301 	rsbmi	r3, r5, #1
 80078b2:	9304      	strmi	r3, [sp, #16]
 80078b4:	2300      	movpl	r3, #0
 80078b6:	2300      	movmi	r3, #0
 80078b8:	bf4c      	ite	mi
 80078ba:	9305      	strmi	r3, [sp, #20]
 80078bc:	9304      	strpl	r3, [sp, #16]
 80078be:	9b00      	ldr	r3, [sp, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	db3d      	blt.n	8007940 <_dtoa_r+0x248>
 80078c4:	9b05      	ldr	r3, [sp, #20]
 80078c6:	9a00      	ldr	r2, [sp, #0]
 80078c8:	920a      	str	r2, [sp, #40]	; 0x28
 80078ca:	4413      	add	r3, r2
 80078cc:	9305      	str	r3, [sp, #20]
 80078ce:	2300      	movs	r3, #0
 80078d0:	9307      	str	r3, [sp, #28]
 80078d2:	9b06      	ldr	r3, [sp, #24]
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	f200 8089 	bhi.w	80079ec <_dtoa_r+0x2f4>
 80078da:	2b05      	cmp	r3, #5
 80078dc:	bfc4      	itt	gt
 80078de:	3b04      	subgt	r3, #4
 80078e0:	9306      	strgt	r3, [sp, #24]
 80078e2:	9b06      	ldr	r3, [sp, #24]
 80078e4:	f1a3 0302 	sub.w	r3, r3, #2
 80078e8:	bfcc      	ite	gt
 80078ea:	2500      	movgt	r5, #0
 80078ec:	2501      	movle	r5, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	f200 8087 	bhi.w	8007a02 <_dtoa_r+0x30a>
 80078f4:	e8df f003 	tbb	[pc, r3]
 80078f8:	59383a2d 	.word	0x59383a2d
 80078fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007900:	441d      	add	r5, r3
 8007902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007906:	2b20      	cmp	r3, #32
 8007908:	bfc1      	itttt	gt
 800790a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800790e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007912:	fa0b f303 	lslgt.w	r3, fp, r3
 8007916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800791a:	bfda      	itte	le
 800791c:	f1c3 0320 	rsble	r3, r3, #32
 8007920:	fa06 f003 	lslle.w	r0, r6, r3
 8007924:	4318      	orrgt	r0, r3
 8007926:	f7f8 fe0d 	bl	8000544 <__aeabi_ui2d>
 800792a:	2301      	movs	r3, #1
 800792c:	4606      	mov	r6, r0
 800792e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007932:	3d01      	subs	r5, #1
 8007934:	930e      	str	r3, [sp, #56]	; 0x38
 8007936:	e76a      	b.n	800780e <_dtoa_r+0x116>
 8007938:	2301      	movs	r3, #1
 800793a:	e7b2      	b.n	80078a2 <_dtoa_r+0x1aa>
 800793c:	900b      	str	r0, [sp, #44]	; 0x2c
 800793e:	e7b1      	b.n	80078a4 <_dtoa_r+0x1ac>
 8007940:	9b04      	ldr	r3, [sp, #16]
 8007942:	9a00      	ldr	r2, [sp, #0]
 8007944:	1a9b      	subs	r3, r3, r2
 8007946:	9304      	str	r3, [sp, #16]
 8007948:	4253      	negs	r3, r2
 800794a:	9307      	str	r3, [sp, #28]
 800794c:	2300      	movs	r3, #0
 800794e:	930a      	str	r3, [sp, #40]	; 0x28
 8007950:	e7bf      	b.n	80078d2 <_dtoa_r+0x1da>
 8007952:	2300      	movs	r3, #0
 8007954:	9308      	str	r3, [sp, #32]
 8007956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007958:	2b00      	cmp	r3, #0
 800795a:	dc55      	bgt.n	8007a08 <_dtoa_r+0x310>
 800795c:	2301      	movs	r3, #1
 800795e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007962:	461a      	mov	r2, r3
 8007964:	9209      	str	r2, [sp, #36]	; 0x24
 8007966:	e00c      	b.n	8007982 <_dtoa_r+0x28a>
 8007968:	2301      	movs	r3, #1
 800796a:	e7f3      	b.n	8007954 <_dtoa_r+0x25c>
 800796c:	2300      	movs	r3, #0
 800796e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007970:	9308      	str	r3, [sp, #32]
 8007972:	9b00      	ldr	r3, [sp, #0]
 8007974:	4413      	add	r3, r2
 8007976:	9302      	str	r3, [sp, #8]
 8007978:	3301      	adds	r3, #1
 800797a:	2b01      	cmp	r3, #1
 800797c:	9303      	str	r3, [sp, #12]
 800797e:	bfb8      	it	lt
 8007980:	2301      	movlt	r3, #1
 8007982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007984:	2200      	movs	r2, #0
 8007986:	6042      	str	r2, [r0, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	f102 0614 	add.w	r6, r2, #20
 800798e:	429e      	cmp	r6, r3
 8007990:	6841      	ldr	r1, [r0, #4]
 8007992:	d93d      	bls.n	8007a10 <_dtoa_r+0x318>
 8007994:	4620      	mov	r0, r4
 8007996:	f000 fd89 	bl	80084ac <_Balloc>
 800799a:	9001      	str	r0, [sp, #4]
 800799c:	2800      	cmp	r0, #0
 800799e:	d13b      	bne.n	8007a18 <_dtoa_r+0x320>
 80079a0:	4b11      	ldr	r3, [pc, #68]	; (80079e8 <_dtoa_r+0x2f0>)
 80079a2:	4602      	mov	r2, r0
 80079a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80079a8:	e6c0      	b.n	800772c <_dtoa_r+0x34>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e7df      	b.n	800796e <_dtoa_r+0x276>
 80079ae:	bf00      	nop
 80079b0:	636f4361 	.word	0x636f4361
 80079b4:	3fd287a7 	.word	0x3fd287a7
 80079b8:	8b60c8b3 	.word	0x8b60c8b3
 80079bc:	3fc68a28 	.word	0x3fc68a28
 80079c0:	509f79fb 	.word	0x509f79fb
 80079c4:	3fd34413 	.word	0x3fd34413
 80079c8:	080097b5 	.word	0x080097b5
 80079cc:	080097cc 	.word	0x080097cc
 80079d0:	7ff00000 	.word	0x7ff00000
 80079d4:	080097b1 	.word	0x080097b1
 80079d8:	080097a8 	.word	0x080097a8
 80079dc:	08009785 	.word	0x08009785
 80079e0:	3ff80000 	.word	0x3ff80000
 80079e4:	080098c0 	.word	0x080098c0
 80079e8:	08009827 	.word	0x08009827
 80079ec:	2501      	movs	r5, #1
 80079ee:	2300      	movs	r3, #0
 80079f0:	9306      	str	r3, [sp, #24]
 80079f2:	9508      	str	r5, [sp, #32]
 80079f4:	f04f 33ff 	mov.w	r3, #4294967295
 80079f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079fc:	2200      	movs	r2, #0
 80079fe:	2312      	movs	r3, #18
 8007a00:	e7b0      	b.n	8007964 <_dtoa_r+0x26c>
 8007a02:	2301      	movs	r3, #1
 8007a04:	9308      	str	r3, [sp, #32]
 8007a06:	e7f5      	b.n	80079f4 <_dtoa_r+0x2fc>
 8007a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007a0e:	e7b8      	b.n	8007982 <_dtoa_r+0x28a>
 8007a10:	3101      	adds	r1, #1
 8007a12:	6041      	str	r1, [r0, #4]
 8007a14:	0052      	lsls	r2, r2, #1
 8007a16:	e7b8      	b.n	800798a <_dtoa_r+0x292>
 8007a18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a1a:	9a01      	ldr	r2, [sp, #4]
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	9b03      	ldr	r3, [sp, #12]
 8007a20:	2b0e      	cmp	r3, #14
 8007a22:	f200 809d 	bhi.w	8007b60 <_dtoa_r+0x468>
 8007a26:	2d00      	cmp	r5, #0
 8007a28:	f000 809a 	beq.w	8007b60 <_dtoa_r+0x468>
 8007a2c:	9b00      	ldr	r3, [sp, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	dd32      	ble.n	8007a98 <_dtoa_r+0x3a0>
 8007a32:	4ab7      	ldr	r2, [pc, #732]	; (8007d10 <_dtoa_r+0x618>)
 8007a34:	f003 030f 	and.w	r3, r3, #15
 8007a38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a40:	9b00      	ldr	r3, [sp, #0]
 8007a42:	05d8      	lsls	r0, r3, #23
 8007a44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007a48:	d516      	bpl.n	8007a78 <_dtoa_r+0x380>
 8007a4a:	4bb2      	ldr	r3, [pc, #712]	; (8007d14 <_dtoa_r+0x61c>)
 8007a4c:	ec51 0b19 	vmov	r0, r1, d9
 8007a50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a54:	f7f8 ff1a 	bl	800088c <__aeabi_ddiv>
 8007a58:	f007 070f 	and.w	r7, r7, #15
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	2503      	movs	r5, #3
 8007a62:	4eac      	ldr	r6, [pc, #688]	; (8007d14 <_dtoa_r+0x61c>)
 8007a64:	b957      	cbnz	r7, 8007a7c <_dtoa_r+0x384>
 8007a66:	4642      	mov	r2, r8
 8007a68:	464b      	mov	r3, r9
 8007a6a:	4650      	mov	r0, sl
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	f7f8 ff0d 	bl	800088c <__aeabi_ddiv>
 8007a72:	4682      	mov	sl, r0
 8007a74:	468b      	mov	fp, r1
 8007a76:	e028      	b.n	8007aca <_dtoa_r+0x3d2>
 8007a78:	2502      	movs	r5, #2
 8007a7a:	e7f2      	b.n	8007a62 <_dtoa_r+0x36a>
 8007a7c:	07f9      	lsls	r1, r7, #31
 8007a7e:	d508      	bpl.n	8007a92 <_dtoa_r+0x39a>
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a88:	f7f8 fdd6 	bl	8000638 <__aeabi_dmul>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	4680      	mov	r8, r0
 8007a90:	4689      	mov	r9, r1
 8007a92:	107f      	asrs	r7, r7, #1
 8007a94:	3608      	adds	r6, #8
 8007a96:	e7e5      	b.n	8007a64 <_dtoa_r+0x36c>
 8007a98:	f000 809b 	beq.w	8007bd2 <_dtoa_r+0x4da>
 8007a9c:	9b00      	ldr	r3, [sp, #0]
 8007a9e:	4f9d      	ldr	r7, [pc, #628]	; (8007d14 <_dtoa_r+0x61c>)
 8007aa0:	425e      	negs	r6, r3
 8007aa2:	4b9b      	ldr	r3, [pc, #620]	; (8007d10 <_dtoa_r+0x618>)
 8007aa4:	f006 020f 	and.w	r2, r6, #15
 8007aa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab0:	ec51 0b19 	vmov	r0, r1, d9
 8007ab4:	f7f8 fdc0 	bl	8000638 <__aeabi_dmul>
 8007ab8:	1136      	asrs	r6, r6, #4
 8007aba:	4682      	mov	sl, r0
 8007abc:	468b      	mov	fp, r1
 8007abe:	2300      	movs	r3, #0
 8007ac0:	2502      	movs	r5, #2
 8007ac2:	2e00      	cmp	r6, #0
 8007ac4:	d17a      	bne.n	8007bbc <_dtoa_r+0x4c4>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1d3      	bne.n	8007a72 <_dtoa_r+0x37a>
 8007aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8082 	beq.w	8007bd6 <_dtoa_r+0x4de>
 8007ad2:	4b91      	ldr	r3, [pc, #580]	; (8007d18 <_dtoa_r+0x620>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	4650      	mov	r0, sl
 8007ad8:	4659      	mov	r1, fp
 8007ada:	f7f9 f81f 	bl	8000b1c <__aeabi_dcmplt>
 8007ade:	2800      	cmp	r0, #0
 8007ae0:	d079      	beq.n	8007bd6 <_dtoa_r+0x4de>
 8007ae2:	9b03      	ldr	r3, [sp, #12]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d076      	beq.n	8007bd6 <_dtoa_r+0x4de>
 8007ae8:	9b02      	ldr	r3, [sp, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	dd36      	ble.n	8007b5c <_dtoa_r+0x464>
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	4650      	mov	r0, sl
 8007af2:	4659      	mov	r1, fp
 8007af4:	1e5f      	subs	r7, r3, #1
 8007af6:	2200      	movs	r2, #0
 8007af8:	4b88      	ldr	r3, [pc, #544]	; (8007d1c <_dtoa_r+0x624>)
 8007afa:	f7f8 fd9d 	bl	8000638 <__aeabi_dmul>
 8007afe:	9e02      	ldr	r6, [sp, #8]
 8007b00:	4682      	mov	sl, r0
 8007b02:	468b      	mov	fp, r1
 8007b04:	3501      	adds	r5, #1
 8007b06:	4628      	mov	r0, r5
 8007b08:	f7f8 fd2c 	bl	8000564 <__aeabi_i2d>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	465b      	mov	r3, fp
 8007b10:	f7f8 fd92 	bl	8000638 <__aeabi_dmul>
 8007b14:	4b82      	ldr	r3, [pc, #520]	; (8007d20 <_dtoa_r+0x628>)
 8007b16:	2200      	movs	r2, #0
 8007b18:	f7f8 fbd8 	bl	80002cc <__adddf3>
 8007b1c:	46d0      	mov	r8, sl
 8007b1e:	46d9      	mov	r9, fp
 8007b20:	4682      	mov	sl, r0
 8007b22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007b26:	2e00      	cmp	r6, #0
 8007b28:	d158      	bne.n	8007bdc <_dtoa_r+0x4e4>
 8007b2a:	4b7e      	ldr	r3, [pc, #504]	; (8007d24 <_dtoa_r+0x62c>)
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	f7f8 fbc9 	bl	80002c8 <__aeabi_dsub>
 8007b36:	4652      	mov	r2, sl
 8007b38:	465b      	mov	r3, fp
 8007b3a:	4680      	mov	r8, r0
 8007b3c:	4689      	mov	r9, r1
 8007b3e:	f7f9 f80b 	bl	8000b58 <__aeabi_dcmpgt>
 8007b42:	2800      	cmp	r0, #0
 8007b44:	f040 8295 	bne.w	8008072 <_dtoa_r+0x97a>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b4e:	4640      	mov	r0, r8
 8007b50:	4649      	mov	r1, r9
 8007b52:	f7f8 ffe3 	bl	8000b1c <__aeabi_dcmplt>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	f040 8289 	bne.w	800806e <_dtoa_r+0x976>
 8007b5c:	ec5b ab19 	vmov	sl, fp, d9
 8007b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	f2c0 8148 	blt.w	8007df8 <_dtoa_r+0x700>
 8007b68:	9a00      	ldr	r2, [sp, #0]
 8007b6a:	2a0e      	cmp	r2, #14
 8007b6c:	f300 8144 	bgt.w	8007df8 <_dtoa_r+0x700>
 8007b70:	4b67      	ldr	r3, [pc, #412]	; (8007d10 <_dtoa_r+0x618>)
 8007b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	f280 80d5 	bge.w	8007d2c <_dtoa_r+0x634>
 8007b82:	9b03      	ldr	r3, [sp, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	f300 80d1 	bgt.w	8007d2c <_dtoa_r+0x634>
 8007b8a:	f040 826f 	bne.w	800806c <_dtoa_r+0x974>
 8007b8e:	4b65      	ldr	r3, [pc, #404]	; (8007d24 <_dtoa_r+0x62c>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	4640      	mov	r0, r8
 8007b94:	4649      	mov	r1, r9
 8007b96:	f7f8 fd4f 	bl	8000638 <__aeabi_dmul>
 8007b9a:	4652      	mov	r2, sl
 8007b9c:	465b      	mov	r3, fp
 8007b9e:	f7f8 ffd1 	bl	8000b44 <__aeabi_dcmpge>
 8007ba2:	9e03      	ldr	r6, [sp, #12]
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f040 8245 	bne.w	8008036 <_dtoa_r+0x93e>
 8007bac:	9d01      	ldr	r5, [sp, #4]
 8007bae:	2331      	movs	r3, #49	; 0x31
 8007bb0:	f805 3b01 	strb.w	r3, [r5], #1
 8007bb4:	9b00      	ldr	r3, [sp, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	e240      	b.n	800803e <_dtoa_r+0x946>
 8007bbc:	07f2      	lsls	r2, r6, #31
 8007bbe:	d505      	bpl.n	8007bcc <_dtoa_r+0x4d4>
 8007bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bc4:	f7f8 fd38 	bl	8000638 <__aeabi_dmul>
 8007bc8:	3501      	adds	r5, #1
 8007bca:	2301      	movs	r3, #1
 8007bcc:	1076      	asrs	r6, r6, #1
 8007bce:	3708      	adds	r7, #8
 8007bd0:	e777      	b.n	8007ac2 <_dtoa_r+0x3ca>
 8007bd2:	2502      	movs	r5, #2
 8007bd4:	e779      	b.n	8007aca <_dtoa_r+0x3d2>
 8007bd6:	9f00      	ldr	r7, [sp, #0]
 8007bd8:	9e03      	ldr	r6, [sp, #12]
 8007bda:	e794      	b.n	8007b06 <_dtoa_r+0x40e>
 8007bdc:	9901      	ldr	r1, [sp, #4]
 8007bde:	4b4c      	ldr	r3, [pc, #304]	; (8007d10 <_dtoa_r+0x618>)
 8007be0:	4431      	add	r1, r6
 8007be2:	910d      	str	r1, [sp, #52]	; 0x34
 8007be4:	9908      	ldr	r1, [sp, #32]
 8007be6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007bea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007bee:	2900      	cmp	r1, #0
 8007bf0:	d043      	beq.n	8007c7a <_dtoa_r+0x582>
 8007bf2:	494d      	ldr	r1, [pc, #308]	; (8007d28 <_dtoa_r+0x630>)
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	f7f8 fe49 	bl	800088c <__aeabi_ddiv>
 8007bfa:	4652      	mov	r2, sl
 8007bfc:	465b      	mov	r3, fp
 8007bfe:	f7f8 fb63 	bl	80002c8 <__aeabi_dsub>
 8007c02:	9d01      	ldr	r5, [sp, #4]
 8007c04:	4682      	mov	sl, r0
 8007c06:	468b      	mov	fp, r1
 8007c08:	4649      	mov	r1, r9
 8007c0a:	4640      	mov	r0, r8
 8007c0c:	f7f8 ffc4 	bl	8000b98 <__aeabi_d2iz>
 8007c10:	4606      	mov	r6, r0
 8007c12:	f7f8 fca7 	bl	8000564 <__aeabi_i2d>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4640      	mov	r0, r8
 8007c1c:	4649      	mov	r1, r9
 8007c1e:	f7f8 fb53 	bl	80002c8 <__aeabi_dsub>
 8007c22:	3630      	adds	r6, #48	; 0x30
 8007c24:	f805 6b01 	strb.w	r6, [r5], #1
 8007c28:	4652      	mov	r2, sl
 8007c2a:	465b      	mov	r3, fp
 8007c2c:	4680      	mov	r8, r0
 8007c2e:	4689      	mov	r9, r1
 8007c30:	f7f8 ff74 	bl	8000b1c <__aeabi_dcmplt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d163      	bne.n	8007d00 <_dtoa_r+0x608>
 8007c38:	4642      	mov	r2, r8
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	4936      	ldr	r1, [pc, #216]	; (8007d18 <_dtoa_r+0x620>)
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f7f8 fb42 	bl	80002c8 <__aeabi_dsub>
 8007c44:	4652      	mov	r2, sl
 8007c46:	465b      	mov	r3, fp
 8007c48:	f7f8 ff68 	bl	8000b1c <__aeabi_dcmplt>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	f040 80b5 	bne.w	8007dbc <_dtoa_r+0x6c4>
 8007c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c54:	429d      	cmp	r5, r3
 8007c56:	d081      	beq.n	8007b5c <_dtoa_r+0x464>
 8007c58:	4b30      	ldr	r3, [pc, #192]	; (8007d1c <_dtoa_r+0x624>)
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f8 fcea 	bl	8000638 <__aeabi_dmul>
 8007c64:	4b2d      	ldr	r3, [pc, #180]	; (8007d1c <_dtoa_r+0x624>)
 8007c66:	4682      	mov	sl, r0
 8007c68:	468b      	mov	fp, r1
 8007c6a:	4640      	mov	r0, r8
 8007c6c:	4649      	mov	r1, r9
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f7f8 fce2 	bl	8000638 <__aeabi_dmul>
 8007c74:	4680      	mov	r8, r0
 8007c76:	4689      	mov	r9, r1
 8007c78:	e7c6      	b.n	8007c08 <_dtoa_r+0x510>
 8007c7a:	4650      	mov	r0, sl
 8007c7c:	4659      	mov	r1, fp
 8007c7e:	f7f8 fcdb 	bl	8000638 <__aeabi_dmul>
 8007c82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c84:	9d01      	ldr	r5, [sp, #4]
 8007c86:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	4649      	mov	r1, r9
 8007c8e:	4640      	mov	r0, r8
 8007c90:	f7f8 ff82 	bl	8000b98 <__aeabi_d2iz>
 8007c94:	4606      	mov	r6, r0
 8007c96:	f7f8 fc65 	bl	8000564 <__aeabi_i2d>
 8007c9a:	3630      	adds	r6, #48	; 0x30
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 fb10 	bl	80002c8 <__aeabi_dsub>
 8007ca8:	f805 6b01 	strb.w	r6, [r5], #1
 8007cac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007cae:	429d      	cmp	r5, r3
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4689      	mov	r9, r1
 8007cb4:	f04f 0200 	mov.w	r2, #0
 8007cb8:	d124      	bne.n	8007d04 <_dtoa_r+0x60c>
 8007cba:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <_dtoa_r+0x630>)
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	4659      	mov	r1, fp
 8007cc0:	f7f8 fb04 	bl	80002cc <__adddf3>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4640      	mov	r0, r8
 8007cca:	4649      	mov	r1, r9
 8007ccc:	f7f8 ff44 	bl	8000b58 <__aeabi_dcmpgt>
 8007cd0:	2800      	cmp	r0, #0
 8007cd2:	d173      	bne.n	8007dbc <_dtoa_r+0x6c4>
 8007cd4:	4652      	mov	r2, sl
 8007cd6:	465b      	mov	r3, fp
 8007cd8:	4913      	ldr	r1, [pc, #76]	; (8007d28 <_dtoa_r+0x630>)
 8007cda:	2000      	movs	r0, #0
 8007cdc:	f7f8 faf4 	bl	80002c8 <__aeabi_dsub>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4649      	mov	r1, r9
 8007ce8:	f7f8 ff18 	bl	8000b1c <__aeabi_dcmplt>
 8007cec:	2800      	cmp	r0, #0
 8007cee:	f43f af35 	beq.w	8007b5c <_dtoa_r+0x464>
 8007cf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007cf4:	1e6b      	subs	r3, r5, #1
 8007cf6:	930f      	str	r3, [sp, #60]	; 0x3c
 8007cf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007cfc:	2b30      	cmp	r3, #48	; 0x30
 8007cfe:	d0f8      	beq.n	8007cf2 <_dtoa_r+0x5fa>
 8007d00:	9700      	str	r7, [sp, #0]
 8007d02:	e049      	b.n	8007d98 <_dtoa_r+0x6a0>
 8007d04:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <_dtoa_r+0x624>)
 8007d06:	f7f8 fc97 	bl	8000638 <__aeabi_dmul>
 8007d0a:	4680      	mov	r8, r0
 8007d0c:	4689      	mov	r9, r1
 8007d0e:	e7bd      	b.n	8007c8c <_dtoa_r+0x594>
 8007d10:	080098c0 	.word	0x080098c0
 8007d14:	08009898 	.word	0x08009898
 8007d18:	3ff00000 	.word	0x3ff00000
 8007d1c:	40240000 	.word	0x40240000
 8007d20:	401c0000 	.word	0x401c0000
 8007d24:	40140000 	.word	0x40140000
 8007d28:	3fe00000 	.word	0x3fe00000
 8007d2c:	9d01      	ldr	r5, [sp, #4]
 8007d2e:	4656      	mov	r6, sl
 8007d30:	465f      	mov	r7, fp
 8007d32:	4642      	mov	r2, r8
 8007d34:	464b      	mov	r3, r9
 8007d36:	4630      	mov	r0, r6
 8007d38:	4639      	mov	r1, r7
 8007d3a:	f7f8 fda7 	bl	800088c <__aeabi_ddiv>
 8007d3e:	f7f8 ff2b 	bl	8000b98 <__aeabi_d2iz>
 8007d42:	4682      	mov	sl, r0
 8007d44:	f7f8 fc0e 	bl	8000564 <__aeabi_i2d>
 8007d48:	4642      	mov	r2, r8
 8007d4a:	464b      	mov	r3, r9
 8007d4c:	f7f8 fc74 	bl	8000638 <__aeabi_dmul>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	4630      	mov	r0, r6
 8007d56:	4639      	mov	r1, r7
 8007d58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007d5c:	f7f8 fab4 	bl	80002c8 <__aeabi_dsub>
 8007d60:	f805 6b01 	strb.w	r6, [r5], #1
 8007d64:	9e01      	ldr	r6, [sp, #4]
 8007d66:	9f03      	ldr	r7, [sp, #12]
 8007d68:	1bae      	subs	r6, r5, r6
 8007d6a:	42b7      	cmp	r7, r6
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	460b      	mov	r3, r1
 8007d70:	d135      	bne.n	8007dde <_dtoa_r+0x6e6>
 8007d72:	f7f8 faab 	bl	80002cc <__adddf3>
 8007d76:	4642      	mov	r2, r8
 8007d78:	464b      	mov	r3, r9
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460f      	mov	r7, r1
 8007d7e:	f7f8 feeb 	bl	8000b58 <__aeabi_dcmpgt>
 8007d82:	b9d0      	cbnz	r0, 8007dba <_dtoa_r+0x6c2>
 8007d84:	4642      	mov	r2, r8
 8007d86:	464b      	mov	r3, r9
 8007d88:	4630      	mov	r0, r6
 8007d8a:	4639      	mov	r1, r7
 8007d8c:	f7f8 febc 	bl	8000b08 <__aeabi_dcmpeq>
 8007d90:	b110      	cbz	r0, 8007d98 <_dtoa_r+0x6a0>
 8007d92:	f01a 0f01 	tst.w	sl, #1
 8007d96:	d110      	bne.n	8007dba <_dtoa_r+0x6c2>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	ee18 1a10 	vmov	r1, s16
 8007d9e:	f000 fbc5 	bl	800852c <_Bfree>
 8007da2:	2300      	movs	r3, #0
 8007da4:	9800      	ldr	r0, [sp, #0]
 8007da6:	702b      	strb	r3, [r5, #0]
 8007da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007daa:	3001      	adds	r0, #1
 8007dac:	6018      	str	r0, [r3, #0]
 8007dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f43f acf1 	beq.w	8007798 <_dtoa_r+0xa0>
 8007db6:	601d      	str	r5, [r3, #0]
 8007db8:	e4ee      	b.n	8007798 <_dtoa_r+0xa0>
 8007dba:	9f00      	ldr	r7, [sp, #0]
 8007dbc:	462b      	mov	r3, r5
 8007dbe:	461d      	mov	r5, r3
 8007dc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007dc4:	2a39      	cmp	r2, #57	; 0x39
 8007dc6:	d106      	bne.n	8007dd6 <_dtoa_r+0x6de>
 8007dc8:	9a01      	ldr	r2, [sp, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d1f7      	bne.n	8007dbe <_dtoa_r+0x6c6>
 8007dce:	9901      	ldr	r1, [sp, #4]
 8007dd0:	2230      	movs	r2, #48	; 0x30
 8007dd2:	3701      	adds	r7, #1
 8007dd4:	700a      	strb	r2, [r1, #0]
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	3201      	adds	r2, #1
 8007dda:	701a      	strb	r2, [r3, #0]
 8007ddc:	e790      	b.n	8007d00 <_dtoa_r+0x608>
 8007dde:	4ba6      	ldr	r3, [pc, #664]	; (8008078 <_dtoa_r+0x980>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fc29 	bl	8000638 <__aeabi_dmul>
 8007de6:	2200      	movs	r2, #0
 8007de8:	2300      	movs	r3, #0
 8007dea:	4606      	mov	r6, r0
 8007dec:	460f      	mov	r7, r1
 8007dee:	f7f8 fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d09d      	beq.n	8007d32 <_dtoa_r+0x63a>
 8007df6:	e7cf      	b.n	8007d98 <_dtoa_r+0x6a0>
 8007df8:	9a08      	ldr	r2, [sp, #32]
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	f000 80d7 	beq.w	8007fae <_dtoa_r+0x8b6>
 8007e00:	9a06      	ldr	r2, [sp, #24]
 8007e02:	2a01      	cmp	r2, #1
 8007e04:	f300 80ba 	bgt.w	8007f7c <_dtoa_r+0x884>
 8007e08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007e0a:	2a00      	cmp	r2, #0
 8007e0c:	f000 80b2 	beq.w	8007f74 <_dtoa_r+0x87c>
 8007e10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007e14:	9e07      	ldr	r6, [sp, #28]
 8007e16:	9d04      	ldr	r5, [sp, #16]
 8007e18:	9a04      	ldr	r2, [sp, #16]
 8007e1a:	441a      	add	r2, r3
 8007e1c:	9204      	str	r2, [sp, #16]
 8007e1e:	9a05      	ldr	r2, [sp, #20]
 8007e20:	2101      	movs	r1, #1
 8007e22:	441a      	add	r2, r3
 8007e24:	4620      	mov	r0, r4
 8007e26:	9205      	str	r2, [sp, #20]
 8007e28:	f000 fc38 	bl	800869c <__i2b>
 8007e2c:	4607      	mov	r7, r0
 8007e2e:	2d00      	cmp	r5, #0
 8007e30:	dd0c      	ble.n	8007e4c <_dtoa_r+0x754>
 8007e32:	9b05      	ldr	r3, [sp, #20]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	dd09      	ble.n	8007e4c <_dtoa_r+0x754>
 8007e38:	42ab      	cmp	r3, r5
 8007e3a:	9a04      	ldr	r2, [sp, #16]
 8007e3c:	bfa8      	it	ge
 8007e3e:	462b      	movge	r3, r5
 8007e40:	1ad2      	subs	r2, r2, r3
 8007e42:	9204      	str	r2, [sp, #16]
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	1aed      	subs	r5, r5, r3
 8007e48:	1ad3      	subs	r3, r2, r3
 8007e4a:	9305      	str	r3, [sp, #20]
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	b31b      	cbz	r3, 8007e98 <_dtoa_r+0x7a0>
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 80af 	beq.w	8007fb6 <_dtoa_r+0x8be>
 8007e58:	2e00      	cmp	r6, #0
 8007e5a:	dd13      	ble.n	8007e84 <_dtoa_r+0x78c>
 8007e5c:	4639      	mov	r1, r7
 8007e5e:	4632      	mov	r2, r6
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fcdb 	bl	800881c <__pow5mult>
 8007e66:	ee18 2a10 	vmov	r2, s16
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	4607      	mov	r7, r0
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f000 fc2a 	bl	80086c8 <__multiply>
 8007e74:	ee18 1a10 	vmov	r1, s16
 8007e78:	4680      	mov	r8, r0
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 fb56 	bl	800852c <_Bfree>
 8007e80:	ee08 8a10 	vmov	s16, r8
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	1b9a      	subs	r2, r3, r6
 8007e88:	d006      	beq.n	8007e98 <_dtoa_r+0x7a0>
 8007e8a:	ee18 1a10 	vmov	r1, s16
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 fcc4 	bl	800881c <__pow5mult>
 8007e94:	ee08 0a10 	vmov	s16, r0
 8007e98:	2101      	movs	r1, #1
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	f000 fbfe 	bl	800869c <__i2b>
 8007ea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	4606      	mov	r6, r0
 8007ea6:	f340 8088 	ble.w	8007fba <_dtoa_r+0x8c2>
 8007eaa:	461a      	mov	r2, r3
 8007eac:	4601      	mov	r1, r0
 8007eae:	4620      	mov	r0, r4
 8007eb0:	f000 fcb4 	bl	800881c <__pow5mult>
 8007eb4:	9b06      	ldr	r3, [sp, #24]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	4606      	mov	r6, r0
 8007eba:	f340 8081 	ble.w	8007fc0 <_dtoa_r+0x8c8>
 8007ebe:	f04f 0800 	mov.w	r8, #0
 8007ec2:	6933      	ldr	r3, [r6, #16]
 8007ec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007ec8:	6918      	ldr	r0, [r3, #16]
 8007eca:	f000 fb97 	bl	80085fc <__hi0bits>
 8007ece:	f1c0 0020 	rsb	r0, r0, #32
 8007ed2:	9b05      	ldr	r3, [sp, #20]
 8007ed4:	4418      	add	r0, r3
 8007ed6:	f010 001f 	ands.w	r0, r0, #31
 8007eda:	f000 8092 	beq.w	8008002 <_dtoa_r+0x90a>
 8007ede:	f1c0 0320 	rsb	r3, r0, #32
 8007ee2:	2b04      	cmp	r3, #4
 8007ee4:	f340 808a 	ble.w	8007ffc <_dtoa_r+0x904>
 8007ee8:	f1c0 001c 	rsb	r0, r0, #28
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	4403      	add	r3, r0
 8007ef0:	9304      	str	r3, [sp, #16]
 8007ef2:	9b05      	ldr	r3, [sp, #20]
 8007ef4:	4403      	add	r3, r0
 8007ef6:	4405      	add	r5, r0
 8007ef8:	9305      	str	r3, [sp, #20]
 8007efa:	9b04      	ldr	r3, [sp, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd07      	ble.n	8007f10 <_dtoa_r+0x818>
 8007f00:	ee18 1a10 	vmov	r1, s16
 8007f04:	461a      	mov	r2, r3
 8007f06:	4620      	mov	r0, r4
 8007f08:	f000 fce2 	bl	80088d0 <__lshift>
 8007f0c:	ee08 0a10 	vmov	s16, r0
 8007f10:	9b05      	ldr	r3, [sp, #20]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	dd05      	ble.n	8007f22 <_dtoa_r+0x82a>
 8007f16:	4631      	mov	r1, r6
 8007f18:	461a      	mov	r2, r3
 8007f1a:	4620      	mov	r0, r4
 8007f1c:	f000 fcd8 	bl	80088d0 <__lshift>
 8007f20:	4606      	mov	r6, r0
 8007f22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d06e      	beq.n	8008006 <_dtoa_r+0x90e>
 8007f28:	ee18 0a10 	vmov	r0, s16
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	f000 fd3f 	bl	80089b0 <__mcmp>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	da67      	bge.n	8008006 <_dtoa_r+0x90e>
 8007f36:	9b00      	ldr	r3, [sp, #0]
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	ee18 1a10 	vmov	r1, s16
 8007f3e:	9300      	str	r3, [sp, #0]
 8007f40:	220a      	movs	r2, #10
 8007f42:	2300      	movs	r3, #0
 8007f44:	4620      	mov	r0, r4
 8007f46:	f000 fb13 	bl	8008570 <__multadd>
 8007f4a:	9b08      	ldr	r3, [sp, #32]
 8007f4c:	ee08 0a10 	vmov	s16, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	f000 81b1 	beq.w	80082b8 <_dtoa_r+0xbc0>
 8007f56:	2300      	movs	r3, #0
 8007f58:	4639      	mov	r1, r7
 8007f5a:	220a      	movs	r2, #10
 8007f5c:	4620      	mov	r0, r4
 8007f5e:	f000 fb07 	bl	8008570 <__multadd>
 8007f62:	9b02      	ldr	r3, [sp, #8]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	4607      	mov	r7, r0
 8007f68:	f300 808e 	bgt.w	8008088 <_dtoa_r+0x990>
 8007f6c:	9b06      	ldr	r3, [sp, #24]
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	dc51      	bgt.n	8008016 <_dtoa_r+0x91e>
 8007f72:	e089      	b.n	8008088 <_dtoa_r+0x990>
 8007f74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f7a:	e74b      	b.n	8007e14 <_dtoa_r+0x71c>
 8007f7c:	9b03      	ldr	r3, [sp, #12]
 8007f7e:	1e5e      	subs	r6, r3, #1
 8007f80:	9b07      	ldr	r3, [sp, #28]
 8007f82:	42b3      	cmp	r3, r6
 8007f84:	bfbf      	itttt	lt
 8007f86:	9b07      	ldrlt	r3, [sp, #28]
 8007f88:	9607      	strlt	r6, [sp, #28]
 8007f8a:	1af2      	sublt	r2, r6, r3
 8007f8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f8e:	bfb6      	itet	lt
 8007f90:	189b      	addlt	r3, r3, r2
 8007f92:	1b9e      	subge	r6, r3, r6
 8007f94:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f96:	9b03      	ldr	r3, [sp, #12]
 8007f98:	bfb8      	it	lt
 8007f9a:	2600      	movlt	r6, #0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	bfb7      	itett	lt
 8007fa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007fa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007fa8:	1a9d      	sublt	r5, r3, r2
 8007faa:	2300      	movlt	r3, #0
 8007fac:	e734      	b.n	8007e18 <_dtoa_r+0x720>
 8007fae:	9e07      	ldr	r6, [sp, #28]
 8007fb0:	9d04      	ldr	r5, [sp, #16]
 8007fb2:	9f08      	ldr	r7, [sp, #32]
 8007fb4:	e73b      	b.n	8007e2e <_dtoa_r+0x736>
 8007fb6:	9a07      	ldr	r2, [sp, #28]
 8007fb8:	e767      	b.n	8007e8a <_dtoa_r+0x792>
 8007fba:	9b06      	ldr	r3, [sp, #24]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	dc18      	bgt.n	8007ff2 <_dtoa_r+0x8fa>
 8007fc0:	f1ba 0f00 	cmp.w	sl, #0
 8007fc4:	d115      	bne.n	8007ff2 <_dtoa_r+0x8fa>
 8007fc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007fca:	b993      	cbnz	r3, 8007ff2 <_dtoa_r+0x8fa>
 8007fcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007fd0:	0d1b      	lsrs	r3, r3, #20
 8007fd2:	051b      	lsls	r3, r3, #20
 8007fd4:	b183      	cbz	r3, 8007ff8 <_dtoa_r+0x900>
 8007fd6:	9b04      	ldr	r3, [sp, #16]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	9304      	str	r3, [sp, #16]
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	3301      	adds	r3, #1
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	f04f 0801 	mov.w	r8, #1
 8007fe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f47f af6a 	bne.w	8007ec2 <_dtoa_r+0x7ca>
 8007fee:	2001      	movs	r0, #1
 8007ff0:	e76f      	b.n	8007ed2 <_dtoa_r+0x7da>
 8007ff2:	f04f 0800 	mov.w	r8, #0
 8007ff6:	e7f6      	b.n	8007fe6 <_dtoa_r+0x8ee>
 8007ff8:	4698      	mov	r8, r3
 8007ffa:	e7f4      	b.n	8007fe6 <_dtoa_r+0x8ee>
 8007ffc:	f43f af7d 	beq.w	8007efa <_dtoa_r+0x802>
 8008000:	4618      	mov	r0, r3
 8008002:	301c      	adds	r0, #28
 8008004:	e772      	b.n	8007eec <_dtoa_r+0x7f4>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	2b00      	cmp	r3, #0
 800800a:	dc37      	bgt.n	800807c <_dtoa_r+0x984>
 800800c:	9b06      	ldr	r3, [sp, #24]
 800800e:	2b02      	cmp	r3, #2
 8008010:	dd34      	ble.n	800807c <_dtoa_r+0x984>
 8008012:	9b03      	ldr	r3, [sp, #12]
 8008014:	9302      	str	r3, [sp, #8]
 8008016:	9b02      	ldr	r3, [sp, #8]
 8008018:	b96b      	cbnz	r3, 8008036 <_dtoa_r+0x93e>
 800801a:	4631      	mov	r1, r6
 800801c:	2205      	movs	r2, #5
 800801e:	4620      	mov	r0, r4
 8008020:	f000 faa6 	bl	8008570 <__multadd>
 8008024:	4601      	mov	r1, r0
 8008026:	4606      	mov	r6, r0
 8008028:	ee18 0a10 	vmov	r0, s16
 800802c:	f000 fcc0 	bl	80089b0 <__mcmp>
 8008030:	2800      	cmp	r0, #0
 8008032:	f73f adbb 	bgt.w	8007bac <_dtoa_r+0x4b4>
 8008036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008038:	9d01      	ldr	r5, [sp, #4]
 800803a:	43db      	mvns	r3, r3
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	f04f 0800 	mov.w	r8, #0
 8008042:	4631      	mov	r1, r6
 8008044:	4620      	mov	r0, r4
 8008046:	f000 fa71 	bl	800852c <_Bfree>
 800804a:	2f00      	cmp	r7, #0
 800804c:	f43f aea4 	beq.w	8007d98 <_dtoa_r+0x6a0>
 8008050:	f1b8 0f00 	cmp.w	r8, #0
 8008054:	d005      	beq.n	8008062 <_dtoa_r+0x96a>
 8008056:	45b8      	cmp	r8, r7
 8008058:	d003      	beq.n	8008062 <_dtoa_r+0x96a>
 800805a:	4641      	mov	r1, r8
 800805c:	4620      	mov	r0, r4
 800805e:	f000 fa65 	bl	800852c <_Bfree>
 8008062:	4639      	mov	r1, r7
 8008064:	4620      	mov	r0, r4
 8008066:	f000 fa61 	bl	800852c <_Bfree>
 800806a:	e695      	b.n	8007d98 <_dtoa_r+0x6a0>
 800806c:	2600      	movs	r6, #0
 800806e:	4637      	mov	r7, r6
 8008070:	e7e1      	b.n	8008036 <_dtoa_r+0x93e>
 8008072:	9700      	str	r7, [sp, #0]
 8008074:	4637      	mov	r7, r6
 8008076:	e599      	b.n	8007bac <_dtoa_r+0x4b4>
 8008078:	40240000 	.word	0x40240000
 800807c:	9b08      	ldr	r3, [sp, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80ca 	beq.w	8008218 <_dtoa_r+0xb20>
 8008084:	9b03      	ldr	r3, [sp, #12]
 8008086:	9302      	str	r3, [sp, #8]
 8008088:	2d00      	cmp	r5, #0
 800808a:	dd05      	ble.n	8008098 <_dtoa_r+0x9a0>
 800808c:	4639      	mov	r1, r7
 800808e:	462a      	mov	r2, r5
 8008090:	4620      	mov	r0, r4
 8008092:	f000 fc1d 	bl	80088d0 <__lshift>
 8008096:	4607      	mov	r7, r0
 8008098:	f1b8 0f00 	cmp.w	r8, #0
 800809c:	d05b      	beq.n	8008156 <_dtoa_r+0xa5e>
 800809e:	6879      	ldr	r1, [r7, #4]
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fa03 	bl	80084ac <_Balloc>
 80080a6:	4605      	mov	r5, r0
 80080a8:	b928      	cbnz	r0, 80080b6 <_dtoa_r+0x9be>
 80080aa:	4b87      	ldr	r3, [pc, #540]	; (80082c8 <_dtoa_r+0xbd0>)
 80080ac:	4602      	mov	r2, r0
 80080ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80080b2:	f7ff bb3b 	b.w	800772c <_dtoa_r+0x34>
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	3202      	adds	r2, #2
 80080ba:	0092      	lsls	r2, r2, #2
 80080bc:	f107 010c 	add.w	r1, r7, #12
 80080c0:	300c      	adds	r0, #12
 80080c2:	f7fe fc76 	bl	80069b2 <memcpy>
 80080c6:	2201      	movs	r2, #1
 80080c8:	4629      	mov	r1, r5
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fc00 	bl	80088d0 <__lshift>
 80080d0:	9b01      	ldr	r3, [sp, #4]
 80080d2:	f103 0901 	add.w	r9, r3, #1
 80080d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80080da:	4413      	add	r3, r2
 80080dc:	9305      	str	r3, [sp, #20]
 80080de:	f00a 0301 	and.w	r3, sl, #1
 80080e2:	46b8      	mov	r8, r7
 80080e4:	9304      	str	r3, [sp, #16]
 80080e6:	4607      	mov	r7, r0
 80080e8:	4631      	mov	r1, r6
 80080ea:	ee18 0a10 	vmov	r0, s16
 80080ee:	f7ff fa75 	bl	80075dc <quorem>
 80080f2:	4641      	mov	r1, r8
 80080f4:	9002      	str	r0, [sp, #8]
 80080f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80080fa:	ee18 0a10 	vmov	r0, s16
 80080fe:	f000 fc57 	bl	80089b0 <__mcmp>
 8008102:	463a      	mov	r2, r7
 8008104:	9003      	str	r0, [sp, #12]
 8008106:	4631      	mov	r1, r6
 8008108:	4620      	mov	r0, r4
 800810a:	f000 fc6d 	bl	80089e8 <__mdiff>
 800810e:	68c2      	ldr	r2, [r0, #12]
 8008110:	f109 3bff 	add.w	fp, r9, #4294967295
 8008114:	4605      	mov	r5, r0
 8008116:	bb02      	cbnz	r2, 800815a <_dtoa_r+0xa62>
 8008118:	4601      	mov	r1, r0
 800811a:	ee18 0a10 	vmov	r0, s16
 800811e:	f000 fc47 	bl	80089b0 <__mcmp>
 8008122:	4602      	mov	r2, r0
 8008124:	4629      	mov	r1, r5
 8008126:	4620      	mov	r0, r4
 8008128:	9207      	str	r2, [sp, #28]
 800812a:	f000 f9ff 	bl	800852c <_Bfree>
 800812e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008132:	ea43 0102 	orr.w	r1, r3, r2
 8008136:	9b04      	ldr	r3, [sp, #16]
 8008138:	430b      	orrs	r3, r1
 800813a:	464d      	mov	r5, r9
 800813c:	d10f      	bne.n	800815e <_dtoa_r+0xa66>
 800813e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008142:	d02a      	beq.n	800819a <_dtoa_r+0xaa2>
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd02      	ble.n	8008150 <_dtoa_r+0xa58>
 800814a:	9b02      	ldr	r3, [sp, #8]
 800814c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008150:	f88b a000 	strb.w	sl, [fp]
 8008154:	e775      	b.n	8008042 <_dtoa_r+0x94a>
 8008156:	4638      	mov	r0, r7
 8008158:	e7ba      	b.n	80080d0 <_dtoa_r+0x9d8>
 800815a:	2201      	movs	r2, #1
 800815c:	e7e2      	b.n	8008124 <_dtoa_r+0xa2c>
 800815e:	9b03      	ldr	r3, [sp, #12]
 8008160:	2b00      	cmp	r3, #0
 8008162:	db04      	blt.n	800816e <_dtoa_r+0xa76>
 8008164:	9906      	ldr	r1, [sp, #24]
 8008166:	430b      	orrs	r3, r1
 8008168:	9904      	ldr	r1, [sp, #16]
 800816a:	430b      	orrs	r3, r1
 800816c:	d122      	bne.n	80081b4 <_dtoa_r+0xabc>
 800816e:	2a00      	cmp	r2, #0
 8008170:	ddee      	ble.n	8008150 <_dtoa_r+0xa58>
 8008172:	ee18 1a10 	vmov	r1, s16
 8008176:	2201      	movs	r2, #1
 8008178:	4620      	mov	r0, r4
 800817a:	f000 fba9 	bl	80088d0 <__lshift>
 800817e:	4631      	mov	r1, r6
 8008180:	ee08 0a10 	vmov	s16, r0
 8008184:	f000 fc14 	bl	80089b0 <__mcmp>
 8008188:	2800      	cmp	r0, #0
 800818a:	dc03      	bgt.n	8008194 <_dtoa_r+0xa9c>
 800818c:	d1e0      	bne.n	8008150 <_dtoa_r+0xa58>
 800818e:	f01a 0f01 	tst.w	sl, #1
 8008192:	d0dd      	beq.n	8008150 <_dtoa_r+0xa58>
 8008194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008198:	d1d7      	bne.n	800814a <_dtoa_r+0xa52>
 800819a:	2339      	movs	r3, #57	; 0x39
 800819c:	f88b 3000 	strb.w	r3, [fp]
 80081a0:	462b      	mov	r3, r5
 80081a2:	461d      	mov	r5, r3
 80081a4:	3b01      	subs	r3, #1
 80081a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80081aa:	2a39      	cmp	r2, #57	; 0x39
 80081ac:	d071      	beq.n	8008292 <_dtoa_r+0xb9a>
 80081ae:	3201      	adds	r2, #1
 80081b0:	701a      	strb	r2, [r3, #0]
 80081b2:	e746      	b.n	8008042 <_dtoa_r+0x94a>
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	dd07      	ble.n	80081c8 <_dtoa_r+0xad0>
 80081b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80081bc:	d0ed      	beq.n	800819a <_dtoa_r+0xaa2>
 80081be:	f10a 0301 	add.w	r3, sl, #1
 80081c2:	f88b 3000 	strb.w	r3, [fp]
 80081c6:	e73c      	b.n	8008042 <_dtoa_r+0x94a>
 80081c8:	9b05      	ldr	r3, [sp, #20]
 80081ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80081ce:	4599      	cmp	r9, r3
 80081d0:	d047      	beq.n	8008262 <_dtoa_r+0xb6a>
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	2300      	movs	r3, #0
 80081d8:	220a      	movs	r2, #10
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 f9c8 	bl	8008570 <__multadd>
 80081e0:	45b8      	cmp	r8, r7
 80081e2:	ee08 0a10 	vmov	s16, r0
 80081e6:	f04f 0300 	mov.w	r3, #0
 80081ea:	f04f 020a 	mov.w	r2, #10
 80081ee:	4641      	mov	r1, r8
 80081f0:	4620      	mov	r0, r4
 80081f2:	d106      	bne.n	8008202 <_dtoa_r+0xb0a>
 80081f4:	f000 f9bc 	bl	8008570 <__multadd>
 80081f8:	4680      	mov	r8, r0
 80081fa:	4607      	mov	r7, r0
 80081fc:	f109 0901 	add.w	r9, r9, #1
 8008200:	e772      	b.n	80080e8 <_dtoa_r+0x9f0>
 8008202:	f000 f9b5 	bl	8008570 <__multadd>
 8008206:	4639      	mov	r1, r7
 8008208:	4680      	mov	r8, r0
 800820a:	2300      	movs	r3, #0
 800820c:	220a      	movs	r2, #10
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f9ae 	bl	8008570 <__multadd>
 8008214:	4607      	mov	r7, r0
 8008216:	e7f1      	b.n	80081fc <_dtoa_r+0xb04>
 8008218:	9b03      	ldr	r3, [sp, #12]
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	9d01      	ldr	r5, [sp, #4]
 800821e:	ee18 0a10 	vmov	r0, s16
 8008222:	4631      	mov	r1, r6
 8008224:	f7ff f9da 	bl	80075dc <quorem>
 8008228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800822c:	9b01      	ldr	r3, [sp, #4]
 800822e:	f805 ab01 	strb.w	sl, [r5], #1
 8008232:	1aea      	subs	r2, r5, r3
 8008234:	9b02      	ldr	r3, [sp, #8]
 8008236:	4293      	cmp	r3, r2
 8008238:	dd09      	ble.n	800824e <_dtoa_r+0xb56>
 800823a:	ee18 1a10 	vmov	r1, s16
 800823e:	2300      	movs	r3, #0
 8008240:	220a      	movs	r2, #10
 8008242:	4620      	mov	r0, r4
 8008244:	f000 f994 	bl	8008570 <__multadd>
 8008248:	ee08 0a10 	vmov	s16, r0
 800824c:	e7e7      	b.n	800821e <_dtoa_r+0xb26>
 800824e:	9b02      	ldr	r3, [sp, #8]
 8008250:	2b00      	cmp	r3, #0
 8008252:	bfc8      	it	gt
 8008254:	461d      	movgt	r5, r3
 8008256:	9b01      	ldr	r3, [sp, #4]
 8008258:	bfd8      	it	le
 800825a:	2501      	movle	r5, #1
 800825c:	441d      	add	r5, r3
 800825e:	f04f 0800 	mov.w	r8, #0
 8008262:	ee18 1a10 	vmov	r1, s16
 8008266:	2201      	movs	r2, #1
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fb31 	bl	80088d0 <__lshift>
 800826e:	4631      	mov	r1, r6
 8008270:	ee08 0a10 	vmov	s16, r0
 8008274:	f000 fb9c 	bl	80089b0 <__mcmp>
 8008278:	2800      	cmp	r0, #0
 800827a:	dc91      	bgt.n	80081a0 <_dtoa_r+0xaa8>
 800827c:	d102      	bne.n	8008284 <_dtoa_r+0xb8c>
 800827e:	f01a 0f01 	tst.w	sl, #1
 8008282:	d18d      	bne.n	80081a0 <_dtoa_r+0xaa8>
 8008284:	462b      	mov	r3, r5
 8008286:	461d      	mov	r5, r3
 8008288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800828c:	2a30      	cmp	r2, #48	; 0x30
 800828e:	d0fa      	beq.n	8008286 <_dtoa_r+0xb8e>
 8008290:	e6d7      	b.n	8008042 <_dtoa_r+0x94a>
 8008292:	9a01      	ldr	r2, [sp, #4]
 8008294:	429a      	cmp	r2, r3
 8008296:	d184      	bne.n	80081a2 <_dtoa_r+0xaaa>
 8008298:	9b00      	ldr	r3, [sp, #0]
 800829a:	3301      	adds	r3, #1
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	2331      	movs	r3, #49	; 0x31
 80082a0:	7013      	strb	r3, [r2, #0]
 80082a2:	e6ce      	b.n	8008042 <_dtoa_r+0x94a>
 80082a4:	4b09      	ldr	r3, [pc, #36]	; (80082cc <_dtoa_r+0xbd4>)
 80082a6:	f7ff ba95 	b.w	80077d4 <_dtoa_r+0xdc>
 80082aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f47f aa6e 	bne.w	800778e <_dtoa_r+0x96>
 80082b2:	4b07      	ldr	r3, [pc, #28]	; (80082d0 <_dtoa_r+0xbd8>)
 80082b4:	f7ff ba8e 	b.w	80077d4 <_dtoa_r+0xdc>
 80082b8:	9b02      	ldr	r3, [sp, #8]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dcae      	bgt.n	800821c <_dtoa_r+0xb24>
 80082be:	9b06      	ldr	r3, [sp, #24]
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	f73f aea8 	bgt.w	8008016 <_dtoa_r+0x91e>
 80082c6:	e7a9      	b.n	800821c <_dtoa_r+0xb24>
 80082c8:	08009827 	.word	0x08009827
 80082cc:	08009784 	.word	0x08009784
 80082d0:	080097a8 	.word	0x080097a8

080082d4 <__sflush_r>:
 80082d4:	898a      	ldrh	r2, [r1, #12]
 80082d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082da:	4605      	mov	r5, r0
 80082dc:	0710      	lsls	r0, r2, #28
 80082de:	460c      	mov	r4, r1
 80082e0:	d458      	bmi.n	8008394 <__sflush_r+0xc0>
 80082e2:	684b      	ldr	r3, [r1, #4]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dc05      	bgt.n	80082f4 <__sflush_r+0x20>
 80082e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	dc02      	bgt.n	80082f4 <__sflush_r+0x20>
 80082ee:	2000      	movs	r0, #0
 80082f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d0f9      	beq.n	80082ee <__sflush_r+0x1a>
 80082fa:	2300      	movs	r3, #0
 80082fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008300:	682f      	ldr	r7, [r5, #0]
 8008302:	602b      	str	r3, [r5, #0]
 8008304:	d032      	beq.n	800836c <__sflush_r+0x98>
 8008306:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	075a      	lsls	r2, r3, #29
 800830c:	d505      	bpl.n	800831a <__sflush_r+0x46>
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	1ac0      	subs	r0, r0, r3
 8008312:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008314:	b10b      	cbz	r3, 800831a <__sflush_r+0x46>
 8008316:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008318:	1ac0      	subs	r0, r0, r3
 800831a:	2300      	movs	r3, #0
 800831c:	4602      	mov	r2, r0
 800831e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008320:	6a21      	ldr	r1, [r4, #32]
 8008322:	4628      	mov	r0, r5
 8008324:	47b0      	blx	r6
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	d106      	bne.n	800833a <__sflush_r+0x66>
 800832c:	6829      	ldr	r1, [r5, #0]
 800832e:	291d      	cmp	r1, #29
 8008330:	d82c      	bhi.n	800838c <__sflush_r+0xb8>
 8008332:	4a2a      	ldr	r2, [pc, #168]	; (80083dc <__sflush_r+0x108>)
 8008334:	40ca      	lsrs	r2, r1
 8008336:	07d6      	lsls	r6, r2, #31
 8008338:	d528      	bpl.n	800838c <__sflush_r+0xb8>
 800833a:	2200      	movs	r2, #0
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	04d9      	lsls	r1, r3, #19
 8008340:	6922      	ldr	r2, [r4, #16]
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	d504      	bpl.n	8008350 <__sflush_r+0x7c>
 8008346:	1c42      	adds	r2, r0, #1
 8008348:	d101      	bne.n	800834e <__sflush_r+0x7a>
 800834a:	682b      	ldr	r3, [r5, #0]
 800834c:	b903      	cbnz	r3, 8008350 <__sflush_r+0x7c>
 800834e:	6560      	str	r0, [r4, #84]	; 0x54
 8008350:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008352:	602f      	str	r7, [r5, #0]
 8008354:	2900      	cmp	r1, #0
 8008356:	d0ca      	beq.n	80082ee <__sflush_r+0x1a>
 8008358:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800835c:	4299      	cmp	r1, r3
 800835e:	d002      	beq.n	8008366 <__sflush_r+0x92>
 8008360:	4628      	mov	r0, r5
 8008362:	f000 fc3d 	bl	8008be0 <_free_r>
 8008366:	2000      	movs	r0, #0
 8008368:	6360      	str	r0, [r4, #52]	; 0x34
 800836a:	e7c1      	b.n	80082f0 <__sflush_r+0x1c>
 800836c:	6a21      	ldr	r1, [r4, #32]
 800836e:	2301      	movs	r3, #1
 8008370:	4628      	mov	r0, r5
 8008372:	47b0      	blx	r6
 8008374:	1c41      	adds	r1, r0, #1
 8008376:	d1c7      	bne.n	8008308 <__sflush_r+0x34>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0c4      	beq.n	8008308 <__sflush_r+0x34>
 800837e:	2b1d      	cmp	r3, #29
 8008380:	d001      	beq.n	8008386 <__sflush_r+0xb2>
 8008382:	2b16      	cmp	r3, #22
 8008384:	d101      	bne.n	800838a <__sflush_r+0xb6>
 8008386:	602f      	str	r7, [r5, #0]
 8008388:	e7b1      	b.n	80082ee <__sflush_r+0x1a>
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008390:	81a3      	strh	r3, [r4, #12]
 8008392:	e7ad      	b.n	80082f0 <__sflush_r+0x1c>
 8008394:	690f      	ldr	r7, [r1, #16]
 8008396:	2f00      	cmp	r7, #0
 8008398:	d0a9      	beq.n	80082ee <__sflush_r+0x1a>
 800839a:	0793      	lsls	r3, r2, #30
 800839c:	680e      	ldr	r6, [r1, #0]
 800839e:	bf08      	it	eq
 80083a0:	694b      	ldreq	r3, [r1, #20]
 80083a2:	600f      	str	r7, [r1, #0]
 80083a4:	bf18      	it	ne
 80083a6:	2300      	movne	r3, #0
 80083a8:	eba6 0807 	sub.w	r8, r6, r7
 80083ac:	608b      	str	r3, [r1, #8]
 80083ae:	f1b8 0f00 	cmp.w	r8, #0
 80083b2:	dd9c      	ble.n	80082ee <__sflush_r+0x1a>
 80083b4:	6a21      	ldr	r1, [r4, #32]
 80083b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083b8:	4643      	mov	r3, r8
 80083ba:	463a      	mov	r2, r7
 80083bc:	4628      	mov	r0, r5
 80083be:	47b0      	blx	r6
 80083c0:	2800      	cmp	r0, #0
 80083c2:	dc06      	bgt.n	80083d2 <__sflush_r+0xfe>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	f04f 30ff 	mov.w	r0, #4294967295
 80083d0:	e78e      	b.n	80082f0 <__sflush_r+0x1c>
 80083d2:	4407      	add	r7, r0
 80083d4:	eba8 0800 	sub.w	r8, r8, r0
 80083d8:	e7e9      	b.n	80083ae <__sflush_r+0xda>
 80083da:	bf00      	nop
 80083dc:	20400001 	.word	0x20400001

080083e0 <_fflush_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	690b      	ldr	r3, [r1, #16]
 80083e4:	4605      	mov	r5, r0
 80083e6:	460c      	mov	r4, r1
 80083e8:	b913      	cbnz	r3, 80083f0 <_fflush_r+0x10>
 80083ea:	2500      	movs	r5, #0
 80083ec:	4628      	mov	r0, r5
 80083ee:	bd38      	pop	{r3, r4, r5, pc}
 80083f0:	b118      	cbz	r0, 80083fa <_fflush_r+0x1a>
 80083f2:	6983      	ldr	r3, [r0, #24]
 80083f4:	b90b      	cbnz	r3, 80083fa <_fflush_r+0x1a>
 80083f6:	f7fe fa17 	bl	8006828 <__sinit>
 80083fa:	4b14      	ldr	r3, [pc, #80]	; (800844c <_fflush_r+0x6c>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d11b      	bne.n	8008438 <_fflush_r+0x58>
 8008400:	686c      	ldr	r4, [r5, #4]
 8008402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d0ef      	beq.n	80083ea <_fflush_r+0xa>
 800840a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800840c:	07d0      	lsls	r0, r2, #31
 800840e:	d404      	bmi.n	800841a <_fflush_r+0x3a>
 8008410:	0599      	lsls	r1, r3, #22
 8008412:	d402      	bmi.n	800841a <_fflush_r+0x3a>
 8008414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008416:	f7fe faca 	bl	80069ae <__retarget_lock_acquire_recursive>
 800841a:	4628      	mov	r0, r5
 800841c:	4621      	mov	r1, r4
 800841e:	f7ff ff59 	bl	80082d4 <__sflush_r>
 8008422:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008424:	07da      	lsls	r2, r3, #31
 8008426:	4605      	mov	r5, r0
 8008428:	d4e0      	bmi.n	80083ec <_fflush_r+0xc>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	059b      	lsls	r3, r3, #22
 800842e:	d4dd      	bmi.n	80083ec <_fflush_r+0xc>
 8008430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008432:	f7fe fabd 	bl	80069b0 <__retarget_lock_release_recursive>
 8008436:	e7d9      	b.n	80083ec <_fflush_r+0xc>
 8008438:	4b05      	ldr	r3, [pc, #20]	; (8008450 <_fflush_r+0x70>)
 800843a:	429c      	cmp	r4, r3
 800843c:	d101      	bne.n	8008442 <_fflush_r+0x62>
 800843e:	68ac      	ldr	r4, [r5, #8]
 8008440:	e7df      	b.n	8008402 <_fflush_r+0x22>
 8008442:	4b04      	ldr	r3, [pc, #16]	; (8008454 <_fflush_r+0x74>)
 8008444:	429c      	cmp	r4, r3
 8008446:	bf08      	it	eq
 8008448:	68ec      	ldreq	r4, [r5, #12]
 800844a:	e7da      	b.n	8008402 <_fflush_r+0x22>
 800844c:	08009730 	.word	0x08009730
 8008450:	08009750 	.word	0x08009750
 8008454:	08009710 	.word	0x08009710

08008458 <_localeconv_r>:
 8008458:	4800      	ldr	r0, [pc, #0]	; (800845c <_localeconv_r+0x4>)
 800845a:	4770      	bx	lr
 800845c:	20000164 	.word	0x20000164

08008460 <_lseek_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	4d07      	ldr	r5, [pc, #28]	; (8008480 <_lseek_r+0x20>)
 8008464:	4604      	mov	r4, r0
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	2200      	movs	r2, #0
 800846c:	602a      	str	r2, [r5, #0]
 800846e:	461a      	mov	r2, r3
 8008470:	f7f9 fb78 	bl	8001b64 <_lseek>
 8008474:	1c43      	adds	r3, r0, #1
 8008476:	d102      	bne.n	800847e <_lseek_r+0x1e>
 8008478:	682b      	ldr	r3, [r5, #0]
 800847a:	b103      	cbz	r3, 800847e <_lseek_r+0x1e>
 800847c:	6023      	str	r3, [r4, #0]
 800847e:	bd38      	pop	{r3, r4, r5, pc}
 8008480:	20004468 	.word	0x20004468

08008484 <malloc>:
 8008484:	4b02      	ldr	r3, [pc, #8]	; (8008490 <malloc+0xc>)
 8008486:	4601      	mov	r1, r0
 8008488:	6818      	ldr	r0, [r3, #0]
 800848a:	f7fe bac9 	b.w	8006a20 <_malloc_r>
 800848e:	bf00      	nop
 8008490:	20000010 	.word	0x20000010

08008494 <__malloc_lock>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__malloc_lock+0x8>)
 8008496:	f7fe ba8a 	b.w	80069ae <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	2000445c 	.word	0x2000445c

080084a0 <__malloc_unlock>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__malloc_unlock+0x8>)
 80084a2:	f7fe ba85 	b.w	80069b0 <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	2000445c 	.word	0x2000445c

080084ac <_Balloc>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084b0:	4604      	mov	r4, r0
 80084b2:	460d      	mov	r5, r1
 80084b4:	b976      	cbnz	r6, 80084d4 <_Balloc+0x28>
 80084b6:	2010      	movs	r0, #16
 80084b8:	f7ff ffe4 	bl	8008484 <malloc>
 80084bc:	4602      	mov	r2, r0
 80084be:	6260      	str	r0, [r4, #36]	; 0x24
 80084c0:	b920      	cbnz	r0, 80084cc <_Balloc+0x20>
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <_Balloc+0x78>)
 80084c4:	4818      	ldr	r0, [pc, #96]	; (8008528 <_Balloc+0x7c>)
 80084c6:	2166      	movs	r1, #102	; 0x66
 80084c8:	f000 fd44 	bl	8008f54 <__assert_func>
 80084cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084d0:	6006      	str	r6, [r0, #0]
 80084d2:	60c6      	str	r6, [r0, #12]
 80084d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084d6:	68f3      	ldr	r3, [r6, #12]
 80084d8:	b183      	cbz	r3, 80084fc <_Balloc+0x50>
 80084da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084dc:	68db      	ldr	r3, [r3, #12]
 80084de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084e2:	b9b8      	cbnz	r0, 8008514 <_Balloc+0x68>
 80084e4:	2101      	movs	r1, #1
 80084e6:	fa01 f605 	lsl.w	r6, r1, r5
 80084ea:	1d72      	adds	r2, r6, #5
 80084ec:	0092      	lsls	r2, r2, #2
 80084ee:	4620      	mov	r0, r4
 80084f0:	f000 fb60 	bl	8008bb4 <_calloc_r>
 80084f4:	b160      	cbz	r0, 8008510 <_Balloc+0x64>
 80084f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084fa:	e00e      	b.n	800851a <_Balloc+0x6e>
 80084fc:	2221      	movs	r2, #33	; 0x21
 80084fe:	2104      	movs	r1, #4
 8008500:	4620      	mov	r0, r4
 8008502:	f000 fb57 	bl	8008bb4 <_calloc_r>
 8008506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008508:	60f0      	str	r0, [r6, #12]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1e4      	bne.n	80084da <_Balloc+0x2e>
 8008510:	2000      	movs	r0, #0
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	6802      	ldr	r2, [r0, #0]
 8008516:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800851a:	2300      	movs	r3, #0
 800851c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008520:	e7f7      	b.n	8008512 <_Balloc+0x66>
 8008522:	bf00      	nop
 8008524:	080097b5 	.word	0x080097b5
 8008528:	08009838 	.word	0x08009838

0800852c <_Bfree>:
 800852c:	b570      	push	{r4, r5, r6, lr}
 800852e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008530:	4605      	mov	r5, r0
 8008532:	460c      	mov	r4, r1
 8008534:	b976      	cbnz	r6, 8008554 <_Bfree+0x28>
 8008536:	2010      	movs	r0, #16
 8008538:	f7ff ffa4 	bl	8008484 <malloc>
 800853c:	4602      	mov	r2, r0
 800853e:	6268      	str	r0, [r5, #36]	; 0x24
 8008540:	b920      	cbnz	r0, 800854c <_Bfree+0x20>
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <_Bfree+0x3c>)
 8008544:	4809      	ldr	r0, [pc, #36]	; (800856c <_Bfree+0x40>)
 8008546:	218a      	movs	r1, #138	; 0x8a
 8008548:	f000 fd04 	bl	8008f54 <__assert_func>
 800854c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008550:	6006      	str	r6, [r0, #0]
 8008552:	60c6      	str	r6, [r0, #12]
 8008554:	b13c      	cbz	r4, 8008566 <_Bfree+0x3a>
 8008556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008558:	6862      	ldr	r2, [r4, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008560:	6021      	str	r1, [r4, #0]
 8008562:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008566:	bd70      	pop	{r4, r5, r6, pc}
 8008568:	080097b5 	.word	0x080097b5
 800856c:	08009838 	.word	0x08009838

08008570 <__multadd>:
 8008570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008574:	690d      	ldr	r5, [r1, #16]
 8008576:	4607      	mov	r7, r0
 8008578:	460c      	mov	r4, r1
 800857a:	461e      	mov	r6, r3
 800857c:	f101 0c14 	add.w	ip, r1, #20
 8008580:	2000      	movs	r0, #0
 8008582:	f8dc 3000 	ldr.w	r3, [ip]
 8008586:	b299      	uxth	r1, r3
 8008588:	fb02 6101 	mla	r1, r2, r1, r6
 800858c:	0c1e      	lsrs	r6, r3, #16
 800858e:	0c0b      	lsrs	r3, r1, #16
 8008590:	fb02 3306 	mla	r3, r2, r6, r3
 8008594:	b289      	uxth	r1, r1
 8008596:	3001      	adds	r0, #1
 8008598:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800859c:	4285      	cmp	r5, r0
 800859e:	f84c 1b04 	str.w	r1, [ip], #4
 80085a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80085a6:	dcec      	bgt.n	8008582 <__multadd+0x12>
 80085a8:	b30e      	cbz	r6, 80085ee <__multadd+0x7e>
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	42ab      	cmp	r3, r5
 80085ae:	dc19      	bgt.n	80085e4 <__multadd+0x74>
 80085b0:	6861      	ldr	r1, [r4, #4]
 80085b2:	4638      	mov	r0, r7
 80085b4:	3101      	adds	r1, #1
 80085b6:	f7ff ff79 	bl	80084ac <_Balloc>
 80085ba:	4680      	mov	r8, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__multadd+0x5a>
 80085be:	4602      	mov	r2, r0
 80085c0:	4b0c      	ldr	r3, [pc, #48]	; (80085f4 <__multadd+0x84>)
 80085c2:	480d      	ldr	r0, [pc, #52]	; (80085f8 <__multadd+0x88>)
 80085c4:	21b5      	movs	r1, #181	; 0xb5
 80085c6:	f000 fcc5 	bl	8008f54 <__assert_func>
 80085ca:	6922      	ldr	r2, [r4, #16]
 80085cc:	3202      	adds	r2, #2
 80085ce:	f104 010c 	add.w	r1, r4, #12
 80085d2:	0092      	lsls	r2, r2, #2
 80085d4:	300c      	adds	r0, #12
 80085d6:	f7fe f9ec 	bl	80069b2 <memcpy>
 80085da:	4621      	mov	r1, r4
 80085dc:	4638      	mov	r0, r7
 80085de:	f7ff ffa5 	bl	800852c <_Bfree>
 80085e2:	4644      	mov	r4, r8
 80085e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085e8:	3501      	adds	r5, #1
 80085ea:	615e      	str	r6, [r3, #20]
 80085ec:	6125      	str	r5, [r4, #16]
 80085ee:	4620      	mov	r0, r4
 80085f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085f4:	08009827 	.word	0x08009827
 80085f8:	08009838 	.word	0x08009838

080085fc <__hi0bits>:
 80085fc:	0c03      	lsrs	r3, r0, #16
 80085fe:	041b      	lsls	r3, r3, #16
 8008600:	b9d3      	cbnz	r3, 8008638 <__hi0bits+0x3c>
 8008602:	0400      	lsls	r0, r0, #16
 8008604:	2310      	movs	r3, #16
 8008606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800860a:	bf04      	itt	eq
 800860c:	0200      	lsleq	r0, r0, #8
 800860e:	3308      	addeq	r3, #8
 8008610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008614:	bf04      	itt	eq
 8008616:	0100      	lsleq	r0, r0, #4
 8008618:	3304      	addeq	r3, #4
 800861a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800861e:	bf04      	itt	eq
 8008620:	0080      	lsleq	r0, r0, #2
 8008622:	3302      	addeq	r3, #2
 8008624:	2800      	cmp	r0, #0
 8008626:	db05      	blt.n	8008634 <__hi0bits+0x38>
 8008628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800862c:	f103 0301 	add.w	r3, r3, #1
 8008630:	bf08      	it	eq
 8008632:	2320      	moveq	r3, #32
 8008634:	4618      	mov	r0, r3
 8008636:	4770      	bx	lr
 8008638:	2300      	movs	r3, #0
 800863a:	e7e4      	b.n	8008606 <__hi0bits+0xa>

0800863c <__lo0bits>:
 800863c:	6803      	ldr	r3, [r0, #0]
 800863e:	f013 0207 	ands.w	r2, r3, #7
 8008642:	4601      	mov	r1, r0
 8008644:	d00b      	beq.n	800865e <__lo0bits+0x22>
 8008646:	07da      	lsls	r2, r3, #31
 8008648:	d423      	bmi.n	8008692 <__lo0bits+0x56>
 800864a:	0798      	lsls	r0, r3, #30
 800864c:	bf49      	itett	mi
 800864e:	085b      	lsrmi	r3, r3, #1
 8008650:	089b      	lsrpl	r3, r3, #2
 8008652:	2001      	movmi	r0, #1
 8008654:	600b      	strmi	r3, [r1, #0]
 8008656:	bf5c      	itt	pl
 8008658:	600b      	strpl	r3, [r1, #0]
 800865a:	2002      	movpl	r0, #2
 800865c:	4770      	bx	lr
 800865e:	b298      	uxth	r0, r3
 8008660:	b9a8      	cbnz	r0, 800868e <__lo0bits+0x52>
 8008662:	0c1b      	lsrs	r3, r3, #16
 8008664:	2010      	movs	r0, #16
 8008666:	b2da      	uxtb	r2, r3
 8008668:	b90a      	cbnz	r2, 800866e <__lo0bits+0x32>
 800866a:	3008      	adds	r0, #8
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	071a      	lsls	r2, r3, #28
 8008670:	bf04      	itt	eq
 8008672:	091b      	lsreq	r3, r3, #4
 8008674:	3004      	addeq	r0, #4
 8008676:	079a      	lsls	r2, r3, #30
 8008678:	bf04      	itt	eq
 800867a:	089b      	lsreq	r3, r3, #2
 800867c:	3002      	addeq	r0, #2
 800867e:	07da      	lsls	r2, r3, #31
 8008680:	d403      	bmi.n	800868a <__lo0bits+0x4e>
 8008682:	085b      	lsrs	r3, r3, #1
 8008684:	f100 0001 	add.w	r0, r0, #1
 8008688:	d005      	beq.n	8008696 <__lo0bits+0x5a>
 800868a:	600b      	str	r3, [r1, #0]
 800868c:	4770      	bx	lr
 800868e:	4610      	mov	r0, r2
 8008690:	e7e9      	b.n	8008666 <__lo0bits+0x2a>
 8008692:	2000      	movs	r0, #0
 8008694:	4770      	bx	lr
 8008696:	2020      	movs	r0, #32
 8008698:	4770      	bx	lr
	...

0800869c <__i2b>:
 800869c:	b510      	push	{r4, lr}
 800869e:	460c      	mov	r4, r1
 80086a0:	2101      	movs	r1, #1
 80086a2:	f7ff ff03 	bl	80084ac <_Balloc>
 80086a6:	4602      	mov	r2, r0
 80086a8:	b928      	cbnz	r0, 80086b6 <__i2b+0x1a>
 80086aa:	4b05      	ldr	r3, [pc, #20]	; (80086c0 <__i2b+0x24>)
 80086ac:	4805      	ldr	r0, [pc, #20]	; (80086c4 <__i2b+0x28>)
 80086ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80086b2:	f000 fc4f 	bl	8008f54 <__assert_func>
 80086b6:	2301      	movs	r3, #1
 80086b8:	6144      	str	r4, [r0, #20]
 80086ba:	6103      	str	r3, [r0, #16]
 80086bc:	bd10      	pop	{r4, pc}
 80086be:	bf00      	nop
 80086c0:	08009827 	.word	0x08009827
 80086c4:	08009838 	.word	0x08009838

080086c8 <__multiply>:
 80086c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086cc:	4691      	mov	r9, r2
 80086ce:	690a      	ldr	r2, [r1, #16]
 80086d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	bfb8      	it	lt
 80086d8:	460b      	movlt	r3, r1
 80086da:	460c      	mov	r4, r1
 80086dc:	bfbc      	itt	lt
 80086de:	464c      	movlt	r4, r9
 80086e0:	4699      	movlt	r9, r3
 80086e2:	6927      	ldr	r7, [r4, #16]
 80086e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086e8:	68a3      	ldr	r3, [r4, #8]
 80086ea:	6861      	ldr	r1, [r4, #4]
 80086ec:	eb07 060a 	add.w	r6, r7, sl
 80086f0:	42b3      	cmp	r3, r6
 80086f2:	b085      	sub	sp, #20
 80086f4:	bfb8      	it	lt
 80086f6:	3101      	addlt	r1, #1
 80086f8:	f7ff fed8 	bl	80084ac <_Balloc>
 80086fc:	b930      	cbnz	r0, 800870c <__multiply+0x44>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b44      	ldr	r3, [pc, #272]	; (8008814 <__multiply+0x14c>)
 8008702:	4845      	ldr	r0, [pc, #276]	; (8008818 <__multiply+0x150>)
 8008704:	f240 115d 	movw	r1, #349	; 0x15d
 8008708:	f000 fc24 	bl	8008f54 <__assert_func>
 800870c:	f100 0514 	add.w	r5, r0, #20
 8008710:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008714:	462b      	mov	r3, r5
 8008716:	2200      	movs	r2, #0
 8008718:	4543      	cmp	r3, r8
 800871a:	d321      	bcc.n	8008760 <__multiply+0x98>
 800871c:	f104 0314 	add.w	r3, r4, #20
 8008720:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008724:	f109 0314 	add.w	r3, r9, #20
 8008728:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800872c:	9202      	str	r2, [sp, #8]
 800872e:	1b3a      	subs	r2, r7, r4
 8008730:	3a15      	subs	r2, #21
 8008732:	f022 0203 	bic.w	r2, r2, #3
 8008736:	3204      	adds	r2, #4
 8008738:	f104 0115 	add.w	r1, r4, #21
 800873c:	428f      	cmp	r7, r1
 800873e:	bf38      	it	cc
 8008740:	2204      	movcc	r2, #4
 8008742:	9201      	str	r2, [sp, #4]
 8008744:	9a02      	ldr	r2, [sp, #8]
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	429a      	cmp	r2, r3
 800874a:	d80c      	bhi.n	8008766 <__multiply+0x9e>
 800874c:	2e00      	cmp	r6, #0
 800874e:	dd03      	ble.n	8008758 <__multiply+0x90>
 8008750:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008754:	2b00      	cmp	r3, #0
 8008756:	d05a      	beq.n	800880e <__multiply+0x146>
 8008758:	6106      	str	r6, [r0, #16]
 800875a:	b005      	add	sp, #20
 800875c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008760:	f843 2b04 	str.w	r2, [r3], #4
 8008764:	e7d8      	b.n	8008718 <__multiply+0x50>
 8008766:	f8b3 a000 	ldrh.w	sl, [r3]
 800876a:	f1ba 0f00 	cmp.w	sl, #0
 800876e:	d024      	beq.n	80087ba <__multiply+0xf2>
 8008770:	f104 0e14 	add.w	lr, r4, #20
 8008774:	46a9      	mov	r9, r5
 8008776:	f04f 0c00 	mov.w	ip, #0
 800877a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800877e:	f8d9 1000 	ldr.w	r1, [r9]
 8008782:	fa1f fb82 	uxth.w	fp, r2
 8008786:	b289      	uxth	r1, r1
 8008788:	fb0a 110b 	mla	r1, sl, fp, r1
 800878c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008790:	f8d9 2000 	ldr.w	r2, [r9]
 8008794:	4461      	add	r1, ip
 8008796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800879a:	fb0a c20b 	mla	r2, sl, fp, ip
 800879e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80087a2:	b289      	uxth	r1, r1
 80087a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80087a8:	4577      	cmp	r7, lr
 80087aa:	f849 1b04 	str.w	r1, [r9], #4
 80087ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80087b2:	d8e2      	bhi.n	800877a <__multiply+0xb2>
 80087b4:	9a01      	ldr	r2, [sp, #4]
 80087b6:	f845 c002 	str.w	ip, [r5, r2]
 80087ba:	9a03      	ldr	r2, [sp, #12]
 80087bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087c0:	3304      	adds	r3, #4
 80087c2:	f1b9 0f00 	cmp.w	r9, #0
 80087c6:	d020      	beq.n	800880a <__multiply+0x142>
 80087c8:	6829      	ldr	r1, [r5, #0]
 80087ca:	f104 0c14 	add.w	ip, r4, #20
 80087ce:	46ae      	mov	lr, r5
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	f8bc b000 	ldrh.w	fp, [ip]
 80087d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087dc:	fb09 220b 	mla	r2, r9, fp, r2
 80087e0:	4492      	add	sl, r2
 80087e2:	b289      	uxth	r1, r1
 80087e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087e8:	f84e 1b04 	str.w	r1, [lr], #4
 80087ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087f0:	f8be 1000 	ldrh.w	r1, [lr]
 80087f4:	0c12      	lsrs	r2, r2, #16
 80087f6:	fb09 1102 	mla	r1, r9, r2, r1
 80087fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087fe:	4567      	cmp	r7, ip
 8008800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008804:	d8e6      	bhi.n	80087d4 <__multiply+0x10c>
 8008806:	9a01      	ldr	r2, [sp, #4]
 8008808:	50a9      	str	r1, [r5, r2]
 800880a:	3504      	adds	r5, #4
 800880c:	e79a      	b.n	8008744 <__multiply+0x7c>
 800880e:	3e01      	subs	r6, #1
 8008810:	e79c      	b.n	800874c <__multiply+0x84>
 8008812:	bf00      	nop
 8008814:	08009827 	.word	0x08009827
 8008818:	08009838 	.word	0x08009838

0800881c <__pow5mult>:
 800881c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008820:	4615      	mov	r5, r2
 8008822:	f012 0203 	ands.w	r2, r2, #3
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	d007      	beq.n	800883c <__pow5mult+0x20>
 800882c:	4c25      	ldr	r4, [pc, #148]	; (80088c4 <__pow5mult+0xa8>)
 800882e:	3a01      	subs	r2, #1
 8008830:	2300      	movs	r3, #0
 8008832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008836:	f7ff fe9b 	bl	8008570 <__multadd>
 800883a:	4607      	mov	r7, r0
 800883c:	10ad      	asrs	r5, r5, #2
 800883e:	d03d      	beq.n	80088bc <__pow5mult+0xa0>
 8008840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008842:	b97c      	cbnz	r4, 8008864 <__pow5mult+0x48>
 8008844:	2010      	movs	r0, #16
 8008846:	f7ff fe1d 	bl	8008484 <malloc>
 800884a:	4602      	mov	r2, r0
 800884c:	6270      	str	r0, [r6, #36]	; 0x24
 800884e:	b928      	cbnz	r0, 800885c <__pow5mult+0x40>
 8008850:	4b1d      	ldr	r3, [pc, #116]	; (80088c8 <__pow5mult+0xac>)
 8008852:	481e      	ldr	r0, [pc, #120]	; (80088cc <__pow5mult+0xb0>)
 8008854:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008858:	f000 fb7c 	bl	8008f54 <__assert_func>
 800885c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008860:	6004      	str	r4, [r0, #0]
 8008862:	60c4      	str	r4, [r0, #12]
 8008864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800886c:	b94c      	cbnz	r4, 8008882 <__pow5mult+0x66>
 800886e:	f240 2171 	movw	r1, #625	; 0x271
 8008872:	4630      	mov	r0, r6
 8008874:	f7ff ff12 	bl	800869c <__i2b>
 8008878:	2300      	movs	r3, #0
 800887a:	f8c8 0008 	str.w	r0, [r8, #8]
 800887e:	4604      	mov	r4, r0
 8008880:	6003      	str	r3, [r0, #0]
 8008882:	f04f 0900 	mov.w	r9, #0
 8008886:	07eb      	lsls	r3, r5, #31
 8008888:	d50a      	bpl.n	80088a0 <__pow5mult+0x84>
 800888a:	4639      	mov	r1, r7
 800888c:	4622      	mov	r2, r4
 800888e:	4630      	mov	r0, r6
 8008890:	f7ff ff1a 	bl	80086c8 <__multiply>
 8008894:	4639      	mov	r1, r7
 8008896:	4680      	mov	r8, r0
 8008898:	4630      	mov	r0, r6
 800889a:	f7ff fe47 	bl	800852c <_Bfree>
 800889e:	4647      	mov	r7, r8
 80088a0:	106d      	asrs	r5, r5, #1
 80088a2:	d00b      	beq.n	80088bc <__pow5mult+0xa0>
 80088a4:	6820      	ldr	r0, [r4, #0]
 80088a6:	b938      	cbnz	r0, 80088b8 <__pow5mult+0x9c>
 80088a8:	4622      	mov	r2, r4
 80088aa:	4621      	mov	r1, r4
 80088ac:	4630      	mov	r0, r6
 80088ae:	f7ff ff0b 	bl	80086c8 <__multiply>
 80088b2:	6020      	str	r0, [r4, #0]
 80088b4:	f8c0 9000 	str.w	r9, [r0]
 80088b8:	4604      	mov	r4, r0
 80088ba:	e7e4      	b.n	8008886 <__pow5mult+0x6a>
 80088bc:	4638      	mov	r0, r7
 80088be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088c2:	bf00      	nop
 80088c4:	08009988 	.word	0x08009988
 80088c8:	080097b5 	.word	0x080097b5
 80088cc:	08009838 	.word	0x08009838

080088d0 <__lshift>:
 80088d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088d4:	460c      	mov	r4, r1
 80088d6:	6849      	ldr	r1, [r1, #4]
 80088d8:	6923      	ldr	r3, [r4, #16]
 80088da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088de:	68a3      	ldr	r3, [r4, #8]
 80088e0:	4607      	mov	r7, r0
 80088e2:	4691      	mov	r9, r2
 80088e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088e8:	f108 0601 	add.w	r6, r8, #1
 80088ec:	42b3      	cmp	r3, r6
 80088ee:	db0b      	blt.n	8008908 <__lshift+0x38>
 80088f0:	4638      	mov	r0, r7
 80088f2:	f7ff fddb 	bl	80084ac <_Balloc>
 80088f6:	4605      	mov	r5, r0
 80088f8:	b948      	cbnz	r0, 800890e <__lshift+0x3e>
 80088fa:	4602      	mov	r2, r0
 80088fc:	4b2a      	ldr	r3, [pc, #168]	; (80089a8 <__lshift+0xd8>)
 80088fe:	482b      	ldr	r0, [pc, #172]	; (80089ac <__lshift+0xdc>)
 8008900:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008904:	f000 fb26 	bl	8008f54 <__assert_func>
 8008908:	3101      	adds	r1, #1
 800890a:	005b      	lsls	r3, r3, #1
 800890c:	e7ee      	b.n	80088ec <__lshift+0x1c>
 800890e:	2300      	movs	r3, #0
 8008910:	f100 0114 	add.w	r1, r0, #20
 8008914:	f100 0210 	add.w	r2, r0, #16
 8008918:	4618      	mov	r0, r3
 800891a:	4553      	cmp	r3, sl
 800891c:	db37      	blt.n	800898e <__lshift+0xbe>
 800891e:	6920      	ldr	r0, [r4, #16]
 8008920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008924:	f104 0314 	add.w	r3, r4, #20
 8008928:	f019 091f 	ands.w	r9, r9, #31
 800892c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008930:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008934:	d02f      	beq.n	8008996 <__lshift+0xc6>
 8008936:	f1c9 0e20 	rsb	lr, r9, #32
 800893a:	468a      	mov	sl, r1
 800893c:	f04f 0c00 	mov.w	ip, #0
 8008940:	681a      	ldr	r2, [r3, #0]
 8008942:	fa02 f209 	lsl.w	r2, r2, r9
 8008946:	ea42 020c 	orr.w	r2, r2, ip
 800894a:	f84a 2b04 	str.w	r2, [sl], #4
 800894e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008952:	4298      	cmp	r0, r3
 8008954:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008958:	d8f2      	bhi.n	8008940 <__lshift+0x70>
 800895a:	1b03      	subs	r3, r0, r4
 800895c:	3b15      	subs	r3, #21
 800895e:	f023 0303 	bic.w	r3, r3, #3
 8008962:	3304      	adds	r3, #4
 8008964:	f104 0215 	add.w	r2, r4, #21
 8008968:	4290      	cmp	r0, r2
 800896a:	bf38      	it	cc
 800896c:	2304      	movcc	r3, #4
 800896e:	f841 c003 	str.w	ip, [r1, r3]
 8008972:	f1bc 0f00 	cmp.w	ip, #0
 8008976:	d001      	beq.n	800897c <__lshift+0xac>
 8008978:	f108 0602 	add.w	r6, r8, #2
 800897c:	3e01      	subs	r6, #1
 800897e:	4638      	mov	r0, r7
 8008980:	612e      	str	r6, [r5, #16]
 8008982:	4621      	mov	r1, r4
 8008984:	f7ff fdd2 	bl	800852c <_Bfree>
 8008988:	4628      	mov	r0, r5
 800898a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800898e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008992:	3301      	adds	r3, #1
 8008994:	e7c1      	b.n	800891a <__lshift+0x4a>
 8008996:	3904      	subs	r1, #4
 8008998:	f853 2b04 	ldr.w	r2, [r3], #4
 800899c:	f841 2f04 	str.w	r2, [r1, #4]!
 80089a0:	4298      	cmp	r0, r3
 80089a2:	d8f9      	bhi.n	8008998 <__lshift+0xc8>
 80089a4:	e7ea      	b.n	800897c <__lshift+0xac>
 80089a6:	bf00      	nop
 80089a8:	08009827 	.word	0x08009827
 80089ac:	08009838 	.word	0x08009838

080089b0 <__mcmp>:
 80089b0:	b530      	push	{r4, r5, lr}
 80089b2:	6902      	ldr	r2, [r0, #16]
 80089b4:	690c      	ldr	r4, [r1, #16]
 80089b6:	1b12      	subs	r2, r2, r4
 80089b8:	d10e      	bne.n	80089d8 <__mcmp+0x28>
 80089ba:	f100 0314 	add.w	r3, r0, #20
 80089be:	3114      	adds	r1, #20
 80089c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089d0:	42a5      	cmp	r5, r4
 80089d2:	d003      	beq.n	80089dc <__mcmp+0x2c>
 80089d4:	d305      	bcc.n	80089e2 <__mcmp+0x32>
 80089d6:	2201      	movs	r2, #1
 80089d8:	4610      	mov	r0, r2
 80089da:	bd30      	pop	{r4, r5, pc}
 80089dc:	4283      	cmp	r3, r0
 80089de:	d3f3      	bcc.n	80089c8 <__mcmp+0x18>
 80089e0:	e7fa      	b.n	80089d8 <__mcmp+0x28>
 80089e2:	f04f 32ff 	mov.w	r2, #4294967295
 80089e6:	e7f7      	b.n	80089d8 <__mcmp+0x28>

080089e8 <__mdiff>:
 80089e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ec:	460c      	mov	r4, r1
 80089ee:	4606      	mov	r6, r0
 80089f0:	4611      	mov	r1, r2
 80089f2:	4620      	mov	r0, r4
 80089f4:	4690      	mov	r8, r2
 80089f6:	f7ff ffdb 	bl	80089b0 <__mcmp>
 80089fa:	1e05      	subs	r5, r0, #0
 80089fc:	d110      	bne.n	8008a20 <__mdiff+0x38>
 80089fe:	4629      	mov	r1, r5
 8008a00:	4630      	mov	r0, r6
 8008a02:	f7ff fd53 	bl	80084ac <_Balloc>
 8008a06:	b930      	cbnz	r0, 8008a16 <__mdiff+0x2e>
 8008a08:	4b3a      	ldr	r3, [pc, #232]	; (8008af4 <__mdiff+0x10c>)
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	f240 2132 	movw	r1, #562	; 0x232
 8008a10:	4839      	ldr	r0, [pc, #228]	; (8008af8 <__mdiff+0x110>)
 8008a12:	f000 fa9f 	bl	8008f54 <__assert_func>
 8008a16:	2301      	movs	r3, #1
 8008a18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a20:	bfa4      	itt	ge
 8008a22:	4643      	movge	r3, r8
 8008a24:	46a0      	movge	r8, r4
 8008a26:	4630      	mov	r0, r6
 8008a28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a2c:	bfa6      	itte	ge
 8008a2e:	461c      	movge	r4, r3
 8008a30:	2500      	movge	r5, #0
 8008a32:	2501      	movlt	r5, #1
 8008a34:	f7ff fd3a 	bl	80084ac <_Balloc>
 8008a38:	b920      	cbnz	r0, 8008a44 <__mdiff+0x5c>
 8008a3a:	4b2e      	ldr	r3, [pc, #184]	; (8008af4 <__mdiff+0x10c>)
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a42:	e7e5      	b.n	8008a10 <__mdiff+0x28>
 8008a44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a48:	6926      	ldr	r6, [r4, #16]
 8008a4a:	60c5      	str	r5, [r0, #12]
 8008a4c:	f104 0914 	add.w	r9, r4, #20
 8008a50:	f108 0514 	add.w	r5, r8, #20
 8008a54:	f100 0e14 	add.w	lr, r0, #20
 8008a58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a60:	f108 0210 	add.w	r2, r8, #16
 8008a64:	46f2      	mov	sl, lr
 8008a66:	2100      	movs	r1, #0
 8008a68:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a70:	fa1f f883 	uxth.w	r8, r3
 8008a74:	fa11 f18b 	uxtah	r1, r1, fp
 8008a78:	0c1b      	lsrs	r3, r3, #16
 8008a7a:	eba1 0808 	sub.w	r8, r1, r8
 8008a7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a86:	fa1f f888 	uxth.w	r8, r8
 8008a8a:	1419      	asrs	r1, r3, #16
 8008a8c:	454e      	cmp	r6, r9
 8008a8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a92:	f84a 3b04 	str.w	r3, [sl], #4
 8008a96:	d8e7      	bhi.n	8008a68 <__mdiff+0x80>
 8008a98:	1b33      	subs	r3, r6, r4
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	3415      	adds	r4, #21
 8008aa4:	42a6      	cmp	r6, r4
 8008aa6:	bf38      	it	cc
 8008aa8:	2304      	movcc	r3, #4
 8008aaa:	441d      	add	r5, r3
 8008aac:	4473      	add	r3, lr
 8008aae:	469e      	mov	lr, r3
 8008ab0:	462e      	mov	r6, r5
 8008ab2:	4566      	cmp	r6, ip
 8008ab4:	d30e      	bcc.n	8008ad4 <__mdiff+0xec>
 8008ab6:	f10c 0203 	add.w	r2, ip, #3
 8008aba:	1b52      	subs	r2, r2, r5
 8008abc:	f022 0203 	bic.w	r2, r2, #3
 8008ac0:	3d03      	subs	r5, #3
 8008ac2:	45ac      	cmp	ip, r5
 8008ac4:	bf38      	it	cc
 8008ac6:	2200      	movcc	r2, #0
 8008ac8:	441a      	add	r2, r3
 8008aca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ace:	b17b      	cbz	r3, 8008af0 <__mdiff+0x108>
 8008ad0:	6107      	str	r7, [r0, #16]
 8008ad2:	e7a3      	b.n	8008a1c <__mdiff+0x34>
 8008ad4:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ad8:	fa11 f288 	uxtah	r2, r1, r8
 8008adc:	1414      	asrs	r4, r2, #16
 8008ade:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ae2:	b292      	uxth	r2, r2
 8008ae4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ae8:	f84e 2b04 	str.w	r2, [lr], #4
 8008aec:	1421      	asrs	r1, r4, #16
 8008aee:	e7e0      	b.n	8008ab2 <__mdiff+0xca>
 8008af0:	3f01      	subs	r7, #1
 8008af2:	e7ea      	b.n	8008aca <__mdiff+0xe2>
 8008af4:	08009827 	.word	0x08009827
 8008af8:	08009838 	.word	0x08009838

08008afc <__d2b>:
 8008afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b00:	4689      	mov	r9, r1
 8008b02:	2101      	movs	r1, #1
 8008b04:	ec57 6b10 	vmov	r6, r7, d0
 8008b08:	4690      	mov	r8, r2
 8008b0a:	f7ff fccf 	bl	80084ac <_Balloc>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b930      	cbnz	r0, 8008b20 <__d2b+0x24>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b25      	ldr	r3, [pc, #148]	; (8008bac <__d2b+0xb0>)
 8008b16:	4826      	ldr	r0, [pc, #152]	; (8008bb0 <__d2b+0xb4>)
 8008b18:	f240 310a 	movw	r1, #778	; 0x30a
 8008b1c:	f000 fa1a 	bl	8008f54 <__assert_func>
 8008b20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b28:	bb35      	cbnz	r5, 8008b78 <__d2b+0x7c>
 8008b2a:	2e00      	cmp	r6, #0
 8008b2c:	9301      	str	r3, [sp, #4]
 8008b2e:	d028      	beq.n	8008b82 <__d2b+0x86>
 8008b30:	4668      	mov	r0, sp
 8008b32:	9600      	str	r6, [sp, #0]
 8008b34:	f7ff fd82 	bl	800863c <__lo0bits>
 8008b38:	9900      	ldr	r1, [sp, #0]
 8008b3a:	b300      	cbz	r0, 8008b7e <__d2b+0x82>
 8008b3c:	9a01      	ldr	r2, [sp, #4]
 8008b3e:	f1c0 0320 	rsb	r3, r0, #32
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	430b      	orrs	r3, r1
 8008b48:	40c2      	lsrs	r2, r0
 8008b4a:	6163      	str	r3, [r4, #20]
 8008b4c:	9201      	str	r2, [sp, #4]
 8008b4e:	9b01      	ldr	r3, [sp, #4]
 8008b50:	61a3      	str	r3, [r4, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	bf14      	ite	ne
 8008b56:	2202      	movne	r2, #2
 8008b58:	2201      	moveq	r2, #1
 8008b5a:	6122      	str	r2, [r4, #16]
 8008b5c:	b1d5      	cbz	r5, 8008b94 <__d2b+0x98>
 8008b5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b62:	4405      	add	r5, r0
 8008b64:	f8c9 5000 	str.w	r5, [r9]
 8008b68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b6c:	f8c8 0000 	str.w	r0, [r8]
 8008b70:	4620      	mov	r0, r4
 8008b72:	b003      	add	sp, #12
 8008b74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b7c:	e7d5      	b.n	8008b2a <__d2b+0x2e>
 8008b7e:	6161      	str	r1, [r4, #20]
 8008b80:	e7e5      	b.n	8008b4e <__d2b+0x52>
 8008b82:	a801      	add	r0, sp, #4
 8008b84:	f7ff fd5a 	bl	800863c <__lo0bits>
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	6163      	str	r3, [r4, #20]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	6122      	str	r2, [r4, #16]
 8008b90:	3020      	adds	r0, #32
 8008b92:	e7e3      	b.n	8008b5c <__d2b+0x60>
 8008b94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b9c:	f8c9 0000 	str.w	r0, [r9]
 8008ba0:	6918      	ldr	r0, [r3, #16]
 8008ba2:	f7ff fd2b 	bl	80085fc <__hi0bits>
 8008ba6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008baa:	e7df      	b.n	8008b6c <__d2b+0x70>
 8008bac:	08009827 	.word	0x08009827
 8008bb0:	08009838 	.word	0x08009838

08008bb4 <_calloc_r>:
 8008bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bb6:	fba1 2402 	umull	r2, r4, r1, r2
 8008bba:	b94c      	cbnz	r4, 8008bd0 <_calloc_r+0x1c>
 8008bbc:	4611      	mov	r1, r2
 8008bbe:	9201      	str	r2, [sp, #4]
 8008bc0:	f7fd ff2e 	bl	8006a20 <_malloc_r>
 8008bc4:	9a01      	ldr	r2, [sp, #4]
 8008bc6:	4605      	mov	r5, r0
 8008bc8:	b930      	cbnz	r0, 8008bd8 <_calloc_r+0x24>
 8008bca:	4628      	mov	r0, r5
 8008bcc:	b003      	add	sp, #12
 8008bce:	bd30      	pop	{r4, r5, pc}
 8008bd0:	220c      	movs	r2, #12
 8008bd2:	6002      	str	r2, [r0, #0]
 8008bd4:	2500      	movs	r5, #0
 8008bd6:	e7f8      	b.n	8008bca <_calloc_r+0x16>
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7fd fef8 	bl	80069ce <memset>
 8008bde:	e7f4      	b.n	8008bca <_calloc_r+0x16>

08008be0 <_free_r>:
 8008be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008be2:	2900      	cmp	r1, #0
 8008be4:	d044      	beq.n	8008c70 <_free_r+0x90>
 8008be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bea:	9001      	str	r0, [sp, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f1a1 0404 	sub.w	r4, r1, #4
 8008bf2:	bfb8      	it	lt
 8008bf4:	18e4      	addlt	r4, r4, r3
 8008bf6:	f7ff fc4d 	bl	8008494 <__malloc_lock>
 8008bfa:	4a1e      	ldr	r2, [pc, #120]	; (8008c74 <_free_r+0x94>)
 8008bfc:	9801      	ldr	r0, [sp, #4]
 8008bfe:	6813      	ldr	r3, [r2, #0]
 8008c00:	b933      	cbnz	r3, 8008c10 <_free_r+0x30>
 8008c02:	6063      	str	r3, [r4, #4]
 8008c04:	6014      	str	r4, [r2, #0]
 8008c06:	b003      	add	sp, #12
 8008c08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c0c:	f7ff bc48 	b.w	80084a0 <__malloc_unlock>
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	d908      	bls.n	8008c26 <_free_r+0x46>
 8008c14:	6825      	ldr	r5, [r4, #0]
 8008c16:	1961      	adds	r1, r4, r5
 8008c18:	428b      	cmp	r3, r1
 8008c1a:	bf01      	itttt	eq
 8008c1c:	6819      	ldreq	r1, [r3, #0]
 8008c1e:	685b      	ldreq	r3, [r3, #4]
 8008c20:	1949      	addeq	r1, r1, r5
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	e7ed      	b.n	8008c02 <_free_r+0x22>
 8008c26:	461a      	mov	r2, r3
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	b10b      	cbz	r3, 8008c30 <_free_r+0x50>
 8008c2c:	42a3      	cmp	r3, r4
 8008c2e:	d9fa      	bls.n	8008c26 <_free_r+0x46>
 8008c30:	6811      	ldr	r1, [r2, #0]
 8008c32:	1855      	adds	r5, r2, r1
 8008c34:	42a5      	cmp	r5, r4
 8008c36:	d10b      	bne.n	8008c50 <_free_r+0x70>
 8008c38:	6824      	ldr	r4, [r4, #0]
 8008c3a:	4421      	add	r1, r4
 8008c3c:	1854      	adds	r4, r2, r1
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	6011      	str	r1, [r2, #0]
 8008c42:	d1e0      	bne.n	8008c06 <_free_r+0x26>
 8008c44:	681c      	ldr	r4, [r3, #0]
 8008c46:	685b      	ldr	r3, [r3, #4]
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	4421      	add	r1, r4
 8008c4c:	6011      	str	r1, [r2, #0]
 8008c4e:	e7da      	b.n	8008c06 <_free_r+0x26>
 8008c50:	d902      	bls.n	8008c58 <_free_r+0x78>
 8008c52:	230c      	movs	r3, #12
 8008c54:	6003      	str	r3, [r0, #0]
 8008c56:	e7d6      	b.n	8008c06 <_free_r+0x26>
 8008c58:	6825      	ldr	r5, [r4, #0]
 8008c5a:	1961      	adds	r1, r4, r5
 8008c5c:	428b      	cmp	r3, r1
 8008c5e:	bf04      	itt	eq
 8008c60:	6819      	ldreq	r1, [r3, #0]
 8008c62:	685b      	ldreq	r3, [r3, #4]
 8008c64:	6063      	str	r3, [r4, #4]
 8008c66:	bf04      	itt	eq
 8008c68:	1949      	addeq	r1, r1, r5
 8008c6a:	6021      	streq	r1, [r4, #0]
 8008c6c:	6054      	str	r4, [r2, #4]
 8008c6e:	e7ca      	b.n	8008c06 <_free_r+0x26>
 8008c70:	b003      	add	sp, #12
 8008c72:	bd30      	pop	{r4, r5, pc}
 8008c74:	20004460 	.word	0x20004460

08008c78 <__ssputs_r>:
 8008c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c7c:	688e      	ldr	r6, [r1, #8]
 8008c7e:	429e      	cmp	r6, r3
 8008c80:	4682      	mov	sl, r0
 8008c82:	460c      	mov	r4, r1
 8008c84:	4690      	mov	r8, r2
 8008c86:	461f      	mov	r7, r3
 8008c88:	d838      	bhi.n	8008cfc <__ssputs_r+0x84>
 8008c8a:	898a      	ldrh	r2, [r1, #12]
 8008c8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c90:	d032      	beq.n	8008cf8 <__ssputs_r+0x80>
 8008c92:	6825      	ldr	r5, [r4, #0]
 8008c94:	6909      	ldr	r1, [r1, #16]
 8008c96:	eba5 0901 	sub.w	r9, r5, r1
 8008c9a:	6965      	ldr	r5, [r4, #20]
 8008c9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ca0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	444b      	add	r3, r9
 8008ca8:	106d      	asrs	r5, r5, #1
 8008caa:	429d      	cmp	r5, r3
 8008cac:	bf38      	it	cc
 8008cae:	461d      	movcc	r5, r3
 8008cb0:	0553      	lsls	r3, r2, #21
 8008cb2:	d531      	bpl.n	8008d18 <__ssputs_r+0xa0>
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	f7fd feb3 	bl	8006a20 <_malloc_r>
 8008cba:	4606      	mov	r6, r0
 8008cbc:	b950      	cbnz	r0, 8008cd4 <__ssputs_r+0x5c>
 8008cbe:	230c      	movs	r3, #12
 8008cc0:	f8ca 3000 	str.w	r3, [sl]
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cca:	81a3      	strh	r3, [r4, #12]
 8008ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd4:	6921      	ldr	r1, [r4, #16]
 8008cd6:	464a      	mov	r2, r9
 8008cd8:	f7fd fe6b 	bl	80069b2 <memcpy>
 8008cdc:	89a3      	ldrh	r3, [r4, #12]
 8008cde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce6:	81a3      	strh	r3, [r4, #12]
 8008ce8:	6126      	str	r6, [r4, #16]
 8008cea:	6165      	str	r5, [r4, #20]
 8008cec:	444e      	add	r6, r9
 8008cee:	eba5 0509 	sub.w	r5, r5, r9
 8008cf2:	6026      	str	r6, [r4, #0]
 8008cf4:	60a5      	str	r5, [r4, #8]
 8008cf6:	463e      	mov	r6, r7
 8008cf8:	42be      	cmp	r6, r7
 8008cfa:	d900      	bls.n	8008cfe <__ssputs_r+0x86>
 8008cfc:	463e      	mov	r6, r7
 8008cfe:	6820      	ldr	r0, [r4, #0]
 8008d00:	4632      	mov	r2, r6
 8008d02:	4641      	mov	r1, r8
 8008d04:	f000 f968 	bl	8008fd8 <memmove>
 8008d08:	68a3      	ldr	r3, [r4, #8]
 8008d0a:	1b9b      	subs	r3, r3, r6
 8008d0c:	60a3      	str	r3, [r4, #8]
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	4433      	add	r3, r6
 8008d12:	6023      	str	r3, [r4, #0]
 8008d14:	2000      	movs	r0, #0
 8008d16:	e7db      	b.n	8008cd0 <__ssputs_r+0x58>
 8008d18:	462a      	mov	r2, r5
 8008d1a:	f000 f977 	bl	800900c <_realloc_r>
 8008d1e:	4606      	mov	r6, r0
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d1e1      	bne.n	8008ce8 <__ssputs_r+0x70>
 8008d24:	6921      	ldr	r1, [r4, #16]
 8008d26:	4650      	mov	r0, sl
 8008d28:	f7ff ff5a 	bl	8008be0 <_free_r>
 8008d2c:	e7c7      	b.n	8008cbe <__ssputs_r+0x46>
	...

08008d30 <_svfiprintf_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4698      	mov	r8, r3
 8008d36:	898b      	ldrh	r3, [r1, #12]
 8008d38:	061b      	lsls	r3, r3, #24
 8008d3a:	b09d      	sub	sp, #116	; 0x74
 8008d3c:	4607      	mov	r7, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	4614      	mov	r4, r2
 8008d42:	d50e      	bpl.n	8008d62 <_svfiprintf_r+0x32>
 8008d44:	690b      	ldr	r3, [r1, #16]
 8008d46:	b963      	cbnz	r3, 8008d62 <_svfiprintf_r+0x32>
 8008d48:	2140      	movs	r1, #64	; 0x40
 8008d4a:	f7fd fe69 	bl	8006a20 <_malloc_r>
 8008d4e:	6028      	str	r0, [r5, #0]
 8008d50:	6128      	str	r0, [r5, #16]
 8008d52:	b920      	cbnz	r0, 8008d5e <_svfiprintf_r+0x2e>
 8008d54:	230c      	movs	r3, #12
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5c:	e0d1      	b.n	8008f02 <_svfiprintf_r+0x1d2>
 8008d5e:	2340      	movs	r3, #64	; 0x40
 8008d60:	616b      	str	r3, [r5, #20]
 8008d62:	2300      	movs	r3, #0
 8008d64:	9309      	str	r3, [sp, #36]	; 0x24
 8008d66:	2320      	movs	r3, #32
 8008d68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d70:	2330      	movs	r3, #48	; 0x30
 8008d72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008f1c <_svfiprintf_r+0x1ec>
 8008d76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d7a:	f04f 0901 	mov.w	r9, #1
 8008d7e:	4623      	mov	r3, r4
 8008d80:	469a      	mov	sl, r3
 8008d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d86:	b10a      	cbz	r2, 8008d8c <_svfiprintf_r+0x5c>
 8008d88:	2a25      	cmp	r2, #37	; 0x25
 8008d8a:	d1f9      	bne.n	8008d80 <_svfiprintf_r+0x50>
 8008d8c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d90:	d00b      	beq.n	8008daa <_svfiprintf_r+0x7a>
 8008d92:	465b      	mov	r3, fp
 8008d94:	4622      	mov	r2, r4
 8008d96:	4629      	mov	r1, r5
 8008d98:	4638      	mov	r0, r7
 8008d9a:	f7ff ff6d 	bl	8008c78 <__ssputs_r>
 8008d9e:	3001      	adds	r0, #1
 8008da0:	f000 80aa 	beq.w	8008ef8 <_svfiprintf_r+0x1c8>
 8008da4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008da6:	445a      	add	r2, fp
 8008da8:	9209      	str	r2, [sp, #36]	; 0x24
 8008daa:	f89a 3000 	ldrb.w	r3, [sl]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	f000 80a2 	beq.w	8008ef8 <_svfiprintf_r+0x1c8>
 8008db4:	2300      	movs	r3, #0
 8008db6:	f04f 32ff 	mov.w	r2, #4294967295
 8008dba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008dbe:	f10a 0a01 	add.w	sl, sl, #1
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	9307      	str	r3, [sp, #28]
 8008dc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008dca:	931a      	str	r3, [sp, #104]	; 0x68
 8008dcc:	4654      	mov	r4, sl
 8008dce:	2205      	movs	r2, #5
 8008dd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd4:	4851      	ldr	r0, [pc, #324]	; (8008f1c <_svfiprintf_r+0x1ec>)
 8008dd6:	f7f7 fa23 	bl	8000220 <memchr>
 8008dda:	9a04      	ldr	r2, [sp, #16]
 8008ddc:	b9d8      	cbnz	r0, 8008e16 <_svfiprintf_r+0xe6>
 8008dde:	06d0      	lsls	r0, r2, #27
 8008de0:	bf44      	itt	mi
 8008de2:	2320      	movmi	r3, #32
 8008de4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008de8:	0711      	lsls	r1, r2, #28
 8008dea:	bf44      	itt	mi
 8008dec:	232b      	movmi	r3, #43	; 0x2b
 8008dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008df2:	f89a 3000 	ldrb.w	r3, [sl]
 8008df6:	2b2a      	cmp	r3, #42	; 0x2a
 8008df8:	d015      	beq.n	8008e26 <_svfiprintf_r+0xf6>
 8008dfa:	9a07      	ldr	r2, [sp, #28]
 8008dfc:	4654      	mov	r4, sl
 8008dfe:	2000      	movs	r0, #0
 8008e00:	f04f 0c0a 	mov.w	ip, #10
 8008e04:	4621      	mov	r1, r4
 8008e06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e0a:	3b30      	subs	r3, #48	; 0x30
 8008e0c:	2b09      	cmp	r3, #9
 8008e0e:	d94e      	bls.n	8008eae <_svfiprintf_r+0x17e>
 8008e10:	b1b0      	cbz	r0, 8008e40 <_svfiprintf_r+0x110>
 8008e12:	9207      	str	r2, [sp, #28]
 8008e14:	e014      	b.n	8008e40 <_svfiprintf_r+0x110>
 8008e16:	eba0 0308 	sub.w	r3, r0, r8
 8008e1a:	fa09 f303 	lsl.w	r3, r9, r3
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	9304      	str	r3, [sp, #16]
 8008e22:	46a2      	mov	sl, r4
 8008e24:	e7d2      	b.n	8008dcc <_svfiprintf_r+0x9c>
 8008e26:	9b03      	ldr	r3, [sp, #12]
 8008e28:	1d19      	adds	r1, r3, #4
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	9103      	str	r1, [sp, #12]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfbb      	ittet	lt
 8008e32:	425b      	neglt	r3, r3
 8008e34:	f042 0202 	orrlt.w	r2, r2, #2
 8008e38:	9307      	strge	r3, [sp, #28]
 8008e3a:	9307      	strlt	r3, [sp, #28]
 8008e3c:	bfb8      	it	lt
 8008e3e:	9204      	strlt	r2, [sp, #16]
 8008e40:	7823      	ldrb	r3, [r4, #0]
 8008e42:	2b2e      	cmp	r3, #46	; 0x2e
 8008e44:	d10c      	bne.n	8008e60 <_svfiprintf_r+0x130>
 8008e46:	7863      	ldrb	r3, [r4, #1]
 8008e48:	2b2a      	cmp	r3, #42	; 0x2a
 8008e4a:	d135      	bne.n	8008eb8 <_svfiprintf_r+0x188>
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	1d1a      	adds	r2, r3, #4
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	9203      	str	r2, [sp, #12]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bfb8      	it	lt
 8008e58:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e5c:	3402      	adds	r4, #2
 8008e5e:	9305      	str	r3, [sp, #20]
 8008e60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008f2c <_svfiprintf_r+0x1fc>
 8008e64:	7821      	ldrb	r1, [r4, #0]
 8008e66:	2203      	movs	r2, #3
 8008e68:	4650      	mov	r0, sl
 8008e6a:	f7f7 f9d9 	bl	8000220 <memchr>
 8008e6e:	b140      	cbz	r0, 8008e82 <_svfiprintf_r+0x152>
 8008e70:	2340      	movs	r3, #64	; 0x40
 8008e72:	eba0 000a 	sub.w	r0, r0, sl
 8008e76:	fa03 f000 	lsl.w	r0, r3, r0
 8008e7a:	9b04      	ldr	r3, [sp, #16]
 8008e7c:	4303      	orrs	r3, r0
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9304      	str	r3, [sp, #16]
 8008e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e86:	4826      	ldr	r0, [pc, #152]	; (8008f20 <_svfiprintf_r+0x1f0>)
 8008e88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e8c:	2206      	movs	r2, #6
 8008e8e:	f7f7 f9c7 	bl	8000220 <memchr>
 8008e92:	2800      	cmp	r0, #0
 8008e94:	d038      	beq.n	8008f08 <_svfiprintf_r+0x1d8>
 8008e96:	4b23      	ldr	r3, [pc, #140]	; (8008f24 <_svfiprintf_r+0x1f4>)
 8008e98:	bb1b      	cbnz	r3, 8008ee2 <_svfiprintf_r+0x1b2>
 8008e9a:	9b03      	ldr	r3, [sp, #12]
 8008e9c:	3307      	adds	r3, #7
 8008e9e:	f023 0307 	bic.w	r3, r3, #7
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	9303      	str	r3, [sp, #12]
 8008ea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ea8:	4433      	add	r3, r6
 8008eaa:	9309      	str	r3, [sp, #36]	; 0x24
 8008eac:	e767      	b.n	8008d7e <_svfiprintf_r+0x4e>
 8008eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	2001      	movs	r0, #1
 8008eb6:	e7a5      	b.n	8008e04 <_svfiprintf_r+0xd4>
 8008eb8:	2300      	movs	r3, #0
 8008eba:	3401      	adds	r4, #1
 8008ebc:	9305      	str	r3, [sp, #20]
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	f04f 0c0a 	mov.w	ip, #10
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008eca:	3a30      	subs	r2, #48	; 0x30
 8008ecc:	2a09      	cmp	r2, #9
 8008ece:	d903      	bls.n	8008ed8 <_svfiprintf_r+0x1a8>
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d0c5      	beq.n	8008e60 <_svfiprintf_r+0x130>
 8008ed4:	9105      	str	r1, [sp, #20]
 8008ed6:	e7c3      	b.n	8008e60 <_svfiprintf_r+0x130>
 8008ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008edc:	4604      	mov	r4, r0
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e7f0      	b.n	8008ec4 <_svfiprintf_r+0x194>
 8008ee2:	ab03      	add	r3, sp, #12
 8008ee4:	9300      	str	r3, [sp, #0]
 8008ee6:	462a      	mov	r2, r5
 8008ee8:	4b0f      	ldr	r3, [pc, #60]	; (8008f28 <_svfiprintf_r+0x1f8>)
 8008eea:	a904      	add	r1, sp, #16
 8008eec:	4638      	mov	r0, r7
 8008eee:	f7fd feab 	bl	8006c48 <_printf_float>
 8008ef2:	1c42      	adds	r2, r0, #1
 8008ef4:	4606      	mov	r6, r0
 8008ef6:	d1d6      	bne.n	8008ea6 <_svfiprintf_r+0x176>
 8008ef8:	89ab      	ldrh	r3, [r5, #12]
 8008efa:	065b      	lsls	r3, r3, #25
 8008efc:	f53f af2c 	bmi.w	8008d58 <_svfiprintf_r+0x28>
 8008f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f02:	b01d      	add	sp, #116	; 0x74
 8008f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f08:	ab03      	add	r3, sp, #12
 8008f0a:	9300      	str	r3, [sp, #0]
 8008f0c:	462a      	mov	r2, r5
 8008f0e:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <_svfiprintf_r+0x1f8>)
 8008f10:	a904      	add	r1, sp, #16
 8008f12:	4638      	mov	r0, r7
 8008f14:	f7fe f93c 	bl	8007190 <_printf_i>
 8008f18:	e7eb      	b.n	8008ef2 <_svfiprintf_r+0x1c2>
 8008f1a:	bf00      	nop
 8008f1c:	08009994 	.word	0x08009994
 8008f20:	0800999e 	.word	0x0800999e
 8008f24:	08006c49 	.word	0x08006c49
 8008f28:	08008c79 	.word	0x08008c79
 8008f2c:	0800999a 	.word	0x0800999a

08008f30 <_read_r>:
 8008f30:	b538      	push	{r3, r4, r5, lr}
 8008f32:	4d07      	ldr	r5, [pc, #28]	; (8008f50 <_read_r+0x20>)
 8008f34:	4604      	mov	r4, r0
 8008f36:	4608      	mov	r0, r1
 8008f38:	4611      	mov	r1, r2
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	602a      	str	r2, [r5, #0]
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f7f8 fdb0 	bl	8001aa4 <_read>
 8008f44:	1c43      	adds	r3, r0, #1
 8008f46:	d102      	bne.n	8008f4e <_read_r+0x1e>
 8008f48:	682b      	ldr	r3, [r5, #0]
 8008f4a:	b103      	cbz	r3, 8008f4e <_read_r+0x1e>
 8008f4c:	6023      	str	r3, [r4, #0]
 8008f4e:	bd38      	pop	{r3, r4, r5, pc}
 8008f50:	20004468 	.word	0x20004468

08008f54 <__assert_func>:
 8008f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f56:	4614      	mov	r4, r2
 8008f58:	461a      	mov	r2, r3
 8008f5a:	4b09      	ldr	r3, [pc, #36]	; (8008f80 <__assert_func+0x2c>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4605      	mov	r5, r0
 8008f60:	68d8      	ldr	r0, [r3, #12]
 8008f62:	b14c      	cbz	r4, 8008f78 <__assert_func+0x24>
 8008f64:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <__assert_func+0x30>)
 8008f66:	9100      	str	r1, [sp, #0]
 8008f68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f6c:	4906      	ldr	r1, [pc, #24]	; (8008f88 <__assert_func+0x34>)
 8008f6e:	462b      	mov	r3, r5
 8008f70:	f000 f80e 	bl	8008f90 <fiprintf>
 8008f74:	f000 faa0 	bl	80094b8 <abort>
 8008f78:	4b04      	ldr	r3, [pc, #16]	; (8008f8c <__assert_func+0x38>)
 8008f7a:	461c      	mov	r4, r3
 8008f7c:	e7f3      	b.n	8008f66 <__assert_func+0x12>
 8008f7e:	bf00      	nop
 8008f80:	20000010 	.word	0x20000010
 8008f84:	080099a5 	.word	0x080099a5
 8008f88:	080099b2 	.word	0x080099b2
 8008f8c:	080099e0 	.word	0x080099e0

08008f90 <fiprintf>:
 8008f90:	b40e      	push	{r1, r2, r3}
 8008f92:	b503      	push	{r0, r1, lr}
 8008f94:	4601      	mov	r1, r0
 8008f96:	ab03      	add	r3, sp, #12
 8008f98:	4805      	ldr	r0, [pc, #20]	; (8008fb0 <fiprintf+0x20>)
 8008f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9e:	6800      	ldr	r0, [r0, #0]
 8008fa0:	9301      	str	r3, [sp, #4]
 8008fa2:	f000 f88b 	bl	80090bc <_vfiprintf_r>
 8008fa6:	b002      	add	sp, #8
 8008fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fac:	b003      	add	sp, #12
 8008fae:	4770      	bx	lr
 8008fb0:	20000010 	.word	0x20000010

08008fb4 <__ascii_mbtowc>:
 8008fb4:	b082      	sub	sp, #8
 8008fb6:	b901      	cbnz	r1, 8008fba <__ascii_mbtowc+0x6>
 8008fb8:	a901      	add	r1, sp, #4
 8008fba:	b142      	cbz	r2, 8008fce <__ascii_mbtowc+0x1a>
 8008fbc:	b14b      	cbz	r3, 8008fd2 <__ascii_mbtowc+0x1e>
 8008fbe:	7813      	ldrb	r3, [r2, #0]
 8008fc0:	600b      	str	r3, [r1, #0]
 8008fc2:	7812      	ldrb	r2, [r2, #0]
 8008fc4:	1e10      	subs	r0, r2, #0
 8008fc6:	bf18      	it	ne
 8008fc8:	2001      	movne	r0, #1
 8008fca:	b002      	add	sp, #8
 8008fcc:	4770      	bx	lr
 8008fce:	4610      	mov	r0, r2
 8008fd0:	e7fb      	b.n	8008fca <__ascii_mbtowc+0x16>
 8008fd2:	f06f 0001 	mvn.w	r0, #1
 8008fd6:	e7f8      	b.n	8008fca <__ascii_mbtowc+0x16>

08008fd8 <memmove>:
 8008fd8:	4288      	cmp	r0, r1
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	eb01 0402 	add.w	r4, r1, r2
 8008fe0:	d902      	bls.n	8008fe8 <memmove+0x10>
 8008fe2:	4284      	cmp	r4, r0
 8008fe4:	4623      	mov	r3, r4
 8008fe6:	d807      	bhi.n	8008ff8 <memmove+0x20>
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	42a1      	cmp	r1, r4
 8008fec:	d008      	beq.n	8009000 <memmove+0x28>
 8008fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ff2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ff6:	e7f8      	b.n	8008fea <memmove+0x12>
 8008ff8:	4402      	add	r2, r0
 8008ffa:	4601      	mov	r1, r0
 8008ffc:	428a      	cmp	r2, r1
 8008ffe:	d100      	bne.n	8009002 <memmove+0x2a>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009006:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800900a:	e7f7      	b.n	8008ffc <memmove+0x24>

0800900c <_realloc_r>:
 800900c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009010:	4680      	mov	r8, r0
 8009012:	4614      	mov	r4, r2
 8009014:	460e      	mov	r6, r1
 8009016:	b921      	cbnz	r1, 8009022 <_realloc_r+0x16>
 8009018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	4611      	mov	r1, r2
 800901e:	f7fd bcff 	b.w	8006a20 <_malloc_r>
 8009022:	b92a      	cbnz	r2, 8009030 <_realloc_r+0x24>
 8009024:	f7ff fddc 	bl	8008be0 <_free_r>
 8009028:	4625      	mov	r5, r4
 800902a:	4628      	mov	r0, r5
 800902c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009030:	f000 faae 	bl	8009590 <_malloc_usable_size_r>
 8009034:	4284      	cmp	r4, r0
 8009036:	4607      	mov	r7, r0
 8009038:	d802      	bhi.n	8009040 <_realloc_r+0x34>
 800903a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800903e:	d812      	bhi.n	8009066 <_realloc_r+0x5a>
 8009040:	4621      	mov	r1, r4
 8009042:	4640      	mov	r0, r8
 8009044:	f7fd fcec 	bl	8006a20 <_malloc_r>
 8009048:	4605      	mov	r5, r0
 800904a:	2800      	cmp	r0, #0
 800904c:	d0ed      	beq.n	800902a <_realloc_r+0x1e>
 800904e:	42bc      	cmp	r4, r7
 8009050:	4622      	mov	r2, r4
 8009052:	4631      	mov	r1, r6
 8009054:	bf28      	it	cs
 8009056:	463a      	movcs	r2, r7
 8009058:	f7fd fcab 	bl	80069b2 <memcpy>
 800905c:	4631      	mov	r1, r6
 800905e:	4640      	mov	r0, r8
 8009060:	f7ff fdbe 	bl	8008be0 <_free_r>
 8009064:	e7e1      	b.n	800902a <_realloc_r+0x1e>
 8009066:	4635      	mov	r5, r6
 8009068:	e7df      	b.n	800902a <_realloc_r+0x1e>

0800906a <__sfputc_r>:
 800906a:	6893      	ldr	r3, [r2, #8]
 800906c:	3b01      	subs	r3, #1
 800906e:	2b00      	cmp	r3, #0
 8009070:	b410      	push	{r4}
 8009072:	6093      	str	r3, [r2, #8]
 8009074:	da08      	bge.n	8009088 <__sfputc_r+0x1e>
 8009076:	6994      	ldr	r4, [r2, #24]
 8009078:	42a3      	cmp	r3, r4
 800907a:	db01      	blt.n	8009080 <__sfputc_r+0x16>
 800907c:	290a      	cmp	r1, #10
 800907e:	d103      	bne.n	8009088 <__sfputc_r+0x1e>
 8009080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009084:	f000 b94a 	b.w	800931c <__swbuf_r>
 8009088:	6813      	ldr	r3, [r2, #0]
 800908a:	1c58      	adds	r0, r3, #1
 800908c:	6010      	str	r0, [r2, #0]
 800908e:	7019      	strb	r1, [r3, #0]
 8009090:	4608      	mov	r0, r1
 8009092:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009096:	4770      	bx	lr

08009098 <__sfputs_r>:
 8009098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800909a:	4606      	mov	r6, r0
 800909c:	460f      	mov	r7, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	18d5      	adds	r5, r2, r3
 80090a2:	42ac      	cmp	r4, r5
 80090a4:	d101      	bne.n	80090aa <__sfputs_r+0x12>
 80090a6:	2000      	movs	r0, #0
 80090a8:	e007      	b.n	80090ba <__sfputs_r+0x22>
 80090aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090ae:	463a      	mov	r2, r7
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7ff ffda 	bl	800906a <__sfputc_r>
 80090b6:	1c43      	adds	r3, r0, #1
 80090b8:	d1f3      	bne.n	80090a2 <__sfputs_r+0xa>
 80090ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090bc <_vfiprintf_r>:
 80090bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090c0:	460d      	mov	r5, r1
 80090c2:	b09d      	sub	sp, #116	; 0x74
 80090c4:	4614      	mov	r4, r2
 80090c6:	4698      	mov	r8, r3
 80090c8:	4606      	mov	r6, r0
 80090ca:	b118      	cbz	r0, 80090d4 <_vfiprintf_r+0x18>
 80090cc:	6983      	ldr	r3, [r0, #24]
 80090ce:	b90b      	cbnz	r3, 80090d4 <_vfiprintf_r+0x18>
 80090d0:	f7fd fbaa 	bl	8006828 <__sinit>
 80090d4:	4b89      	ldr	r3, [pc, #548]	; (80092fc <_vfiprintf_r+0x240>)
 80090d6:	429d      	cmp	r5, r3
 80090d8:	d11b      	bne.n	8009112 <_vfiprintf_r+0x56>
 80090da:	6875      	ldr	r5, [r6, #4]
 80090dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090de:	07d9      	lsls	r1, r3, #31
 80090e0:	d405      	bmi.n	80090ee <_vfiprintf_r+0x32>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	059a      	lsls	r2, r3, #22
 80090e6:	d402      	bmi.n	80090ee <_vfiprintf_r+0x32>
 80090e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090ea:	f7fd fc60 	bl	80069ae <__retarget_lock_acquire_recursive>
 80090ee:	89ab      	ldrh	r3, [r5, #12]
 80090f0:	071b      	lsls	r3, r3, #28
 80090f2:	d501      	bpl.n	80090f8 <_vfiprintf_r+0x3c>
 80090f4:	692b      	ldr	r3, [r5, #16]
 80090f6:	b9eb      	cbnz	r3, 8009134 <_vfiprintf_r+0x78>
 80090f8:	4629      	mov	r1, r5
 80090fa:	4630      	mov	r0, r6
 80090fc:	f000 f96e 	bl	80093dc <__swsetup_r>
 8009100:	b1c0      	cbz	r0, 8009134 <_vfiprintf_r+0x78>
 8009102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009104:	07dc      	lsls	r4, r3, #31
 8009106:	d50e      	bpl.n	8009126 <_vfiprintf_r+0x6a>
 8009108:	f04f 30ff 	mov.w	r0, #4294967295
 800910c:	b01d      	add	sp, #116	; 0x74
 800910e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009112:	4b7b      	ldr	r3, [pc, #492]	; (8009300 <_vfiprintf_r+0x244>)
 8009114:	429d      	cmp	r5, r3
 8009116:	d101      	bne.n	800911c <_vfiprintf_r+0x60>
 8009118:	68b5      	ldr	r5, [r6, #8]
 800911a:	e7df      	b.n	80090dc <_vfiprintf_r+0x20>
 800911c:	4b79      	ldr	r3, [pc, #484]	; (8009304 <_vfiprintf_r+0x248>)
 800911e:	429d      	cmp	r5, r3
 8009120:	bf08      	it	eq
 8009122:	68f5      	ldreq	r5, [r6, #12]
 8009124:	e7da      	b.n	80090dc <_vfiprintf_r+0x20>
 8009126:	89ab      	ldrh	r3, [r5, #12]
 8009128:	0598      	lsls	r0, r3, #22
 800912a:	d4ed      	bmi.n	8009108 <_vfiprintf_r+0x4c>
 800912c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912e:	f7fd fc3f 	bl	80069b0 <__retarget_lock_release_recursive>
 8009132:	e7e9      	b.n	8009108 <_vfiprintf_r+0x4c>
 8009134:	2300      	movs	r3, #0
 8009136:	9309      	str	r3, [sp, #36]	; 0x24
 8009138:	2320      	movs	r3, #32
 800913a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800913e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009142:	2330      	movs	r3, #48	; 0x30
 8009144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009308 <_vfiprintf_r+0x24c>
 8009148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800914c:	f04f 0901 	mov.w	r9, #1
 8009150:	4623      	mov	r3, r4
 8009152:	469a      	mov	sl, r3
 8009154:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009158:	b10a      	cbz	r2, 800915e <_vfiprintf_r+0xa2>
 800915a:	2a25      	cmp	r2, #37	; 0x25
 800915c:	d1f9      	bne.n	8009152 <_vfiprintf_r+0x96>
 800915e:	ebba 0b04 	subs.w	fp, sl, r4
 8009162:	d00b      	beq.n	800917c <_vfiprintf_r+0xc0>
 8009164:	465b      	mov	r3, fp
 8009166:	4622      	mov	r2, r4
 8009168:	4629      	mov	r1, r5
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff94 	bl	8009098 <__sfputs_r>
 8009170:	3001      	adds	r0, #1
 8009172:	f000 80aa 	beq.w	80092ca <_vfiprintf_r+0x20e>
 8009176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009178:	445a      	add	r2, fp
 800917a:	9209      	str	r2, [sp, #36]	; 0x24
 800917c:	f89a 3000 	ldrb.w	r3, [sl]
 8009180:	2b00      	cmp	r3, #0
 8009182:	f000 80a2 	beq.w	80092ca <_vfiprintf_r+0x20e>
 8009186:	2300      	movs	r3, #0
 8009188:	f04f 32ff 	mov.w	r2, #4294967295
 800918c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009190:	f10a 0a01 	add.w	sl, sl, #1
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	9307      	str	r3, [sp, #28]
 8009198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800919c:	931a      	str	r3, [sp, #104]	; 0x68
 800919e:	4654      	mov	r4, sl
 80091a0:	2205      	movs	r2, #5
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4858      	ldr	r0, [pc, #352]	; (8009308 <_vfiprintf_r+0x24c>)
 80091a8:	f7f7 f83a 	bl	8000220 <memchr>
 80091ac:	9a04      	ldr	r2, [sp, #16]
 80091ae:	b9d8      	cbnz	r0, 80091e8 <_vfiprintf_r+0x12c>
 80091b0:	06d1      	lsls	r1, r2, #27
 80091b2:	bf44      	itt	mi
 80091b4:	2320      	movmi	r3, #32
 80091b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091ba:	0713      	lsls	r3, r2, #28
 80091bc:	bf44      	itt	mi
 80091be:	232b      	movmi	r3, #43	; 0x2b
 80091c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c4:	f89a 3000 	ldrb.w	r3, [sl]
 80091c8:	2b2a      	cmp	r3, #42	; 0x2a
 80091ca:	d015      	beq.n	80091f8 <_vfiprintf_r+0x13c>
 80091cc:	9a07      	ldr	r2, [sp, #28]
 80091ce:	4654      	mov	r4, sl
 80091d0:	2000      	movs	r0, #0
 80091d2:	f04f 0c0a 	mov.w	ip, #10
 80091d6:	4621      	mov	r1, r4
 80091d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091dc:	3b30      	subs	r3, #48	; 0x30
 80091de:	2b09      	cmp	r3, #9
 80091e0:	d94e      	bls.n	8009280 <_vfiprintf_r+0x1c4>
 80091e2:	b1b0      	cbz	r0, 8009212 <_vfiprintf_r+0x156>
 80091e4:	9207      	str	r2, [sp, #28]
 80091e6:	e014      	b.n	8009212 <_vfiprintf_r+0x156>
 80091e8:	eba0 0308 	sub.w	r3, r0, r8
 80091ec:	fa09 f303 	lsl.w	r3, r9, r3
 80091f0:	4313      	orrs	r3, r2
 80091f2:	9304      	str	r3, [sp, #16]
 80091f4:	46a2      	mov	sl, r4
 80091f6:	e7d2      	b.n	800919e <_vfiprintf_r+0xe2>
 80091f8:	9b03      	ldr	r3, [sp, #12]
 80091fa:	1d19      	adds	r1, r3, #4
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	9103      	str	r1, [sp, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	bfbb      	ittet	lt
 8009204:	425b      	neglt	r3, r3
 8009206:	f042 0202 	orrlt.w	r2, r2, #2
 800920a:	9307      	strge	r3, [sp, #28]
 800920c:	9307      	strlt	r3, [sp, #28]
 800920e:	bfb8      	it	lt
 8009210:	9204      	strlt	r2, [sp, #16]
 8009212:	7823      	ldrb	r3, [r4, #0]
 8009214:	2b2e      	cmp	r3, #46	; 0x2e
 8009216:	d10c      	bne.n	8009232 <_vfiprintf_r+0x176>
 8009218:	7863      	ldrb	r3, [r4, #1]
 800921a:	2b2a      	cmp	r3, #42	; 0x2a
 800921c:	d135      	bne.n	800928a <_vfiprintf_r+0x1ce>
 800921e:	9b03      	ldr	r3, [sp, #12]
 8009220:	1d1a      	adds	r2, r3, #4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	9203      	str	r2, [sp, #12]
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfb8      	it	lt
 800922a:	f04f 33ff 	movlt.w	r3, #4294967295
 800922e:	3402      	adds	r4, #2
 8009230:	9305      	str	r3, [sp, #20]
 8009232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009318 <_vfiprintf_r+0x25c>
 8009236:	7821      	ldrb	r1, [r4, #0]
 8009238:	2203      	movs	r2, #3
 800923a:	4650      	mov	r0, sl
 800923c:	f7f6 fff0 	bl	8000220 <memchr>
 8009240:	b140      	cbz	r0, 8009254 <_vfiprintf_r+0x198>
 8009242:	2340      	movs	r3, #64	; 0x40
 8009244:	eba0 000a 	sub.w	r0, r0, sl
 8009248:	fa03 f000 	lsl.w	r0, r3, r0
 800924c:	9b04      	ldr	r3, [sp, #16]
 800924e:	4303      	orrs	r3, r0
 8009250:	3401      	adds	r4, #1
 8009252:	9304      	str	r3, [sp, #16]
 8009254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009258:	482c      	ldr	r0, [pc, #176]	; (800930c <_vfiprintf_r+0x250>)
 800925a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800925e:	2206      	movs	r2, #6
 8009260:	f7f6 ffde 	bl	8000220 <memchr>
 8009264:	2800      	cmp	r0, #0
 8009266:	d03f      	beq.n	80092e8 <_vfiprintf_r+0x22c>
 8009268:	4b29      	ldr	r3, [pc, #164]	; (8009310 <_vfiprintf_r+0x254>)
 800926a:	bb1b      	cbnz	r3, 80092b4 <_vfiprintf_r+0x1f8>
 800926c:	9b03      	ldr	r3, [sp, #12]
 800926e:	3307      	adds	r3, #7
 8009270:	f023 0307 	bic.w	r3, r3, #7
 8009274:	3308      	adds	r3, #8
 8009276:	9303      	str	r3, [sp, #12]
 8009278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800927a:	443b      	add	r3, r7
 800927c:	9309      	str	r3, [sp, #36]	; 0x24
 800927e:	e767      	b.n	8009150 <_vfiprintf_r+0x94>
 8009280:	fb0c 3202 	mla	r2, ip, r2, r3
 8009284:	460c      	mov	r4, r1
 8009286:	2001      	movs	r0, #1
 8009288:	e7a5      	b.n	80091d6 <_vfiprintf_r+0x11a>
 800928a:	2300      	movs	r3, #0
 800928c:	3401      	adds	r4, #1
 800928e:	9305      	str	r3, [sp, #20]
 8009290:	4619      	mov	r1, r3
 8009292:	f04f 0c0a 	mov.w	ip, #10
 8009296:	4620      	mov	r0, r4
 8009298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800929c:	3a30      	subs	r2, #48	; 0x30
 800929e:	2a09      	cmp	r2, #9
 80092a0:	d903      	bls.n	80092aa <_vfiprintf_r+0x1ee>
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d0c5      	beq.n	8009232 <_vfiprintf_r+0x176>
 80092a6:	9105      	str	r1, [sp, #20]
 80092a8:	e7c3      	b.n	8009232 <_vfiprintf_r+0x176>
 80092aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80092ae:	4604      	mov	r4, r0
 80092b0:	2301      	movs	r3, #1
 80092b2:	e7f0      	b.n	8009296 <_vfiprintf_r+0x1da>
 80092b4:	ab03      	add	r3, sp, #12
 80092b6:	9300      	str	r3, [sp, #0]
 80092b8:	462a      	mov	r2, r5
 80092ba:	4b16      	ldr	r3, [pc, #88]	; (8009314 <_vfiprintf_r+0x258>)
 80092bc:	a904      	add	r1, sp, #16
 80092be:	4630      	mov	r0, r6
 80092c0:	f7fd fcc2 	bl	8006c48 <_printf_float>
 80092c4:	4607      	mov	r7, r0
 80092c6:	1c78      	adds	r0, r7, #1
 80092c8:	d1d6      	bne.n	8009278 <_vfiprintf_r+0x1bc>
 80092ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092cc:	07d9      	lsls	r1, r3, #31
 80092ce:	d405      	bmi.n	80092dc <_vfiprintf_r+0x220>
 80092d0:	89ab      	ldrh	r3, [r5, #12]
 80092d2:	059a      	lsls	r2, r3, #22
 80092d4:	d402      	bmi.n	80092dc <_vfiprintf_r+0x220>
 80092d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d8:	f7fd fb6a 	bl	80069b0 <__retarget_lock_release_recursive>
 80092dc:	89ab      	ldrh	r3, [r5, #12]
 80092de:	065b      	lsls	r3, r3, #25
 80092e0:	f53f af12 	bmi.w	8009108 <_vfiprintf_r+0x4c>
 80092e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e6:	e711      	b.n	800910c <_vfiprintf_r+0x50>
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9300      	str	r3, [sp, #0]
 80092ec:	462a      	mov	r2, r5
 80092ee:	4b09      	ldr	r3, [pc, #36]	; (8009314 <_vfiprintf_r+0x258>)
 80092f0:	a904      	add	r1, sp, #16
 80092f2:	4630      	mov	r0, r6
 80092f4:	f7fd ff4c 	bl	8007190 <_printf_i>
 80092f8:	e7e4      	b.n	80092c4 <_vfiprintf_r+0x208>
 80092fa:	bf00      	nop
 80092fc:	08009730 	.word	0x08009730
 8009300:	08009750 	.word	0x08009750
 8009304:	08009710 	.word	0x08009710
 8009308:	08009994 	.word	0x08009994
 800930c:	0800999e 	.word	0x0800999e
 8009310:	08006c49 	.word	0x08006c49
 8009314:	08009099 	.word	0x08009099
 8009318:	0800999a 	.word	0x0800999a

0800931c <__swbuf_r>:
 800931c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931e:	460e      	mov	r6, r1
 8009320:	4614      	mov	r4, r2
 8009322:	4605      	mov	r5, r0
 8009324:	b118      	cbz	r0, 800932e <__swbuf_r+0x12>
 8009326:	6983      	ldr	r3, [r0, #24]
 8009328:	b90b      	cbnz	r3, 800932e <__swbuf_r+0x12>
 800932a:	f7fd fa7d 	bl	8006828 <__sinit>
 800932e:	4b21      	ldr	r3, [pc, #132]	; (80093b4 <__swbuf_r+0x98>)
 8009330:	429c      	cmp	r4, r3
 8009332:	d12b      	bne.n	800938c <__swbuf_r+0x70>
 8009334:	686c      	ldr	r4, [r5, #4]
 8009336:	69a3      	ldr	r3, [r4, #24]
 8009338:	60a3      	str	r3, [r4, #8]
 800933a:	89a3      	ldrh	r3, [r4, #12]
 800933c:	071a      	lsls	r2, r3, #28
 800933e:	d52f      	bpl.n	80093a0 <__swbuf_r+0x84>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	b36b      	cbz	r3, 80093a0 <__swbuf_r+0x84>
 8009344:	6923      	ldr	r3, [r4, #16]
 8009346:	6820      	ldr	r0, [r4, #0]
 8009348:	1ac0      	subs	r0, r0, r3
 800934a:	6963      	ldr	r3, [r4, #20]
 800934c:	b2f6      	uxtb	r6, r6
 800934e:	4283      	cmp	r3, r0
 8009350:	4637      	mov	r7, r6
 8009352:	dc04      	bgt.n	800935e <__swbuf_r+0x42>
 8009354:	4621      	mov	r1, r4
 8009356:	4628      	mov	r0, r5
 8009358:	f7ff f842 	bl	80083e0 <_fflush_r>
 800935c:	bb30      	cbnz	r0, 80093ac <__swbuf_r+0x90>
 800935e:	68a3      	ldr	r3, [r4, #8]
 8009360:	3b01      	subs	r3, #1
 8009362:	60a3      	str	r3, [r4, #8]
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	1c5a      	adds	r2, r3, #1
 8009368:	6022      	str	r2, [r4, #0]
 800936a:	701e      	strb	r6, [r3, #0]
 800936c:	6963      	ldr	r3, [r4, #20]
 800936e:	3001      	adds	r0, #1
 8009370:	4283      	cmp	r3, r0
 8009372:	d004      	beq.n	800937e <__swbuf_r+0x62>
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	07db      	lsls	r3, r3, #31
 8009378:	d506      	bpl.n	8009388 <__swbuf_r+0x6c>
 800937a:	2e0a      	cmp	r6, #10
 800937c:	d104      	bne.n	8009388 <__swbuf_r+0x6c>
 800937e:	4621      	mov	r1, r4
 8009380:	4628      	mov	r0, r5
 8009382:	f7ff f82d 	bl	80083e0 <_fflush_r>
 8009386:	b988      	cbnz	r0, 80093ac <__swbuf_r+0x90>
 8009388:	4638      	mov	r0, r7
 800938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938c:	4b0a      	ldr	r3, [pc, #40]	; (80093b8 <__swbuf_r+0x9c>)
 800938e:	429c      	cmp	r4, r3
 8009390:	d101      	bne.n	8009396 <__swbuf_r+0x7a>
 8009392:	68ac      	ldr	r4, [r5, #8]
 8009394:	e7cf      	b.n	8009336 <__swbuf_r+0x1a>
 8009396:	4b09      	ldr	r3, [pc, #36]	; (80093bc <__swbuf_r+0xa0>)
 8009398:	429c      	cmp	r4, r3
 800939a:	bf08      	it	eq
 800939c:	68ec      	ldreq	r4, [r5, #12]
 800939e:	e7ca      	b.n	8009336 <__swbuf_r+0x1a>
 80093a0:	4621      	mov	r1, r4
 80093a2:	4628      	mov	r0, r5
 80093a4:	f000 f81a 	bl	80093dc <__swsetup_r>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0cb      	beq.n	8009344 <__swbuf_r+0x28>
 80093ac:	f04f 37ff 	mov.w	r7, #4294967295
 80093b0:	e7ea      	b.n	8009388 <__swbuf_r+0x6c>
 80093b2:	bf00      	nop
 80093b4:	08009730 	.word	0x08009730
 80093b8:	08009750 	.word	0x08009750
 80093bc:	08009710 	.word	0x08009710

080093c0 <__ascii_wctomb>:
 80093c0:	b149      	cbz	r1, 80093d6 <__ascii_wctomb+0x16>
 80093c2:	2aff      	cmp	r2, #255	; 0xff
 80093c4:	bf85      	ittet	hi
 80093c6:	238a      	movhi	r3, #138	; 0x8a
 80093c8:	6003      	strhi	r3, [r0, #0]
 80093ca:	700a      	strbls	r2, [r1, #0]
 80093cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80093d0:	bf98      	it	ls
 80093d2:	2001      	movls	r0, #1
 80093d4:	4770      	bx	lr
 80093d6:	4608      	mov	r0, r1
 80093d8:	4770      	bx	lr
	...

080093dc <__swsetup_r>:
 80093dc:	4b32      	ldr	r3, [pc, #200]	; (80094a8 <__swsetup_r+0xcc>)
 80093de:	b570      	push	{r4, r5, r6, lr}
 80093e0:	681d      	ldr	r5, [r3, #0]
 80093e2:	4606      	mov	r6, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	b125      	cbz	r5, 80093f2 <__swsetup_r+0x16>
 80093e8:	69ab      	ldr	r3, [r5, #24]
 80093ea:	b913      	cbnz	r3, 80093f2 <__swsetup_r+0x16>
 80093ec:	4628      	mov	r0, r5
 80093ee:	f7fd fa1b 	bl	8006828 <__sinit>
 80093f2:	4b2e      	ldr	r3, [pc, #184]	; (80094ac <__swsetup_r+0xd0>)
 80093f4:	429c      	cmp	r4, r3
 80093f6:	d10f      	bne.n	8009418 <__swsetup_r+0x3c>
 80093f8:	686c      	ldr	r4, [r5, #4]
 80093fa:	89a3      	ldrh	r3, [r4, #12]
 80093fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009400:	0719      	lsls	r1, r3, #28
 8009402:	d42c      	bmi.n	800945e <__swsetup_r+0x82>
 8009404:	06dd      	lsls	r5, r3, #27
 8009406:	d411      	bmi.n	800942c <__swsetup_r+0x50>
 8009408:	2309      	movs	r3, #9
 800940a:	6033      	str	r3, [r6, #0]
 800940c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009410:	81a3      	strh	r3, [r4, #12]
 8009412:	f04f 30ff 	mov.w	r0, #4294967295
 8009416:	e03e      	b.n	8009496 <__swsetup_r+0xba>
 8009418:	4b25      	ldr	r3, [pc, #148]	; (80094b0 <__swsetup_r+0xd4>)
 800941a:	429c      	cmp	r4, r3
 800941c:	d101      	bne.n	8009422 <__swsetup_r+0x46>
 800941e:	68ac      	ldr	r4, [r5, #8]
 8009420:	e7eb      	b.n	80093fa <__swsetup_r+0x1e>
 8009422:	4b24      	ldr	r3, [pc, #144]	; (80094b4 <__swsetup_r+0xd8>)
 8009424:	429c      	cmp	r4, r3
 8009426:	bf08      	it	eq
 8009428:	68ec      	ldreq	r4, [r5, #12]
 800942a:	e7e6      	b.n	80093fa <__swsetup_r+0x1e>
 800942c:	0758      	lsls	r0, r3, #29
 800942e:	d512      	bpl.n	8009456 <__swsetup_r+0x7a>
 8009430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009432:	b141      	cbz	r1, 8009446 <__swsetup_r+0x6a>
 8009434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009438:	4299      	cmp	r1, r3
 800943a:	d002      	beq.n	8009442 <__swsetup_r+0x66>
 800943c:	4630      	mov	r0, r6
 800943e:	f7ff fbcf 	bl	8008be0 <_free_r>
 8009442:	2300      	movs	r3, #0
 8009444:	6363      	str	r3, [r4, #52]	; 0x34
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800944c:	81a3      	strh	r3, [r4, #12]
 800944e:	2300      	movs	r3, #0
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	6923      	ldr	r3, [r4, #16]
 8009454:	6023      	str	r3, [r4, #0]
 8009456:	89a3      	ldrh	r3, [r4, #12]
 8009458:	f043 0308 	orr.w	r3, r3, #8
 800945c:	81a3      	strh	r3, [r4, #12]
 800945e:	6923      	ldr	r3, [r4, #16]
 8009460:	b94b      	cbnz	r3, 8009476 <__swsetup_r+0x9a>
 8009462:	89a3      	ldrh	r3, [r4, #12]
 8009464:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800946c:	d003      	beq.n	8009476 <__swsetup_r+0x9a>
 800946e:	4621      	mov	r1, r4
 8009470:	4630      	mov	r0, r6
 8009472:	f000 f84d 	bl	8009510 <__smakebuf_r>
 8009476:	89a0      	ldrh	r0, [r4, #12]
 8009478:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800947c:	f010 0301 	ands.w	r3, r0, #1
 8009480:	d00a      	beq.n	8009498 <__swsetup_r+0xbc>
 8009482:	2300      	movs	r3, #0
 8009484:	60a3      	str	r3, [r4, #8]
 8009486:	6963      	ldr	r3, [r4, #20]
 8009488:	425b      	negs	r3, r3
 800948a:	61a3      	str	r3, [r4, #24]
 800948c:	6923      	ldr	r3, [r4, #16]
 800948e:	b943      	cbnz	r3, 80094a2 <__swsetup_r+0xc6>
 8009490:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009494:	d1ba      	bne.n	800940c <__swsetup_r+0x30>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	0781      	lsls	r1, r0, #30
 800949a:	bf58      	it	pl
 800949c:	6963      	ldrpl	r3, [r4, #20]
 800949e:	60a3      	str	r3, [r4, #8]
 80094a0:	e7f4      	b.n	800948c <__swsetup_r+0xb0>
 80094a2:	2000      	movs	r0, #0
 80094a4:	e7f7      	b.n	8009496 <__swsetup_r+0xba>
 80094a6:	bf00      	nop
 80094a8:	20000010 	.word	0x20000010
 80094ac:	08009730 	.word	0x08009730
 80094b0:	08009750 	.word	0x08009750
 80094b4:	08009710 	.word	0x08009710

080094b8 <abort>:
 80094b8:	b508      	push	{r3, lr}
 80094ba:	2006      	movs	r0, #6
 80094bc:	f000 f898 	bl	80095f0 <raise>
 80094c0:	2001      	movs	r0, #1
 80094c2:	f7f8 fae5 	bl	8001a90 <_exit>

080094c6 <__swhatbuf_r>:
 80094c6:	b570      	push	{r4, r5, r6, lr}
 80094c8:	460e      	mov	r6, r1
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	b096      	sub	sp, #88	; 0x58
 80094d2:	4614      	mov	r4, r2
 80094d4:	461d      	mov	r5, r3
 80094d6:	da08      	bge.n	80094ea <__swhatbuf_r+0x24>
 80094d8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	602a      	str	r2, [r5, #0]
 80094e0:	061a      	lsls	r2, r3, #24
 80094e2:	d410      	bmi.n	8009506 <__swhatbuf_r+0x40>
 80094e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e8:	e00e      	b.n	8009508 <__swhatbuf_r+0x42>
 80094ea:	466a      	mov	r2, sp
 80094ec:	f000 f89c 	bl	8009628 <_fstat_r>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	dbf1      	blt.n	80094d8 <__swhatbuf_r+0x12>
 80094f4:	9a01      	ldr	r2, [sp, #4]
 80094f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094fe:	425a      	negs	r2, r3
 8009500:	415a      	adcs	r2, r3
 8009502:	602a      	str	r2, [r5, #0]
 8009504:	e7ee      	b.n	80094e4 <__swhatbuf_r+0x1e>
 8009506:	2340      	movs	r3, #64	; 0x40
 8009508:	2000      	movs	r0, #0
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	b016      	add	sp, #88	; 0x58
 800950e:	bd70      	pop	{r4, r5, r6, pc}

08009510 <__smakebuf_r>:
 8009510:	898b      	ldrh	r3, [r1, #12]
 8009512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009514:	079d      	lsls	r5, r3, #30
 8009516:	4606      	mov	r6, r0
 8009518:	460c      	mov	r4, r1
 800951a:	d507      	bpl.n	800952c <__smakebuf_r+0x1c>
 800951c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	2301      	movs	r3, #1
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	b002      	add	sp, #8
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	ab01      	add	r3, sp, #4
 800952e:	466a      	mov	r2, sp
 8009530:	f7ff ffc9 	bl	80094c6 <__swhatbuf_r>
 8009534:	9900      	ldr	r1, [sp, #0]
 8009536:	4605      	mov	r5, r0
 8009538:	4630      	mov	r0, r6
 800953a:	f7fd fa71 	bl	8006a20 <_malloc_r>
 800953e:	b948      	cbnz	r0, 8009554 <__smakebuf_r+0x44>
 8009540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009544:	059a      	lsls	r2, r3, #22
 8009546:	d4ef      	bmi.n	8009528 <__smakebuf_r+0x18>
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	f043 0302 	orr.w	r3, r3, #2
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	e7e3      	b.n	800951c <__smakebuf_r+0xc>
 8009554:	4b0d      	ldr	r3, [pc, #52]	; (800958c <__smakebuf_r+0x7c>)
 8009556:	62b3      	str	r3, [r6, #40]	; 0x28
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	6020      	str	r0, [r4, #0]
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	6163      	str	r3, [r4, #20]
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	6120      	str	r0, [r4, #16]
 800956a:	b15b      	cbz	r3, 8009584 <__smakebuf_r+0x74>
 800956c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009570:	4630      	mov	r0, r6
 8009572:	f000 f86b 	bl	800964c <_isatty_r>
 8009576:	b128      	cbz	r0, 8009584 <__smakebuf_r+0x74>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	89a0      	ldrh	r0, [r4, #12]
 8009586:	4305      	orrs	r5, r0
 8009588:	81a5      	strh	r5, [r4, #12]
 800958a:	e7cd      	b.n	8009528 <__smakebuf_r+0x18>
 800958c:	080067c1 	.word	0x080067c1

08009590 <_malloc_usable_size_r>:
 8009590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009594:	1f18      	subs	r0, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	bfbc      	itt	lt
 800959a:	580b      	ldrlt	r3, [r1, r0]
 800959c:	18c0      	addlt	r0, r0, r3
 800959e:	4770      	bx	lr

080095a0 <_raise_r>:
 80095a0:	291f      	cmp	r1, #31
 80095a2:	b538      	push	{r3, r4, r5, lr}
 80095a4:	4604      	mov	r4, r0
 80095a6:	460d      	mov	r5, r1
 80095a8:	d904      	bls.n	80095b4 <_raise_r+0x14>
 80095aa:	2316      	movs	r3, #22
 80095ac:	6003      	str	r3, [r0, #0]
 80095ae:	f04f 30ff 	mov.w	r0, #4294967295
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80095b6:	b112      	cbz	r2, 80095be <_raise_r+0x1e>
 80095b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095bc:	b94b      	cbnz	r3, 80095d2 <_raise_r+0x32>
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 f830 	bl	8009624 <_getpid_r>
 80095c4:	462a      	mov	r2, r5
 80095c6:	4601      	mov	r1, r0
 80095c8:	4620      	mov	r0, r4
 80095ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ce:	f000 b817 	b.w	8009600 <_kill_r>
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d00a      	beq.n	80095ec <_raise_r+0x4c>
 80095d6:	1c59      	adds	r1, r3, #1
 80095d8:	d103      	bne.n	80095e2 <_raise_r+0x42>
 80095da:	2316      	movs	r3, #22
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	2001      	movs	r0, #1
 80095e0:	e7e7      	b.n	80095b2 <_raise_r+0x12>
 80095e2:	2400      	movs	r4, #0
 80095e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095e8:	4628      	mov	r0, r5
 80095ea:	4798      	blx	r3
 80095ec:	2000      	movs	r0, #0
 80095ee:	e7e0      	b.n	80095b2 <_raise_r+0x12>

080095f0 <raise>:
 80095f0:	4b02      	ldr	r3, [pc, #8]	; (80095fc <raise+0xc>)
 80095f2:	4601      	mov	r1, r0
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	f7ff bfd3 	b.w	80095a0 <_raise_r>
 80095fa:	bf00      	nop
 80095fc:	20000010 	.word	0x20000010

08009600 <_kill_r>:
 8009600:	b538      	push	{r3, r4, r5, lr}
 8009602:	4d07      	ldr	r5, [pc, #28]	; (8009620 <_kill_r+0x20>)
 8009604:	2300      	movs	r3, #0
 8009606:	4604      	mov	r4, r0
 8009608:	4608      	mov	r0, r1
 800960a:	4611      	mov	r1, r2
 800960c:	602b      	str	r3, [r5, #0]
 800960e:	f7f8 fa2f 	bl	8001a70 <_kill>
 8009612:	1c43      	adds	r3, r0, #1
 8009614:	d102      	bne.n	800961c <_kill_r+0x1c>
 8009616:	682b      	ldr	r3, [r5, #0]
 8009618:	b103      	cbz	r3, 800961c <_kill_r+0x1c>
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	bd38      	pop	{r3, r4, r5, pc}
 800961e:	bf00      	nop
 8009620:	20004468 	.word	0x20004468

08009624 <_getpid_r>:
 8009624:	f7f8 ba1c 	b.w	8001a60 <_getpid>

08009628 <_fstat_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_fstat_r+0x20>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	4611      	mov	r1, r2
 8009634:	602b      	str	r3, [r5, #0]
 8009636:	f7f8 fa7a 	bl	8001b2e <_fstat>
 800963a:	1c43      	adds	r3, r0, #1
 800963c:	d102      	bne.n	8009644 <_fstat_r+0x1c>
 800963e:	682b      	ldr	r3, [r5, #0]
 8009640:	b103      	cbz	r3, 8009644 <_fstat_r+0x1c>
 8009642:	6023      	str	r3, [r4, #0]
 8009644:	bd38      	pop	{r3, r4, r5, pc}
 8009646:	bf00      	nop
 8009648:	20004468 	.word	0x20004468

0800964c <_isatty_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d06      	ldr	r5, [pc, #24]	; (8009668 <_isatty_r+0x1c>)
 8009650:	2300      	movs	r3, #0
 8009652:	4604      	mov	r4, r0
 8009654:	4608      	mov	r0, r1
 8009656:	602b      	str	r3, [r5, #0]
 8009658:	f7f8 fa79 	bl	8001b4e <_isatty>
 800965c:	1c43      	adds	r3, r0, #1
 800965e:	d102      	bne.n	8009666 <_isatty_r+0x1a>
 8009660:	682b      	ldr	r3, [r5, #0]
 8009662:	b103      	cbz	r3, 8009666 <_isatty_r+0x1a>
 8009664:	6023      	str	r3, [r4, #0]
 8009666:	bd38      	pop	{r3, r4, r5, pc}
 8009668:	20004468 	.word	0x20004468

0800966c <_init>:
 800966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966e:	bf00      	nop
 8009670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009672:	bc08      	pop	{r3}
 8009674:	469e      	mov	lr, r3
 8009676:	4770      	bx	lr

08009678 <_fini>:
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967a:	bf00      	nop
 800967c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800967e:	bc08      	pop	{r3}
 8009680:	469e      	mov	lr, r3
 8009682:	4770      	bx	lr
